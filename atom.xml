<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stitch&#39;s Blog</title>
  
  
  <link href="https://stitch.cn/atom.xml" rel="self"/>
  
  <link href="https://stitch.cn/"/>
  <updated>2021-10-11T05:56:08.207Z</updated>
  <id>https://stitch.cn/</id>
  
  <author>
    <name>stitch</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis-链表</title>
    <link href="https://stitch.cn/2021/04/01/redis-%E9%93%BE%E8%A1%A8.html"/>
    <id>https://stitch.cn/2021/04/01/redis-%E9%93%BE%E8%A1%A8.html</id>
    <published>2021-04-01T00:48:13.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<p>链表提供了高效的节点重排能力，以及顺序性的节点访问方式，并且可以通过增删节点来灵活的调整链表的长度。</p><p>作为一种常用数据结构，链表内置在很多高级的编程语言里面，因为<code>Redis</code>使用的<code>c</code>语言并没有内置这种数据结构，所以<code>Redis</code>构建了自己的链表实现。</p><p>链表在<code>Redis</code>中的应用非常广泛，比如列表键的底层实现之一就是链表。当一个列表键包含了数量比较多的元素，又或者列表中包含的元素都是比较长的字符串的时，<code>Redis</code>就会使用链表作为列表键的实现。</p><p>举个例子，以下展示的<code>integers</code>列表键包含了<code>1-1024</code>共一千零二十四个整数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; LLEN integers</span><br><span class="line">(integer) 1024</span><br><span class="line">redis&gt; LRANGE integers 0 10</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;4&quot;</span><br><span class="line">5) &quot;5&quot;</span><br><span class="line">6) &quot;6&quot;</span><br><span class="line">7) &quot;7&quot;</span><br><span class="line">8) &quot;8&quot;</span><br><span class="line">9) &quot;9&quot;</span><br><span class="line">10) &quot;10&quot;</span><br><span class="line">11) &quot;11&quot;</span><br></pre></td></tr></table></figure><p><code>integers</code>列表键的底层实现就是一个链表，链表中的每个节点都保存了一个整数值。<br>除了链表键之外，发布与订阅、慢查询、监视器等功能也用到了链表，<code>Redis</code>服务器本身还是要链表保存多个客户端信息的状态信息，以及使用链表来构建客户端输出缓冲区<code>（output buffer）</code>。</p><h2 id="链表和链表节点的实现"><a href="#链表和链表节点的实现" class="headerlink" title="链表和链表节点的实现"></a>链表和链表节点的实现</h2><p>每个链接节点使用一个<code>adlist.h/listNode</code>结构来表示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> &#123;</span></span><br><span class="line"><span class="comment">// 前置节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">prev</span>;</span></span><br><span class="line">    <span class="comment">// 后置节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="comment">// 节点的值</span></span><br><span class="line">    <span class="keyword">void</span> *value;</span><br><span class="line">&#125; listNode;</span><br></pre></td></tr></table></figure><p>多个<code>listNode</code>可以通过<code>prev</code>和<code>next</code>指针组成双端列表，如下图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a8921ac3ca23f31e04f086022ed3bfe3.png"></p><p>虽然仅仅使用多个<code>listNode</code>结构就可以组成链表，但使用<code>adlist.h/list</code>来持有链表的话，操作起来会更方便：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line"><span class="comment">// 表头节点</span></span><br><span class="line">    listNode *head;</span><br><span class="line">    <span class="comment">// 表尾节点</span></span><br><span class="line">    listNode *tail;</span><br><span class="line">    <span class="comment">// 节点值复制函数</span></span><br><span class="line">    <span class="keyword">void</span> *(*dup)(<span class="keyword">void</span> *ptr);</span><br><span class="line">    <span class="comment">// 节点值释放函数</span></span><br><span class="line">    <span class="keyword">void</span> (*<span class="built_in">free</span>)(<span class="keyword">void</span> *ptr);</span><br><span class="line">    <span class="comment">// 节点值对比函数</span></span><br><span class="line">    <span class="keyword">int</span> (*match)(<span class="keyword">void</span> *ptr, <span class="keyword">void</span> *key);</span><br><span class="line">    <span class="comment">// 链表所包含的节点数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len;</span><br><span class="line">&#125; <span class="built_in">list</span>;</span><br></pre></td></tr></table></figure><p><code>list</code>结构为链表提供了表头指针<code>head</code>、表尾指针<code>tail</code>，以及链表长度计数器<code>len</code>，而<code>dup</code>、<code>free</code>和<code>match</code>成员则是用于实现多态链表所需要的类型特定函数：</p><ul><li><code>dup</code>函数用于复制链表节点所保存的值；</li><li><code>free</code>函数用于释放链表节点所保存的值；</li><li><code>match</code>函数则用于对比链表节点所保存的值和另一个输入值是否相等；</li></ul><p>下图是由一个<code>list</code>结构和三个<code>listNode</code>结构组成的链表。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/761de7a0b30f3181f4619388fb836872.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Redis</code>的链表实现的特性可以总结如下：</p><ul><li>双端：链表节点带有<code>prev</code>和<code>next</code>指针，获取某个节点的前置节点和后置节点的复杂度都是O(1)。</li><li>无环：表头节点的<code>prev</code>指针和表尾节点的<code>next</code>指针都指向<code>NULL</code>，对链表的访问以<code>NULL</code>为终点。</li><li>带表头指针和表尾指针：通过<code>list</code>结构的<code>head</code>指针和<code>tail</code>指针，程序获取链表的表头节点和表尾节点的复杂度为O(1)。</li><li>带链表长度计数器：程序使用<code>list</code>结构的<code>len</code>属性来对<code>list</code>持有的链表节点进行计数，程序获取链表中节点数量的的复杂度为O(1)。</li><li>多态：链表节点使用<code>void*</code>指针来保存节点值，并且可以通过<code>list</code>结构的<code>dup</code>，<code>free</code>，<code>match</code>三个属性为节点值设置类型特定函数，所以链表可以用于保存各种不同类型的值。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;链表提供了高效的节点重排能力，以及顺序性的节点访问方式，并且可以通过增删节点来灵活的调整链表的长度。&lt;/p&gt;
&lt;p&gt;作为一种常用数据结构，链表内置在很多高级的编程语言里面，因为&lt;code&gt;Redis&lt;/code&gt;使用的&lt;code&gt;c&lt;/code&gt;语言并没有内置这种数据结构，</summary>
      
    
    
    
    <category term="Redis" scheme="https://stitch.cn/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis-简单动态字符串SDS</title>
    <link href="https://stitch.cn/2021/03/31/redis-%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2sds.html"/>
    <id>https://stitch.cn/2021/03/31/redis-%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2sds.html</id>
    <published>2021-03-31T01:12:26.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis-简单动态字符串SDS"><a href="#Redis-简单动态字符串SDS" class="headerlink" title="Redis-简单动态字符串SDS"></a>Redis-简单动态字符串SDS</h1><blockquote><p>好久没写博客了，今天水一篇文章。</p></blockquote><p><code>Redis</code>没有使用<code>c</code>语言传统的字符串去表示。而是构建了一种名为简单动态字符串<code>（simple dynamic string, SDS）</code>的抽象类型，并将<code>sds</code>用作<code>redis</code>的默认字符串表示。</p><p>举个例子<code>set msg &quot;hello world&quot;</code>：</p><ul><li>键值对的键是一个字符串对象，对象的底层实现是一个保存着字符串”msg“的<code>sds</code>。</li><li>键值对的值也是一个字符串对象，对象的底层实现是一个保存着字符串“hello world”的<code>sds</code>。</li></ul><p>又比如<code>rpush fruits &quot;apple&quot; &quot;banana&quot;</code>：</p><ul><li>键值对的键是一个字符串对象，对象的底层实现是一个保存着字符串”msg“的<code>sds</code>。</li><li>键值对的值是一个列表对象，列表对象包含了两个字符串对象，一个<code>sds</code>保存着<code>apple</code>，另一个保存着<code>banana</code>。</li></ul><h2 id="SDS的定义"><a href="#SDS的定义" class="headerlink" title="SDS的定义"></a>SDS的定义</h2><p>每个<code>sds.h/sdshdr</code>结构表示一个<code>SDS</code>值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct sdshdr &#123;</span><br><span class="line">// 记录buf数组中已使用字节数量 等于sds所保存字符串的长度</span><br><span class="line">int len;</span><br><span class="line"></span><br><span class="line">// 记录buf数组中未使用的字节数量</span><br><span class="line">int free;</span><br><span class="line"></span><br><span class="line">// 字节数组 用于保存字符串</span><br><span class="line">char buf[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7b477567b02ae8d8c107e898ad599c89.png"></p><ul><li><code>free</code>属性值为0，表示这个<code>sds</code>没有分配任何使用空间。</li><li><code>len</code>属性值为5，表示这个<code>sds</code>保存了一个五字节长的字符串。</li><li><code>buf</code>属性是一个<code>char</code>类型的数组，数组的前5个字节分别保存了为<code>R</code>，<code>e</code>，<code>d</code>，<code>i</code>，<code>s</code>五个字符，而最后一个字节则保存了空字符<code>\0</code>。</li></ul><p><code>sds</code>遵循<code>c</code>语言字符串以空字符结尾的惯例，保存空字符的1字节空间不计算在<code>sds</code>的<code>len</code>属性里面。并且为空字符分配额外的1字节空间及添加空字符到字符串末尾等操作都是有<code>sds</code>函数自动完成，所以这个空字符对于<code>sds</code>的使用者是完全透明的。</p><h2 id="SDS与C字符串的区别"><a href="#SDS与C字符串的区别" class="headerlink" title="SDS与C字符串的区别"></a>SDS与C字符串的区别</h2><p><code>c</code>语言字符串使用长度为<code>N+1</code>的字符数组表示长度为<code>N</code>的字符串，并且字符数组的最后一个元素为空字符<code>\0</code>。</p><p>这种简单的字符串不能满足<code>redis</code>对字符串在安全性、效率性以及功能方面的要求。</p><h3 id="常数复杂度获取字符串长度"><a href="#常数复杂度获取字符串长度" class="headerlink" title="常数复杂度获取字符串长度"></a>常数复杂度获取字符串长度</h3><p><code>c</code>字符串并不记录自身的长度信息，所以获取一个<code>c</code>字符串的长度，程序需要遍历整个字符串，对遇到的每个字符进行计数，直到遇到代表字符串结尾的空字符为止，时间复杂度为<code>O(N)</code>。</p><p><code>sds</code>在<code>len</code>属性记录了<code>sds</code>本身的长度，所以获取一个<code>sds</code>的长度复杂度为<code>O(1)</code>。</p><p>设置和更新<code>sds</code>的长度工作是由<code>sds</code>的<code>api</code>在执行时自动完成的，使用<code>sds</code>无须进行任何手动修改长度的工作。</p><p>通过使用<code>sds</code>而不是<code>c</code>字符串，<code>redis</code>将获取字符串长度所需的时间复杂度从<code>O(N)</code>降低到了<code>O(1)</code>，这确保了获取字符串长度的工作不会成为<code>redis</code>的性能瓶颈。</p><h3 id="杜绝缓冲区溢出"><a href="#杜绝缓冲区溢出" class="headerlink" title="杜绝缓冲区溢出"></a>杜绝缓冲区溢出</h3><p><code>c</code>字符串不记录自身长度将会带来另一个问题：容易造成缓冲区溢出<code>（buffer overflow）</code>。</p><p><code>strcat</code>函数可以将<code>src</code>字符串的内容拼接到<code>dest</code>字符串末尾：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char *strcat(char *dest, const char *src);</span><br></pre></td></tr></table></figure><p>因为<code>c</code>字符串不记录自身的长度，所以<code>stract</code>假定用户在执行这个函数时，已经为<code>dest</code>分配了足够多的内存，可以容纳<code>src</code>字符串中的所有内容，而一旦这个假定不成立，就会产生缓冲区溢出。</p><p>举个例子，假设程序有两个在内存中紧邻着的<code>c</code>字符串<code>s1</code>和<code>s2</code>，其中<code>s1</code>保存了字符串<code>redis</code>，而<code>s2</code>则保存了字符串<code>MongoDb</code>。如图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/35ed2590ab0ff3f84c7e9a76af721ff1.png"></p><p>如果一个程序决定通过执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strcat(s1, &quot; Cluster&quot;);</span><br></pre></td></tr></table></figure><p>将<code>s1</code>的内容修改为<code>Redis Cluster</code>，但粗心的却忘记了在执行<code>strcat</code>之前为<code>s1</code>分配足够的空间，那么函数执行之后，<code>s1</code>的数据将溢出到<code>s2</code>所在的空间中，导致<code>s2</code>保存的内容被意外的修改。如图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d82f962e7fb1cddd27a75bb40476eb3e.png"></p><p>与<code>c</code>字符串不同，<code>sds</code>的空间分配策略完全杜绝了发生缓冲区溢出的可能性：当<code>sds</code>的<code>api</code>需要对<code>sds</code>进行修改时，<code>api</code>会先检查<code>sds</code>的空间是否满足修改所需的要求，如果不满足，会自动将<code>sds</code>的空间扩展至执行修改所需要的大小，然后才执行实际的修改操作。所以使用<code>sds</code>不需要手动修改<code>sds</code>的空间大小，也不会出现缓冲区溢出问题。</p><p>举个例子：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fa3b02cba049a8d6c6b5abd2ae52bbaf.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdscat(s, &quot; Cluster&quot;)</span><br></pre></td></tr></table></figure><p><code>sdscat</code>将在执行拼接操作之前检查<code>s</code>的长度是否足够，不够将扩展空间，才去执行拼接操作，拼接完成后的<code>sds</code>如图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c35a40305186a9c6827c4b34e1517aae.png"></p><p><code>sdscat</code>不仅为这个<code>sds</code>进行拼接操作，还分配了<code>13</code>字节的未使用空间，并且拼接之后的字符串正好也是<code>13</code>字节，这不是<code>bug</code>，而是与<code>sds</code>的分配空间策略有关，下面会说明。</p><h3 id="减少修改字符串时带来的内存重分配次数"><a href="#减少修改字符串时带来的内存重分配次数" class="headerlink" title="减少修改字符串时带来的内存重分配次数"></a>减少修改字符串时带来的内存重分配次数</h3><p>因为<code>c</code>字符串的长度和底层数组的长度直接存在着关联关系，所以<code>c</code>语言字符串每次增长或者缩短都要进行一次内存重新分配操作；</p><ul><li>如果程序执行增长字符串操作，执行操作前，程序需要先通过内存重新分配来扩展底层空间大小，忘记这步操作将会产生缓冲区溢出。</li><li>如果程序执行缩短字符串操作，执行操作后，程序需要通过内存重新分配来释放字符串不使用的空间，忘记这步操作会产生内存泄露。</li></ul><p>对于<code>redis</code>，经常被用于速度要求严苛、数据被频繁修改的场景，如果每次修改字符串长度都要执行一次内存分配，光是执行内存重新分配的时间就会占去修改字符串所用时间的一大部分，如果这种修改频繁发生，可能会对性能造成影响。</p><p>为了避免<code>c</code>字符串的这种缺陷，<code>sds</code>通过未使用空间解决了字符串长度和底层数组长度之间的关联。通过未使用空间，<code>sds</code>实现了空间预分配和惰性空间释放两种优化策略。</p><p><strong>空间预分配</strong>：</p><p>空间预分配用于优化<code>sds</code>的字符串增长操作：当<code>sds</code>的<code>api</code>对一个<code>sds</code>进行修改，并且需要对<code>sds</code>进行空间扩展的时候，程序不仅会为<code>sds</code>分配修改所必须要的空间，还会为<code>sds</code>分配额外的未使用空间。</p><p>其中，额外分配未使用空间数量由以下公式决定：</p><ul><li>如果对<code>sds</code>进行修改后，<code>sds</code>的长度将小于<code>1mb</code>，那么程序会分配和<code>len</code>属性同样大小的未使用空间，这时<code>sds</code>的<code>len</code>属性和<code>free</code>的值相同。举个例子，进行修改后<code>len</code>为<code>10</code>，那么<code>free</code>也为<code>10</code>，<code>sds</code>的<code>buf</code>数组的实际长度为<code>10 + 10 + 1 = 21</code>。</li><li>如果对<code>sds</code>进行修改后，<code>sds</code>的长度将大于<code>1mb</code>，那么程序会分配<code>1mb</code>的使用空间。举个例子，进行修改后<code>len</code>为<code>10mb</code>，那么<code>free</code>为<code>1mb</code>，<code>sds</code>的<code>buf</code>数组的实际长度为<code>10mb + 1mb + 1byte</code>。</li></ul><p><strong>懒惰空间释放</strong></p><p>懒惰空间释放用于优化<code>sds</code>的字符串缩短操作：当<code>sds</code>的<code>api</code>需要缩短<code>sds</code>保存的字符串时，程序并不会立即使用内存重分配来回收缩短后多出来的自己，而是使用<code>free</code>属性将这些字节的数量记录起来，并等待将来使用。</p><p>举个例子，<code>sdstrim</code>函数接受一个<code>sds</code>和一个<code>c</code>字符串作为参数，从<code>sds</code>左右两端分别移出所以在<code>c</code>字符串中出现的字符。</p><p>如图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9abe3fc87583879b80b4604a84d5380b.png"></p><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdstrim(s, &quot;XY&quot;); // 移除 sds 字符串中所有 ‘X’和‘Y’</span><br></pre></td></tr></table></figure><p>会将<code>sds</code>修改成如下图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fa7ba0e9098a451673f11a086a547bc4.png"></p><p>注意执行<code>sdstrim</code>之后的<code>sds</code>并没有释放出来多余的<code>8</code>字节空间，而是将这<code>8</code>字节空间作为未使用空间保留在了<code>sds</code>里面，如果将来要<code>sds</code>进行增长操作，这些未使用空间就会用上。</p><p>举个例子，现在对<code>s</code>执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdscat(s, &quot; Redis&quot;);</span><br></pre></td></tr></table></figure><p>那么完成这次<code>sdscat</code>操作将不需要执行内存重新分配，因为<code>sds</code>预留的<code>8</code>字节空间足以拼接<code>6</code>个字节的<code> Redis</code>，通过惰性空间释放策略，<code>sds</code>避免了缩短字符串所需的内存重分配操作，并为将来可能有的增长操作提供了优化，如图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2f217e31f74b65414000235d15acdc9d.png"></p><p>与此同时，<code>sds</code>也提供了相应的<code>api</code>，让我们可以在有需要时，真正的释放<code>sds</code>的未使用空间，所以不必担心惰性空间释放策略会造成内存浪费。</p><h3 id="二进制安全"><a href="#二进制安全" class="headerlink" title="二进制安全"></a>二进制安全</h3><p><code>c</code>字符串中的字符必须符合某种编码<code>（比如 ASCII）</code>，并且除了字符串的末尾之外，字符串里面不能包含空字符串，否则最先被程序读入的空字符将被误认为是字符串结尾，这些限制使得<code>c</code>字符串只能保存文本数据，不能保存图片、音频这样的二进制数据。</p><p>举个例子，如果有一种使用空字符串分割多个单词的特殊数据格式，那么这种格式就不能使用<code>c</code>字符串来保存，因为<code>c</code>字符串所用的函数之后识别出其中的<code>Redis</code>，而忽略之后的<code>Cluster</code>。如图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0ab372a1826b08e287ec198aaa5c0250.png"></p><p>而<code>sds</code>的<code>buf</code>属性被成为字节数组的原因——<code>redis</code>不是用这个数组来保存字符，而是用它来保存一系列二进制数据。</p><p>例如，使用<code>sds</code>来保存之前提到的数据格式就没有问题，因为<code>sds</code>使用<code>len</code>属性的值而不是空字符来判断字符串是否结束，如图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0b84c7ab4ab9c952ef645f19f3b3b000.png"></p><h3 id="兼容部分c字符串函数"><a href="#兼容部分c字符串函数" class="headerlink" title="兼容部分c字符串函数"></a>兼容部分c字符串函数</h3><p>虽然<code>sds</code>的<code>api</code>都是二进制安全，但它们一样遵循<code>c</code>字符串以空字符串结尾的惯例：这些<code>api</code>总会将<code>sds</code>保存的数据的末尾设置为空字符，并且总会在为<code>buf</code>数组分配空间时多分配一个字节来容纳这个字符串，这是为了让那些保存文本数据的<code>sds</code>可以重用一部分<code>&lt;string.h&gt;</code>库定义的函数。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fc6d176ee7d6f43da38d1e77b013dde0.png"></p><p>举个例子，如果有一个保存文本数据的<code>sds</code>，如上图，那么我们就可以重用<code>&lt;string.h&gt;/strasecmp</code>函数，使用它来对比<code>sds</code>保存的字符串另一个<code>c</code>字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strcasecmp(sds-&gt;buf, &quot;hello world&quot;);</span><br></pre></td></tr></table></figure><p>遵循<code>c</code>字符串以空字符结尾的惯例，<code>sds</code>可以在有需要时重用<code>&lt;string.h&gt;</code>函数库，避免不必要的代码重复。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th align="center">C字符串</th><th align="center">SDS</th></tr></thead><tbody><tr><td align="center">获取字符串长度的复杂度为O(N)</td><td align="center">获取字符串长度的复杂度为O(1)</td></tr><tr><td align="center">API是不安全的，可能会造成缓冲区溢出</td><td align="center">API是安全的，不会造成缓冲区溢出</td></tr><tr><td align="center">修改字符串长度N次必然需要执行N次内存重分配</td><td align="center">修改字符串长度N次最多需要执行N次内存重分配</td></tr><tr><td align="center">只能保存文本数据</td><td align="center">可以保存文本数据或者二进制数据</td></tr><tr><td align="center">可以使用<code>&lt;string.h&gt;</code>库中的函数</td><td align="center">可以使用一部分<code>&lt;string.h&gt;</code>库中的函数</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis-简单动态字符串SDS&quot;&gt;&lt;a href=&quot;#Redis-简单动态字符串SDS&quot; class=&quot;headerlink&quot; title=&quot;Redis-简单动态字符串SDS&quot;&gt;&lt;/a&gt;Redis-简单动态字符串SDS&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;好</summary>
      
    
    
    
    <category term="Redis" scheme="https://stitch.cn/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>ElasticSearch全文检索引擎-使用</title>
    <link href="https://stitch.cn/2020/09/23/elasticsearch%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E5%BC%95%E6%93%8E-%E4%BD%BF%E7%94%A8.html"/>
    <id>https://stitch.cn/2020/09/23/elasticsearch%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E5%BC%95%E6%93%8E-%E4%BD%BF%E7%94%A8.html</id>
    <published>2020-09-23T06:52:22.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch使用"><a href="#ElasticSearch使用" class="headerlink" title="ElasticSearch使用"></a>ElasticSearch使用</h1><h4 id="手册官网"><a href="#手册官网" class="headerlink" title="手册官网"></a>手册官网</h4><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html">es-docs</a><br><a href="https://www.elastic.co/guide/cn/elasticsearch/php/current/index.html">es-php-docs</a></p><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><ol><li><p><strong>创建索引</strong></p><p> <code>vim createindex.json</code></p><pre><code> &#123;     &quot;settings&quot;: &#123;         &quot;refresh_interval&quot;: &quot;5s&quot;,         &quot;number_of_shards&quot;: 1,         &quot;number_of_replicas&quot;: 0     &#125;,     &quot;mappings&quot;: &#123;         &quot;_default_&quot;: &#123;             &quot;_all&quot;: &#123;                 &quot;enabled&quot;: true             &#125;         &#125;     &#125;,     &quot;products&quot;: &#123;         &quot;dynamic&quot;: false,         &quot;properties&quot;: &#123;             &quot;productid&quot;: &#123;                 &quot;type&quot;: &quot;long&quot;             &#125;,             &quot;title&quot;: &#123;                 &quot;type&quot;: &quot;string&quot;,                 &quot;index&quot;: &quot;analyzed&quot;,                 &quot;analyzer&quot;: &quot;ik&quot;             &#125;,             &quot;descr&quot;: &#123;                 &quot;type&quot;: &quot;string&quot;,                 &quot;index&quot;: &quot;analyzed&quot;,                 &quot;analyzer&quot;: &quot;ik&quot;             &#125;         &#125;     &#125; &#125;</code></pre><p> 具体的字段意思手册上都有</p><p> 创建 </p><p><code>curl -XPOST &quot;http://ip:port/shop&quot; -d&#39;@createindex.json</code>    </p><p>这里的shop就是我们要设置的索引名称 可以自定义<br>products 是 索引的type类型 可以自定义</p></li><li><p><strong>添加数据</strong></p><p> <code>curl -XPUT &quot;http://119.23.51.33:9200/shop/products/1&quot; -d&#39;&#123;&quot;productid&quot;:1,&quot;title&quot;:&quot;这是一个商品的标题&quot;,&quot;descr&quot;:&quot;这是一个商品的描述&quot;&#125;&#39;</code></p></li></ol><pre><code>`curl -XPUT &quot;http://ip:port/shop/products/2?pretty&quot; -d&#39;&#123;&quot;productid&quot;:2,&quot;title&quot;:&quot;这是一部手机&quot;,&quot;descr&quot;:&quot;这是一个苹果手机的描述信息&quot;&#125;&#39;`url地址后面的整值要跟文章id一致pretty就是 Elasticsearch美化输出(pretty-print)JSON响应以便更加容易阅读。</code></pre><ol start="3"><li><p><strong>搜索数据</strong></p><p> <code>vim search.json</code></p><pre><code>  &#123;     &quot;query&quot;: &#123;         &quot;multi_match&quot;: &#123;             &quot;query&quot;: &quot;苹果&quot;,             &quot;fields&quot;: [                 &quot;title&quot;,                 &quot;descr&quot;             ]         &#125;     &#125;,     &quot;highlight&quot;: &#123;         &quot;pre_tags&quot;: [             &quot;&lt;em&gt;&quot;         ],         &quot;post_tags&quot;: [             &quot;&lt;/em&gt;&quot;         ],         &quot;fields&quot;: &#123;             &quot;title&quot;: &#123;&#125;,             &quot;descr&quot;: &#123;&#125;         &#125;     &#125; &#125; </code></pre><p> query 要查询的关键字<br> fields 哪些字段需要被查询<br> highlight 被查询出来的关键字 进行一些改变 相当于高亮显示<br> pre_tags 标签开始 post_tags标签结束</p><p> 测试</p><p> <code>curl -XGET &quot;http://ip:port/shop/_search?pretty&quot; -d&quot;@search.json&quot;</code></p></li></ol><h4 id="elasticsearch-jdbc"><a href="#elasticsearch-jdbc" class="headerlink" title="elasticsearch-jdbc"></a>elasticsearch-jdbc</h4><p>   将数据库的数据同步到elasticsearch</p><ol><li><p><strong>下载</strong></p><p> <code>wget http://xbib.org/repository/org/xbib/elasticsearch/importer/elasticsearch-jdbc/2.3.4.0/elasticsearch-jdbc-2.3.4.0-dist.zip</code></p><p> <code>unzip elasticsearch-jdbc-2.3.4.0-dist.zip</code> </p></li></ol><ol start="2"><li><p><strong>修改配置</strong></p><p> <code> cd elasticsearch-jdbc-2.3.4.0/bin</code></p><p> 为了防止出错 先备份一下</p><p> <code>cp mysql-blog.sh mysql-blog.sh.bak</code></p><p> <code>vim mysql-blog.sh</code></p><p> 将 echo  下的内容替换成以下内容</p><pre><code> &#123;     &quot;type&quot; : &quot;jdbc&quot;,     &quot;jdbc&quot; : &#123;         &quot;url&quot; : &quot;jdbc:mysql://localhost:3306/good&quot;,         &quot;user&quot; : &quot;root&quot;,         &quot;password&quot; : &quot;1C292567e208&quot;,         &quot;sql&quot; : &quot;select productid,title,descr,productid as _id from test&quot;,         &quot;index&quot; : &quot;shop&quot;,         &quot;type&quot; : &quot;products&quot;,         &quot;elasticsearch&quot; : &#123;              &quot;cluster&quot; : &quot;search&quot;,              &quot;host&quot; : &quot;ip&quot;,              &quot;port&quot; : 9300         &#125;        &#125; &#125;</code></pre><p> url 是我们的数据库 good是库名 对哪个库进行操作<br> user password 用户名和密码<br> sql语句 就是 执行后 把查询出来的数据添加到es中<br> 这里呢productid as _id 是因为es的唯一标识是根据_id生成的<br> index 我们刚刚创建的索引名称<br> products 是索引type类型<br> cluster 是我们es配置文件中的项目名称<br> host port 分别为ip和端口号 port为9300 这个地方不可以改</p></li><li><p><strong>运行</strong></p><p><code>./mysql-blog.sh</code></p><p><code>curl -XGET &quot;http://119.23.51.33:9200/shop/_search?pretty&quot;</code></p><p>可以看到数据库的内容被添加进去了</p><p>但是修改数据库内容 或者 添加内容 es却不会改变  下面怎么改变呢</p></li><li><p><strong>监控 实时同步</strong></p><pre><code> &#123;     &quot;type&quot; : &quot;jdbc&quot;,     &quot;jdbc&quot; : &#123;         &quot;url&quot; : &quot;jdbc:mysql://localhost:3306/good&quot;,         &quot;schedule&quot; : &quot;0 0-59 0-23 ? * *&quot;,         &quot;user&quot; : &quot;root&quot;,         &quot;password&quot; : &quot;1C292567e208&quot;,         &quot;sql&quot; : [&#123;                 &quot;statement&quot;: &quot;select productid,title,descr,productid as _id from test where updatetime &gt; unix_timestamp(?) &quot;,                 &quot;parameter&quot;: [&quot;$metrics.lastexecutionstart&quot;]&#125;             ],         &quot;index&quot; : &quot;shop&quot;,         &quot;type&quot; : &quot;products&quot;,         &quot;metrics&quot;: &#123;             &quot;enabled&quot; : true         &#125;,         &quot;elasticsearch&quot; : &#123;              &quot;cluster&quot; : &quot;search&quot;,              &quot;host&quot; : &quot;ip&quot;,              &quot;port&quot; : 9300         &#125;        &#125; &#125; </code></pre><p> 这时需要一个字段去判断  那就是我们数据的修改时间<br> parameter 里面的内容 就是获取上次脚本执行时间<br> sql 的where条件 就是判断 修改时间大于上次脚本执行时间 就属于新数据</p><p> 重新执行下脚本 就可以了</p><p> 怎么用php操作呢 </p><p> 现在有好多框架的轮子</p><p> 或者直接看<a href="https://www.elastic.co/guide/cn/elasticsearch/php/current/index.html">es-php-docs</a></p><p> php框架：</p><p> <a href="https://github.com/cviebrock/laravel-elasticsearch">laravel-elasticsearch</a><br> <a href="https://github.com/yiisoft/yii2-elasticsearch">yii2-elasticsearch</a><br> 去GitHub上查找就行</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ElasticSearch使用&quot;&gt;&lt;a href=&quot;#ElasticSearch使用&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch使用&quot;&gt;&lt;/a&gt;ElasticSearch使用&lt;/h1&gt;&lt;h4 id=&quot;手册官网&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="uncategorized" scheme="https://stitch.cn/categories/uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>ElasticSearch全文检索引擎-介绍</title>
    <link href="https://stitch.cn/2020/09/20/elasticsearch%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E5%BC%95%E6%93%8E-%E4%BB%8B%E7%BB%8D.html"/>
    <id>https://stitch.cn/2020/09/20/elasticsearch%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E5%BC%95%E6%93%8E-%E4%BB%8B%E7%BB%8D.html</id>
    <published>2020-09-20T19:06:20.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h1><blockquote><p>一<strong>种将文件种或者数据库中所有文本与检索项匹配的文字资料检索方法。对全文数据的检索</strong></p></blockquote><h4 id="数据分类："><a href="#数据分类：" class="headerlink" title="数据分类："></a>数据分类：</h4><ul><li><p>结构化数据</p><pre><code>  行数据，存储在数据库里，可以用二维表结构来逻辑表达实现的数据   能够用数据或统一的结构加以表示   数字、符号去表示</code></pre></li><li><p>非结构化数据</p><pre><code>  无法用数字或统一的结构表示  文本、图像、声音、网页  结构化数据属于非结构化数据  非结构化数据即为全文数据</code></pre></li></ul><h5 id="两种方法"><a href="#两种方法" class="headerlink" title="两种方法"></a>两种方法</h5><ul><li><p>顺序扫描法</p><pre><code>  将数据库中所有的内容挨个扫描</code></pre></li><li><p>索引扫描法</p><pre><code>  全文检索的基本思路，也即将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对此有一定结构的数据进行搜索，从而达到搜索相对较快的目的。</code></pre></li></ul><h5 id="全文检索过程"><a href="#全文检索过程" class="headerlink" title="全文检索过程"></a>全文检索过程</h5><ul><li><strong>索引创建</strong><pre><code>  索引保存的是一个词元，对应文档的id  索引只会创建一次</code></pre></li></ul><blockquote><p><em>如何创建：</em></p></blockquote><ol><li><pre><code>    一些要索引的原文档(Document)</code></pre></li><li><pre><code>    将原文档传给分词组件(Tokenizer)</code></pre></li><li><pre><code>    将得到的词元(Token)传给语言处理组件(LinguisticProcessor)</code></pre></li><li><pre><code> 将得到的词(Term)传给索引组件(Indexer)     </code></pre></li></ol><ul><li><strong>搜索索引</strong></li></ul><ol><li><pre><code>    用户输入查询语句</code></pre></li><li><pre><code>    对查询语句进行词法分析，语法分析，及语言处理</code></pre></li><li><pre><code>    搜索索引，得到符号文档</code></pre></li></ol><h4 id="全文检索引擎"><a href="#全文检索引擎" class="headerlink" title="全文检索引擎"></a>全文检索引擎</h4><blockquote><p><strong>全文检索引擎是目前广泛应用的主流搜索引擎。<br>它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。</strong></p></blockquote><h5 id="相关产品"><a href="#相关产品" class="headerlink" title="相关产品"></a>相关产品</h5><blockquote><p>Lucene,Sphinx,Xapian,Nutch,DataparkSearch…</p></blockquote><h4 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h4><blockquote><p><strong>ElasticSearch是一个基于Apache Lucene(TM)的开源搜索引擎。无论在开源还是专有领域，Lucene可以被认为是迄今为止最先进、性能最好的，功能最全的搜索引擎库。</strong></p></blockquote><h5 id="为什么要选择ElasticSearch"><a href="#为什么要选择ElasticSearch" class="headerlink" title="为什么要选择ElasticSearch"></a>为什么要选择ElasticSearch</h5><blockquote><p><strong>ElasticSearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</strong></p></blockquote><blockquote><p><strong>分布式的实时文件存储，每个字段都被索引可被搜索<br>分布式的实时分析搜索引擎<br>可以扩展到上百台服务器，处理PB级结构化或非结构化数据</strong></p></blockquote><blockquote><p><strong>所有功能都集成在一个服务里面，可以通过RESTful API、各种语言的客户端甚至命令行与之交互<br>上手容易，提供了很多合理的缺省值，开箱即用，学习成本低<br>可免费下载、使用和修改 配置灵活</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;全文检索&quot;&gt;&lt;a href=&quot;#全文检索&quot; class=&quot;headerlink&quot; title=&quot;全文检索&quot;&gt;&lt;/a&gt;全文检索&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一&lt;strong&gt;种将文件种或者数据库中所有文本与检索项匹配的文字资料检索方法。对全文数据的检索&lt;</summary>
      
    
    
    
    <category term="uncategorized" scheme="https://stitch.cn/categories/uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>Go基本程序结构</title>
    <link href="https://stitch.cn/2020/09/20/go%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84.html"/>
    <id>https://stitch.cn/2020/09/20/go%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84.html</id>
    <published>2020-09-20T18:52:44.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编写测试程序"><a href="#编写测试程序" class="headerlink" title="编写测试程序"></a>编写测试程序</h2><p>测试程序：</p><ul><li><p>源码文件以<code>_test</code>结尾：<code>x x x_test.go</code></p></li><li><p>测试方法名以Test开头：<code>func TestXXX(t *testing.T) &#123;...&#125;</code></p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFirstTry</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Log(<span class="string">&quot;My first try!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现Fibonacci数列</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFibonacciList</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">//var a int = 1 // 定义变量</span></span><br><span class="line"><span class="comment">//var b int = 1</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">a <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line">b <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line">) <span class="comment">// 这样也可以定义变量</span></span><br><span class="line"><span class="comment">// a := 1 直接赋值</span></span><br><span class="line"><span class="comment">// b := 1</span></span><br><span class="line">t.Log(a)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">t.Log(<span class="string">&quot; &quot;</span>, b)</span><br><span class="line">tmp := a</span><br><span class="line">a = b</span><br><span class="line">b = tmp + a</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量及常量"><a href="#变量及常量" class="headerlink" title="变量及常量"></a>变量及常量</h2><p>变量</p><ul><li>赋值可以进行自动类型推断</li><li>在一个赋值语句中可以对多个变量进行同时赋值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestExchange</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">a := <span class="number">1</span></span><br><span class="line">b := <span class="number">2</span></span><br><span class="line"><span class="comment">//tmp := a</span></span><br><span class="line"><span class="comment">//a = b</span></span><br><span class="line"><span class="comment">//b = tmp</span></span><br><span class="line">a, b = b, a <span class="comment">// 变量交换</span></span><br><span class="line">t.Log(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量 进行快速 设置连续值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">Monday = <span class="literal">iota</span> + <span class="number">1</span></span><br><span class="line">Tuesday <span class="comment">// 2</span></span><br><span class="line">Wednesday <span class="comment">// 3</span></span><br><span class="line">Thursday <span class="comment">// 4</span></span><br><span class="line">Friday <span class="comment">// 5</span></span><br><span class="line">Saturday <span class="comment">// 6</span></span><br><span class="line">Sunday <span class="comment">// 7</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">Readable = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span></span><br><span class="line">Writable</span><br><span class="line">Executable</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestConstantTry</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Log(Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday) <span class="comment">// 1 2 3 4 5 6 7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestConstantTry1</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">a := <span class="number">7</span> <span class="comment">// 1111</span></span><br><span class="line">t.Log(a&amp;Readable == Readable, a&amp;Writable == Writable, a&amp;Executable == Executable) <span class="comment">// true true true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>所有类型：</p><ul><li><p><code>bool</code></p></li><li><p><code>string</code></p></li><li><p><code>int</code> <code>int8</code> <code>int16</code> <code>int32</code> <code>int64</code></p></li><li><p><code>uint</code> <code>uint8</code>  <code>uint16</code> <code>uint32</code> <code>uint64</code> <code>uintptr</code></p></li><li><p><code>byte</code>  // alias for uint8</p></li><li><p><code>rune</code> // alias for int32,represents a Unicode code point</p></li><li><p><code>float32</code> <code>float64</code></p></li><li><p><code>Complex64</code> <code>complex128</code></p></li></ul><p>与其它主要编程语言的差异：</p><ul><li><p>Go语言不允许隐式类型转换</p></li><li><p>别名和原有类型也不能进行隐式类型转换</p></li></ul><p>类型的预定义值：</p><ul><li><code>math.MaxInt64</code></li><li><code>math.MaxFloat64</code></li><li><code>math.MaxUint32</code></li></ul><p>指针类型：</p><ul><li>不支持指针运算</li><li><code>string</code>是值类型，其默认的初始化值为空字符串，而不是<code>nil</code></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">相加</td></tr><tr><td align="center">-</td><td align="center">相减</td></tr><tr><td align="center">*</td><td align="center">相乘</td></tr><tr><td align="center">/</td><td align="center">相除</td></tr><tr><td align="center">%</td><td align="center">求余</td></tr><tr><td align="center">++</td><td align="center">自增</td></tr><tr><td align="center">–</td><td align="center">自减</td></tr></tbody></table><p>Go语言没有前置的 ++和–</p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">检查两个值是否相等</td></tr><tr><td align="center">!=</td><td align="center">检查两个值是否不相等</td></tr><tr><td align="center">&gt;</td><td align="center">检查左边值是否大于右边值</td></tr><tr><td align="center">&lt;</td><td align="center">检查左边值是否小于右边值</td></tr><tr><td align="center">&gt;=</td><td align="center">检查左边值是否大于等于右边值</td></tr><tr><td align="center">&lt;=</td><td align="center">检查左边值是否小于等于右边值</td></tr></tbody></table><p>用 == 比较数组：</p><ul><li>相同维数且含有相同个数元素的数组才可以比较</li><li>每个元素都相同的才想等</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCompareArray</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">a := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">b := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line">c := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">t.Log(a == b) <span class="comment">// false</span></span><br><span class="line">t.Log(a == c) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">逻辑AND运算符</td></tr><tr><td align="center">||</td><td align="center">逻辑OR运算符</td></tr><tr><td align="center">!</td><td align="center">逻辑NOT运算符</td></tr></tbody></table><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">参与运算两数各对应的二进位相与</td></tr><tr><td align="center">|</td><td align="center">参与运算两数各对应的二进位相或</td></tr><tr><td align="center">^</td><td align="center">参与运算两数各对应的二进位相异或</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">左移运算符</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">右移运算符</td></tr></tbody></table><p>&amp;^按位置零</p><p>1 &amp;^ 0 – 1</p><p>1 &amp;^ 1 – 0</p><p>0 &amp;^ 1 – 0</p><p>0 &amp;^ 0 – 0</p><h2 id="条件和循环"><a href="#条件和循环" class="headerlink" title="条件和循环"></a>条件和循环</h2><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>Go语言仅支持循环关键字 <code>for</code></p><p>循环：<code>for (j := 7; j&lt;=9; i++)</code></p><p>条件循环 while(n&lt;5)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n &lt; <span class="number">5</span> &#123;</span><br><span class="line">t.Log(n)</span><br><span class="line">n++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无限循环 while(true)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">t.Log(n)</span><br><span class="line">n++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>if条件：</p><ul><li>condition 表达式结果必须为布尔值</li><li>支持变量赋值：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestIfMultiSec</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a := <span class="number">1</span> == <span class="number">1</span>; a &#123;</span><br><span class="line">t.Log(a)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch条件：</p><ul><li>条件表达式不限制为常量或者整数；</li><li>单个case中，可以出现多个结果选项，用逗号分隔；</li><li>与C语言等规则相反，Go语言不需要用break来明确退出一个case；</li><li>可以不设定switch之后的条件表达式，在此种情况下，整个switch结构与多个if…else..的逻辑作用等同；</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSwitchMultiCase</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">switch</span> i &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>, <span class="number">2</span>:</span><br><span class="line">t.Log(<span class="string">&quot;even&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>, <span class="number">3</span>:</span><br><span class="line">t.Log(<span class="string">&quot;odd&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">t.Log(<span class="string">&quot;it is not 0-3&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSwitchCaseCondition</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> i%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">t.Log(<span class="string">&quot;even&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> i%<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">t.Log(<span class="string">&quot;odd&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">t.Log(<span class="string">&quot;it is not 0-3&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;编写测试程序&quot;&gt;&lt;a href=&quot;#编写测试程序&quot; class=&quot;headerlink&quot; title=&quot;编写测试程序&quot;&gt;&lt;/a&gt;编写测试程序&lt;/h2&gt;&lt;p&gt;测试程序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;源码文件以&lt;code&gt;_test&lt;/code&gt;结尾：&lt;code&gt;</summary>
      
    
    
    
    <category term="uncategorized" scheme="https://stitch.cn/categories/uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>如何搭建redis-cluster</title>
    <link href="https://stitch.cn/2020/06/30/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAredis-cluster.html"/>
    <id>https://stitch.cn/2020/06/30/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAredis-cluster.html</id>
    <published>2020-06-30T22:34:23.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<p>​        假设在一台主从机器上配置了20G内存，但是业务需求是需要50G内存的时候，主从结构+哨兵可以实现高可用故障切换+冗余备份，但是不能解决数据容量的问题，用哨兵，每个<strong>redis</strong>实例存储的数据也都是完整的数据，浪费内存且有木桶效应。</p><p>​        为了最大化利用内存，可以采用<strong>cluster</strong>，就是分布式存储。即每台<strong>redis</strong>存储不同的内容。</p><p><strong>Redis</strong>分布式方案一般有两种：</p><ul><li>客户端分区方案：优点是分区逻辑可控，缺点是需要自己处理数据路由，实现高可用、故障转移等问题。比如在<strong>redis2.8</strong>之前通常的做法是获取某个<strong>key</strong>的<strong>hashcode</strong>，然后取余分布到不同节点，不过这种做法无法很好的支持动态伸缩性需求，一旦节点的增或者删操作，都会导致<strong>key</strong>无法在<strong>redis</strong>中命中。</li><li>代理方案：优点是简化客户端分布式逻辑和升级维护便利，缺点是加重架构部署复杂度和性能损耗。如<strong>twemproxy</strong>、<strong>codis</strong>。</li></ul><p>而<strong>redis</strong>官方提供了专有的集群方案：<strong>Redis Cluster</strong>，它非常优雅的解决了<strong>Redis</strong>集群方面的问题，部署方便简单。</p><h2 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h2><p>​        <strong>Redis Cluster</strong>是<strong>Redis</strong>的分布式解决方案，在<strong>3.0</strong>版本正式推出，有效地解决了<strong>Redis</strong>分布式方面的需求。当遇到单机内存、并发、流量等瓶颈时，可以采用<strong>Cluster</strong>架构方案达到负载均衡的目的。</p><p>​        在<strong>Redis Cluster</strong>，它们任何两个节点之间都是相互连通的。客户端可以与任何一个节点相连接，然后就可以访问集群中的任何一个节点，对其进行存取和其它操作。</p><p><strong>Redis Cluster</strong>提供的好处：</p><ul><li>将数据自动切分到多个节点的能力</li><li>当集群中的一部分节点失效或者无法进行通讯时，仍然可以继续处理命令请求的能力，拥有自动故障转移的能力。</li></ul><p><strong>Redis Cluster</strong> 和 <strong>replication + sentinel</strong> 如何选择：</p><p>如果数据量很少，主要是承载高并发高性能的场景，比如你的缓存一般就几个G，单机就够了。</p><ul><li><strong>Replication</strong>：一个<strong>master</strong>，多个<strong>slave</strong>，要几个<strong>slave</strong>跟你的要求的读吞吐量有关系，结合<strong>sentinel</strong>集群，去保证<strong>redis</strong>主从架构的高可用就行了。</li><li><strong>Redis Cluster</strong>：主要是针对海量数据+高并发+高可用的场景，海量数据，如果数据量很大，建议用<strong>Redis Cluster</strong></li></ul><p>数据分布理论：</p><p>分布式数据库首先要解决把整个数据集按照分区规则映射到多个节点的问题，即把数据集划分到多个节点上，每个节点负责整体数据的一个子集。</p><p>常见的分区规则有哈希分区和顺序分区两种：</p><ul><li>顺序分布：把一整块数据分散到很多机器中，一般都是平均分配的。</li><li>哈希分区：通过<strong>hash</strong>的函数，取余产生的数。保证这串数字充分的打散，均匀的分配到各台机器上。</li></ul><p>哈希分布和顺序分布只是场景上的适用。哈希分布不能顺序访问，比如你想访问1~100，哈希分布只能遍历全部数据，同时哈希分布因为做了<strong>hash</strong>后导致与业务数据无关了。</p><table><thead><tr><th align="center">分区方式</th><th align="center">描述</th><th align="center">代表产品</th></tr></thead><tbody><tr><td align="center">哈希分区</td><td align="center">离散度好<br/>数据分布业务无关<br/>无法顺序访问</td><td align="center">RedisCluster<br/>Cassanda<br/>Dynamo</td></tr><tr><td align="center">顺序分区</td><td align="center">离散度易倾斜<br/>数据分布业务相关<br/>可顺序访问</td><td align="center">Bigtable<br/>Hbase<br/>Hypertable</td></tr></tbody></table><p>数据倾斜与数据迁移跟节点伸缩：</p><p>顺序分布是会导致数据倾斜的，主要是访问的倾斜。每次点击会重点访问某台机器，这就导致最后数据都到这台机器上了，这就是顺序分布最大的缺点。但哈希分布的时候，假如要扩容机器的时候，称之为“节点伸缩”，这个时候，因为是哈希算法，会导致数据迁移。</p><p>哈希分区方式：</p><ul><li><p>节点取余分区：</p><ul><li>使用特点的数据（包括redis的键或用户ID），再根据节点数量N，使用公式：hash(key)%N计算出一个0～（N-1）值，来决定数据映射到哪一个节点上。即哈希值对节点总数取余。</li><li>缺点：当节点数量N变化时（扩容或者收缩），数据和节点之间的映射关系需要重新计算，这样的话，按照新的规则映射，要么之前存储的数据找不到，要么之前数据被重新映射到新的节点（导致以前存储的数据发生数据迁移）。</li><li>实践：常用于数据库的分库分表规则，一般采用预分区的方式，提前根据数量规划好分区数，比如划分为512或1024张表，保证可支撑未来一段时间的数据量，再根据负载情况将表迁移到其它数据库中。</li></ul></li><li><p>一致性哈希：</p><ul><li><p>一致性哈希分区（Distributed Hash Table）实现思路是为系统中每个节点分配一个token，范围一般在0～232，这些token构成一个哈希环。数据读写执行节点查找操作时，先根据key计算hash值，然后顺时针找到第一个大于等于该哈希值的token节点。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzI4LzlhMmY4MzYyODVkZGQucG5n?x-oss-process=image/format,png" alt="一致性哈希"></p><p>上图就是一个一致性hash的原理解析。</p><p>假设有n1～n4这四台机器，我们对每一台机器分配一个唯一token，每次有数据（黄色代表数据），一致性哈希算法规则每次都顺时针漂移数据，也就是图中黄色的数据都指向n3。</p><p>这个时候我们需要增加一个节点n5，在n2和n3之间，数据还是会发生漂移（会偏移到大于等于的节点），但是这个时候你是否注意到，其实只有n2～n3这部分的数据被漂移，其它的数据都是不会变的，这种方式相比节点取余最大的好处在于加入和删除节点只影响哈希环中相邻的节点，对其它节点无影响。</p></li><li><p>缺点：每个节点的负载不相同，因为每个节点的hash是根据key计算出来的，换句话说就是假设key足够多，被hash算法打散得非常均匀，但是节点过少，导致每个节点处理的key个数不太一样，甚至相差很大，这就导致某些节点压力很大</p></li><li><p>实践：加减节点会造成哈希环中部分数据无法命中，需要手动处理或者忽略这部分数据，因此一致性哈希常用于缓存场景。</p></li></ul></li></ul><p>虚拟槽分区：</p><p>虚拟槽分区巧妙地使用了哈希空间，使用分散度良好的哈希函数把所有数据映射到一个固定范围的整数集合中，整数定义为槽（slot）。这个范围一般远远大于节点数，比如Redis Cluster槽范围是0～16383（也就是说有16383个槽）。槽是集群内数据管理和迁移的基本单位。采用大范围槽的主要目的是为了方便数据拆分和集群扩展。每个节点会负责一定数量的槽。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzI4LzFjNzg0NWFjMDI4OGUucG5n?x-oss-process=image/format,png" alt="虚拟槽分区"></p><p>如上图所示，当前集群有5个节点，每个节点平均大约负责3276个槽。由于采用高质量的哈希算法，每个槽所映射的数据通常比较均匀，将数据平均划分到5个节点进行数据分区。Redis Cluster就是采用虚拟槽分区，每当key访问过来，Redis Cluster会计算哈希值是否在这个区间里。它们彼此都知道对应的槽在哪台机器上，这样就能做到平均分配了。</p><p>集群限制：批量key操作。</p><h2 id="Docker-compose搭建Redis-Cluster"><a href="#Docker-compose搭建Redis-Cluster" class="headerlink" title="Docker-compose搭建Redis Cluster"></a>Docker-compose搭建Redis Cluster</h2><blockquote><p>因为没有多台机器去部署redis实例，所以这里采用docker来搭建，在生产环境中肯定是多台机器去部署的。</p></blockquote><table><thead><tr><th align="center">容器名称</th><th align="center">ip</th><th align="center">端口</th></tr></thead><tbody><tr><td align="center">redis-cluster1</td><td align="center">192.168.3.101</td><td align="center">6380-&gt;6379<br/>16380-&gt;16379</td></tr><tr><td align="center">redis-cluster2</td><td align="center">192.168.3.102</td><td align="center">6381-&gt;6379<br/>16381-&gt;16379</td></tr><tr><td align="center">redis-cluster3</td><td align="center">192.168.3.103</td><td align="center">6382-&gt;6379<br/>16382-&gt;16379</td></tr><tr><td align="center">redis-cluster4</td><td align="center">192.168.3.104</td><td align="center">6383-&gt;6379<br/>16383-&gt;16379</td></tr><tr><td align="center">redis-cluster5</td><td align="center">192.168.3.105</td><td align="center">6384-&gt;6379<br/>16384-&gt;16379</td></tr><tr><td align="center">Redis-cluster6</td><td align="center">192.168.3.106</td><td align="center">6385-&gt;6379<br/>16385-&gt;16379</td></tr></tbody></table><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzMwLzJkZjU0MGQwZGNhYTAucG5n?x-oss-process=image/format,png" alt="redis-cluster文件目录"></p><p>如上图把redis.conf复制进去，自行去下载，然后分别加入以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file <span class="string">&quot;/redis/conf/nodes.conf&quot;</span></span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">protected-mode no</span><br><span class="line">port 6379</span><br><span class="line">daemonize no</span><br></pre></td></tr></table></figure><p><code>docker-compose.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.6&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis-cluster1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-cluster1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6380:6379&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;16380:16379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/Users/gaobinzhan/Documents/Redis/cluster/cluster1:/redis</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/redis/conf/redis.conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">redis-test:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.101</span></span><br><span class="line">  <span class="attr">redis-cluster2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-cluster2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6381:6379&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;16381:16379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/Users/gaobinzhan/Documents/Redis/cluster/cluster2:/redis</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/redis/conf/redis.conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">redis-test:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.102</span></span><br><span class="line">  <span class="attr">redis-cluster3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-cluster3</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6382:6379&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;16382:16379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/Users/gaobinzhan/Documents/Redis/cluster/cluster3:/redis</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/redis/conf/redis.conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">redis-test:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.103</span></span><br><span class="line">  <span class="attr">redis-cluster4:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-cluster4</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6383:6379&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;16383:16379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/Users/gaobinzhan/Documents/Redis/cluster/cluster4:/redis</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/redis/conf/redis.conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">redis-test:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.104</span></span><br><span class="line">  <span class="attr">redis-cluster5:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-cluster5</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6384:6379&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;16384:16379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/Users/gaobinzhan/Documents/Redis/cluster/cluster5:/redis</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/redis/conf/redis.conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">redis-test:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.105</span></span><br><span class="line">  <span class="attr">redis-cluster6:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-cluster6</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6385:6379&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;16385:16379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/Users/gaobinzhan/Documents/Redis/cluster/cluster6:/redis</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/redis/conf/redis.conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">redis-test:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.106</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">redis-test:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="string">&quot;192.168.3.0/24&quot;</span></span><br></pre></td></tr></table></figure><p>然后进行<code>docker-compose up</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzMwLzIyZWMwY2ZiNzkxYTAucG5n?x-oss-process=image/format,png" alt="redis-cluster"></p><p>此刻每个目录下面多了<strong>nodes.conf</strong> 现在文件内容只是单单保存了<strong>redis</strong>实例自身的节点数据。</p><p>也可以随便连接一台<strong>redis</strong>，查看集群状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gaobinzhan-MBP:~ gaobinzhan$ redis-cli -p 6380</span><br><span class="line">127.0.0.1:6380&gt; info Cluster</span><br><span class="line"><span class="comment"># Cluster</span></span><br><span class="line">cluster_enabled:1</span><br></pre></td></tr></table></figure><p>此刻集群只是开启状态，往里面写入数据会报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; <span class="built_in">set</span> 1 2</span><br><span class="line">(error) CLUSTERDOWN Hash slot not served</span><br></pre></td></tr></table></figure><p>是因为没有分配槽。</p><p>在<strong>redis</strong>之前的版本，需要手动分配槽，非常不方便。现在的版本只需要简单执行下命令就可以了。</p><p>随便进入一个容器当中 <code>docker exec -it redis-cluster1 sh</code> </p><p>然后执行<code>redis-cli --cluster create 192.168.3.101:6379 192.168.3.102:6379 192.168.3.103:6379 192.168.3.104:6379 192.168.3.105:6379 192.168.3.106:6379 --cluster-replicas 1</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">gaobinzhan-MBP:~ gaobinzhan$ docker <span class="built_in">exec</span> -it redis-cluster1 sh</span><br><span class="line"><span class="comment"># redis-cli --cluster create 192.168.3.101:6379 192.168.3.102:6379 192.168.3.103:6379 192.168.3.104:6379 192.168.3.105:6379 192.168.3.106:6379 --cluster-replicas 1</span></span><br><span class="line">&gt;&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 192.168.3.105:6379 to 192.168.3.101:6379</span><br><span class="line">Adding replica 192.168.3.106:6379 to 192.168.3.102:6379</span><br><span class="line">Adding replica 192.168.3.104:6379 to 192.168.3.103:6379</span><br><span class="line">M: 2a373fe66cde81d1530584bb86e49694b000d0c2 192.168.3.101:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: 8de35d3b2439d05de839a2539f68e4833b90679d 192.168.3.102:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: caca339b5511d3a14e381d5ffd9434458c7368bd 192.168.3.103:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 97eccf5edf7fb12d4a2e01b16dbf2d9c561896b3 192.168.3.104:6379</span><br><span class="line">   replicates caca339b5511d3a14e381d5ffd9434458c7368bd</span><br><span class="line">S: 64512db80b1a159ca823a25a7e9893154efd555c 192.168.3.105:6379</span><br><span class="line">   replicates 2a373fe66cde81d1530584bb86e49694b000d0c2</span><br><span class="line">S: 1722206f30f3b7c65706d30f4a1ee3b6e0cbca7c 192.168.3.106:6379</span><br><span class="line">   replicates 8de35d3b2439d05de839a2539f68e4833b90679d</span><br><span class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">&#x27;yes&#x27;</span> to accept): </span><br></pre></td></tr></table></figure><p>此刻会提示你，是否接受此配置，输入<strong>yes</strong>即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">&#x27;yes&#x27;</span> to accept): yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting <span class="keyword">for</span> the cluster to join</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.3.101:6379)</span><br><span class="line">M: 2a373fe66cde81d1530584bb86e49694b000d0c2 192.168.3.101:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 64512db80b1a159ca823a25a7e9893154efd555c 192.168.3.105:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 2a373fe66cde81d1530584bb86e49694b000d0c2</span><br><span class="line">S: 1722206f30f3b7c65706d30f4a1ee3b6e0cbca7c 192.168.3.106:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 8de35d3b2439d05de839a2539f68e4833b90679d</span><br><span class="line">M: 8de35d3b2439d05de839a2539f68e4833b90679d 192.168.3.102:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 97eccf5edf7fb12d4a2e01b16dbf2d9c561896b3 192.168.3.104:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates caca339b5511d3a14e381d5ffd9434458c7368bd</span><br><span class="line">M: caca339b5511d3a14e381d5ffd9434458c7368bd 192.168.3.103:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure><p>此时<strong>redis-cluster</strong>已经搭建好了，<strong>nodes.conf</strong>文件也发生了变化，执行<strong>cluster info</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_ping_sent:234</span><br><span class="line">cluster_stats_messages_pong_sent:242</span><br><span class="line">cluster_stats_messages_sent:476</span><br><span class="line">cluster_stats_messages_ping_received:237</span><br><span class="line">cluster_stats_messages_pong_received:234</span><br><span class="line">cluster_stats_messages_meet_received:5</span><br><span class="line">cluster_stats_messages_received:476</span><br></pre></td></tr></table></figure><p>状态是<strong>ok</strong>的，来试着写写数据。进入<strong>redis</strong>实例<code>docker exec -it redis-cluster1 sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gaobinzhan-MBP:~ gaobinzhan$ docker <span class="built_in">exec</span> -it redis-cluster1 sh</span><br><span class="line"><span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 1 2</span><br><span class="line">(error) MOVED 9842 192.168.3.102:6379</span><br></pre></td></tr></table></figure><p>报错了，因为槽的问题，这个数据需要写入到102那台实例当中，这时可以用集群方式启动<code>redis-cli -c</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis-cli -c</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 1 2</span><br><span class="line">-&gt; Redirected to slot [9842] located at 192.168.3.102:6379</span><br><span class="line">OK</span><br><span class="line">192.168.3.102:6379&gt; get 1</span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br></pre></td></tr></table></figure><p>会发现提示数据移动到102节点了，因为是集群方式所以可以获取的，切换到102节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis-cli -c -h 192.168.3.102</span></span><br><span class="line">192.168.3.102:6379&gt; get 1</span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br></pre></td></tr></table></figure><p>也可以正常的获取。</p><h2 id="往期方式搭建集群"><a href="#往期方式搭建集群" class="headerlink" title="往期方式搭建集群"></a>往期方式搭建集群</h2><ul><li>准备节点</li><li>节点握手</li><li>分配槽</li></ul><h3 id="准备节点"><a href="#准备节点" class="headerlink" title="准备节点"></a>准备节点</h3><p><strong>Redis</strong>集群一般由多个节点组成，节点数量至少为6个才能保证组成完整高可用的集群，前面的主从复制跟哨兵共同构成了高可用。每个节点需要开启配置 <code>cluster-enabled yes</code> ，让<strong>Redis</strong> 运行在集群模式下。</p><ul><li>性能：这是Redis赖以生存的看家本领，增加集群功能后当然不能对性能产生太大影响，所以<strong>Redis</strong>采取了<strong>P2P</strong>而非<strong>Proxy</strong>方式、异步复制、客户端重定向等设计，而牺牲了部分的一致性、使用性。</li><li>水平扩展：集群的最重要能力当然是扩展，文档中称可以线性扩展到1000结点。 可用性：在<strong>Cluster</strong>推出之前，可用性要靠Sentinel保证。有了集群之后也自动具有了<strong>Sentinel</strong>的监控和自动<strong>Failover</strong>能力</li></ul><p>集群的相关配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#节点端口</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="comment">#开启集群模式</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line"><span class="comment">#节点超时时间，单位毫秒</span></span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line"><span class="comment">#集群内部配置文件</span></span><br><span class="line">cluster-config-file <span class="string">&quot;nodes-6379.conf&quot;</span></span><br></pre></td></tr></table></figure><p>其他配置和单机模式一致即可，配置文件命名规则<code>redis-&#123;port&#125;.conf</code> ，准备好配置后启动所有节点，第一次启动时如果没有集群配置文件，它会自动创建一份，文件名称采用 cluster-config-file 参数项控制，建议采用<code>node-&#123;port&#125;.conf</code>格式定义，也就是说会有两份配置文件。</p><p>当集群内节点信息发生变化，如添加节点、节点下线、故障转移等。节点会自动保存集群状态到配置文件中。需要注意的是， <strong>Redis</strong>自动维护集群配置文件，不要手动修改，防止节点重启时产生集群信息错乱。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzMwL2U4ZjliNDdlYWJkYzUucG5n?x-oss-process=image/format,png" alt="redis-cluster启动"></p><p>然后就跟上面一样准备准备节点就行了。</p><h3 id="节点握手"><a href="#节点握手" class="headerlink" title="节点握手"></a>节点握手</h3><p>节点握手是指一批运行在集群模式下的节点通过<strong>Gossip</strong>协议彼此通信，达到感知对方的过程。节点握手是集群彼此通信的第一步，由客户端发起命令：<code>cluster meet&#123;ip&#125;&#123;port&#125;</code></p><p>通过命令<code>cluster meet 127.0.0.1 6381</code>让节点6380和6381节点进行握手通信。<code>cluster meet</code>命令是一个异步命令，执行之后立刻返回。内部发起与目标节点进行握手通信 。</p><ul><li>节点6380本地创建6381节点信息对象，并发送meet消息。</li><li>节点6381接受到meet消息后，保存6380节点信息并回复pong消息。</li><li>之后节点6380和6381彼此定期通过ping/pong消息进行正常的节点通信。</li></ul><p>通过<code>cluster nodes</code>命令确认6个节点都彼此感知并组成集群。</p><p>注意：</p><ul><li>每个<strong>Redis Cluster</strong>节点会占用两个TCP端口，一个监听客户端的请求，默认是<strong>6379</strong>，另外一个在前一个端口加上10000， 比如<strong>16379</strong>，来监听数据的请求，节点和节点之间会监听第二个端口，用一套二进制协议来通信。节点之间会通过套协议来进行失败检测，配置更新，<code>failover</code>认证等等。为了保证节点之间正常的访问，需要注意防火墙的配置。</li><li>节点建立握手之后集群还不能正常工作，这时集群处于下线状态，所有的数据读写都被禁止。</li><li>设置从节点作为一个完整的集群，需要主从节点，保证当它出现故障时可以自动进行故障转移。集群模式下，Reids 节点角色分为主节点和从节点。</li><li>首次启动的节点和被分配槽的节点都是主节点，从节点负责复制主节点槽信息和相关的数据。</li><li>使用 <code>cluster replicate &#123;nodeId&#125;</code>命令让一个节点成为从节点。其中命令执行必须在对应的从节点上执行，将当前节点设置为<code>node_id</code>指定的节点的从节点。</li></ul><h3 id="分配槽"><a href="#分配槽" class="headerlink" title="分配槽"></a>分配槽</h3><p>Redis 集群把所有的数据映射到16384个槽中。每个key会映射为一个固定的槽，只有当节点分配了槽，才能响应和这些槽关联的键命令。通过cluster addslots命令为节点分配槽利用bash特性批量设置槽（slots），命令如下： </p><p> <code>redis-cli -h 192.168.3.101 cluster addslots &#123;0..5461&#125; </code></p><p><code>redis-cli -h 192.168.3.102 cluster addslots &#123;5462..10922&#125;</code></p><p><code>redis-cli -h 192.168.3.103 cluster addslots &#123;10923..16383&#125;</code></p><p>然后就可以进行操作了。</p><p>集群的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">CLUSTER nodes： 列出集群当前已知的所有节点（node）的相关信息。 </span><br><span class="line"></span><br><span class="line">CLUSTER meet &lt;ip&gt; &lt;port&gt;： 将ip和port所指定的节点添加到集群当中。 </span><br><span class="line"></span><br><span class="line">CLUSTER addslots &lt;slot&gt; [slot ...]： 将一个或多个槽（slot）指派（assign）给当前节点。 </span><br><span class="line"></span><br><span class="line">CLUSTER delslots &lt;slot&gt; [slot ...]： 移除一个或多个槽对当前节点的指派。 </span><br><span class="line"></span><br><span class="line">CLUSTER slots： 列出槽位、节点信息。 </span><br><span class="line"></span><br><span class="line">CLUSTER slaves &lt;node_id&gt;： 列出指定节点下面的从节点信息。 </span><br><span class="line"></span><br><span class="line">CLUSTER replicate &lt;node_id&gt;： 将当前节点设置为指定节点的从节点。 </span><br><span class="line"></span><br><span class="line">CLUSTER saveconfig： 手动执行命令保存保存集群的配置文件，集群默认在配置修改的时候会自动保存配置文件。 </span><br><span class="line"></span><br><span class="line">CLUSTER keyslot &lt;key&gt;： 列出key被放置在哪个槽上。 </span><br><span class="line"></span><br><span class="line">CLUSTER flushslots： 移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点。 </span><br><span class="line"></span><br><span class="line">CLUSTER countkeysinslot &lt;slot&gt;： 返回槽目前包含的键值对数量。 </span><br><span class="line"></span><br><span class="line">CLUSTER getkeysinslot &lt;slot&gt; &lt;count&gt;： 返回count个槽中的键。 </span><br><span class="line"></span><br><span class="line">CLUSTER setslot &lt;slot&gt; node &lt;node_id&gt; 将槽指派给指定的节点，如果槽已经指派给另一个节点，那么先让另一个节点删除该槽，然后再进行指派。</span><br><span class="line"></span><br><span class="line">CLUSTER setslot &lt;slot&gt; migrating &lt;node_id&gt; 将本节点的槽迁移到指定的节点中。 </span><br><span class="line"></span><br><span class="line">CLUSTER setslot &lt;slot&gt; importing &lt;node_id&gt; 从 node_id 指定的节点中导入槽 slot 到本节点。 </span><br><span class="line"></span><br><span class="line">CLUSTER setslot &lt;slot&gt; stable 取消对槽 slot 的导入（import）或者迁移（migrate）。 </span><br><span class="line"></span><br><span class="line">CLUSTER failover： 手动进行故障转移。 </span><br><span class="line"></span><br><span class="line">CLUSTER forget &lt;node_id&gt;： 从集群中移除指定的节点，这样就无法完成握手，过期时为60s，60s后两节点又会继续完成握手。 </span><br><span class="line"></span><br><span class="line">CLUSTER reset [HARD|SOFT]： 重置集群信息，soft是清空其他节点的信息，但不修改自己的id，hard还会修改自己的id，不传该参数则使用soft方式。 </span><br><span class="line"></span><br><span class="line">CLUSTER count-failure-reports &lt;node_id&gt;： 列出某个节点的故障报告的长度。 </span><br><span class="line"></span><br><span class="line">CLUSTER SET-CONFIG-EPOCH： 设置节点epoch，只有在节点加入集群前才能设置。</span><br></pre></td></tr></table></figure><p>注意：在apline系统中不支持{1..10}操作 </p><blockquote><p>以上理论知识内容为网络整理。。。。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​        假设在一台主从机器上配置了20G内存，但是业务需求是需要50G内存的时候，主从结构+哨兵可以实现高可用故障切换+冗余备份，但是不能解决数据容量的问题，用哨兵，每个&lt;strong&gt;redis&lt;/strong&gt;实例存储的数据也都是完整的数据，浪费内存且有木桶效</summary>
      
    
    
    
    <category term="Redis" scheme="https://stitch.cn/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>redis哨兵故障转移及实现</title>
    <link href="https://stitch.cn/2020/06/22/redis%E5%93%A8%E5%85%B5%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB%E5%8F%8A%E5%AE%9E%E7%8E%B0.html"/>
    <id>https://stitch.cn/2020/06/22/redis%E5%93%A8%E5%85%B5%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB%E5%8F%8A%E5%AE%9E%E7%8E%B0.html</id>
    <published>2020-06-22T14:09:55.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在上篇文章中docker-compose搭建redis-sentinel(成功的搭建了1主2从3哨兵。</p></blockquote><h2 id="Sentinel命令"><a href="#Sentinel命令" class="headerlink" title="Sentinel命令"></a>Sentinel命令</h2><p><strong>sentinel</strong>是一个特殊的<strong>redis</strong>节点，它有自己专属的<strong>api</strong>：</p><ul><li><code>sentinel masters</code> 显示被监控的所有<strong>master</strong>以及它们的状态。</li><li><code>sentinel master &lt;master name&gt;</code> 显示指定<strong>master</strong>的信息和状态。</li><li><code>sentinel slaves &lt;master name&gt;</code> 显示指定<strong>master</strong>的所有<strong>slave</strong>及它们的状态。</li><li><code>sentinel sentinels &lt;master name&gt;</code>  显示指定<strong>master</strong>的<strong>sentinel</strong>节点集合（不包含当前节点）。</li><li><code>sentinel get-master-addr-by-name &lt;master name&gt;</code> 返回指定<strong>master</strong>的<strong>ip</strong>和<strong>port</strong>，如果正在进行<strong>failover</strong>或者<strong>failover</strong>已经完成，将会显示被提升为<strong>master</strong>的<strong>slave</strong>的<strong>ip</strong>和<strong>port</strong>。</li><li><code>sentinel failover &lt;master name&gt; </code>强制<strong>sentinel</strong>执行<strong>failover</strong>，并且不需要得到其它<strong>sentinel</strong>的同意。但是<strong>failover</strong>后会将最新的配置发送给其它<strong>sentinel</strong>。</li></ul><p><code>sentinel masters</code></p><p>展示所有被监控的主节点状态及相关信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:26380&gt; sentinel masters</span><br><span class="line">1)  1) <span class="string">&quot;name&quot;</span></span><br><span class="line">    2) <span class="string">&quot;mymaster&quot;</span></span><br><span class="line">    3) <span class="string">&quot;ip&quot;</span></span><br><span class="line">    4) <span class="string">&quot;192.168.3.2&quot;</span></span><br><span class="line">    5) <span class="string">&quot;port&quot;</span></span><br><span class="line">    6) <span class="string">&quot;6379&quot;</span></span><br><span class="line">…………………………………………………………</span><br></pre></td></tr></table></figure><p><code>sentinel master &lt;master name&gt; </code></p><p>展示指定**&lt;master name&gt;**状态以及相关的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:26380&gt; sentinel master mymaster</span><br><span class="line"> 1) <span class="string">&quot;name&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;mymaster&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;ip&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;192.168.3.2&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;port&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;6379&quot;</span></span><br><span class="line"> ………………………………</span><br></pre></td></tr></table></figure><p><code>sentinel slaves &lt;master name&gt;</code></p><p>展示指定 **&lt;master name&gt;**的从节点状态以及相关的统计信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:26380&gt; sentinel slaves mymaster</span><br><span class="line">1)  1) <span class="string">&quot;name&quot;</span></span><br><span class="line">    2) <span class="string">&quot;192.168.3.4:6379&quot;</span></span><br><span class="line">    3) <span class="string">&quot;ip&quot;</span></span><br><span class="line">    4) <span class="string">&quot;192.168.3.4&quot;</span></span><br><span class="line">    5) <span class="string">&quot;port&quot;</span></span><br><span class="line">    6) <span class="string">&quot;6379&quot;</span></span><br><span class="line">…………………………………………</span><br><span class="line">2)  1) <span class="string">&quot;name&quot;</span></span><br><span class="line">    2) <span class="string">&quot;192.168.3.3:6379&quot;</span></span><br><span class="line">    3) <span class="string">&quot;ip&quot;</span></span><br><span class="line">    4) <span class="string">&quot;192.168.3.3&quot;</span></span><br><span class="line">    5) <span class="string">&quot;port&quot;</span></span><br><span class="line">    6) <span class="string">&quot;6379&quot;</span></span><br><span class="line">…………………………………………</span><br></pre></td></tr></table></figure><p><code>sentinel sentinels &lt;master name&gt; </code></p><p>展示指定 <strong>&lt;master name&gt;</strong> 的<strong>sentinel</strong>节点集合（不包含当前<strong>sentinel</strong>节点）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:26380&gt; sentinel sentinels mymaster</span><br><span class="line">1)  1) <span class="string">&quot;name&quot;</span></span><br><span class="line">    2) <span class="string">&quot;570de1d8085ec8bd7974431c01c589847c857edf&quot;</span></span><br><span class="line">    3) <span class="string">&quot;ip&quot;</span></span><br><span class="line">    4) <span class="string">&quot;192.168.3.13&quot;</span></span><br><span class="line">    5) <span class="string">&quot;port&quot;</span></span><br><span class="line">    6) <span class="string">&quot;26379&quot;</span></span><br><span class="line">………………………………………………</span><br></pre></td></tr></table></figure><p><code>sentinel get-master-addr-by-name &lt;master name&gt; </code></p><p>获取主节点信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:26380&gt; sentinel get-master-addr-by-name mymaster</span><br><span class="line">1) <span class="string">&quot;192.168.3.2&quot;</span></span><br><span class="line">2) <span class="string">&quot;6379&quot;</span></span><br></pre></td></tr></table></figure><p><code>sentinel failover &lt;master name&gt;</code></p><p>对**&lt;master name&gt;**进行强制故障转移：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:26380&gt; sentinel failover mymaster</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:26380&gt; info sentinel</span><br><span class="line"><span class="comment"># Sentinel</span></span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">sentinel_simulate_failure_flags:0</span><br><span class="line">master0:name=mymaster,status=ok,address=192.168.3.3:6379,slaves=2,sentinels=3</span><br></pre></td></tr></table></figure><p>修改配置：</p><ul><li>添加新的监听：<code>sentinel monitor test 127.0.0.1 6379 2</code></li><li>放弃对某个<strong>master</strong>监听：<code>sentinel REMOVE test</code></li><li>设置配置选项：<code>sentinel set failover-timeout mymaster 180000</code></li></ul><p><strong>Master</strong>可能会因为某些情况宕机了，如果客户端是固定一个地址去访问，肯定是不合理的，所以客户端请求是请求哨兵，从哨兵获取主机地址的信息，或者是从机的信息。可以实现一个例子：</p><ul><li>随机选择一个哨兵连接，获取主机及从机信息。</li><li>模拟客户端定时访问，实现简单轮询效果，轮询从节点。</li><li>连接失败重试访问</li></ul><h2 id="Sentinel故障转移"><a href="#Sentinel故障转移" class="headerlink" title="Sentinel故障转移"></a>Sentinel故障转移</h2><p>执行<code>docker-composer up</code>之后<code>sentinel.conf</code>发生了变化，每个配置文件变化如下：</p><p><code>sentinel\conf\sentinel.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user default on nopass ~* +@all</span><br><span class="line">sentinel known-replica mymaster 192.168.3.3 6379</span><br><span class="line">sentinel known-replica mymaster 192.168.3.4 6379</span><br><span class="line">sentinel known-sentinel mymaster 192.168.3.12 26379 497f733919cb5d41651b4a2b5648c4adffae0a73</span><br><span class="line">sentinel known-sentinel mymaster 192.168.3.13 26379 0d0ee41bcb5d765e9ff78ed59de66be049a23a82</span><br><span class="line">sentinel current-epoch 0</span><br></pre></td></tr></table></figure><p><code>sentine2\conf\sentinel.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user default on nopass ~* +@all</span><br><span class="line">sentinel known-replica mymaster 192.168.3.3 6379</span><br><span class="line">sentinel known-replica mymaster 192.168.3.4 6379</span><br><span class="line">sentinel known-sentinel mymaster 192.168.3.13 26379 0d0ee41bcb5d765e9ff78ed59de66be049a23a82</span><br><span class="line">sentinel known-sentinel mymaster 192.168.3.11 26379 f5f2a73dc0e60514e4f28c6f40517f48fa409eed</span><br><span class="line">sentinel current-epoch 0</span><br></pre></td></tr></table></figure><p><code>sentine3\conf\sentinel.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user default on nopass ~* +@all</span><br><span class="line">sentinel known-replica mymaster 192.168.3.3 6379</span><br><span class="line">sentinel known-replica mymaster 192.168.3.4 6379</span><br><span class="line">sentinel known-sentinel mymaster 192.168.3.12 26379 497f733919cb5d41651b4a2b5648c4adffae0a73</span><br><span class="line">sentinel known-sentinel mymaster 192.168.3.11 26379 f5f2a73dc0e60514e4f28c6f40517f48fa409eed</span><br><span class="line">sentinel current-epoch 0</span><br></pre></td></tr></table></figure><p>从变化中可以看出每台<strong>Sentinel</strong>分别记录了<strong>slave</strong>的节点信息和其它<strong>Sentinel</strong>节点信息。</p><p>在宿主机中随便进入一台<strong>Sentinel</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:26380&gt; sentinel masters</span><br><span class="line">1)  1) <span class="string">&quot;name&quot;</span></span><br><span class="line">    2) <span class="string">&quot;mymaster&quot;</span></span><br><span class="line">    3) <span class="string">&quot;ip&quot;</span></span><br><span class="line">    4) <span class="string">&quot;192.168.3.2&quot;</span></span><br><span class="line">    5) <span class="string">&quot;port&quot;</span></span><br><span class="line">    6) <span class="string">&quot;6379&quot;</span></span><br></pre></td></tr></table></figure><p>可以观察到监听的所有<strong>master</strong>，将<strong>192.168.3.2</strong>这台<strong>master</strong>进行宕机</p><p><code>docker stop redis-master</code></p><p>宕机完之后等待<strong>Sentinel</strong>检测周期过了之后再对<code>sentinel.conf</code>和<code>redis.conf</code>进行观察。</p><p>3台<strong>Sentinel</strong>的<code>sentinel monitor mymaster 192.168.3.2 6379 2</code>变成了<code>sentinel monitor mymaster 192.168.3.4 6379 2</code></p><p>其次master对应的slave节点信息也进行更改。</p><p>而<strong>192.168.3.3</strong>的<code>redis.conf</code>中<code>replicaof 192.168.3.2 6379</code>也变成了<code>replicaof 192.168.3.4 6379</code>。</p><p><strong>192.168.3.2</strong>的<code>redis.conf</code>中<code>replicaof 192.168.3.2 6379</code>这行配置被删除掉了。</p><p>再次启动<strong>192.168.3.2</strong>的<strong>redis</strong>节点，而这台节点的<code>redis.conf</code>中增加了一行<code>replicaof 192.168.3.4 6379</code>。</p><p>其实就是将我们的操作自动化了。</p><h2 id="Sentinel实现原理"><a href="#Sentinel实现原理" class="headerlink" title="Sentinel实现原理"></a>Sentinel实现原理</h2><p><strong>Sentinel</strong>的实现原理，主要分为三个步骤：</p><ul><li>检测问题：三个定时任务，这三个内部的执行任务可以保证出现问题马上让<strong>Sentinel</strong>知道。</li><li>发现问题：主观下线和客观下线，当有一台<strong>Sentinel</strong>机器发现问题时，它就会对它主观下线。但是当多个<strong>Sentinel</strong>都发现问题的时候，才会出现客观下线。</li><li>找到解决问题的<strong>Sentinel</strong>：进行领导者选举，如何在<strong>Sentinel</strong>内部多台节点做领导者选择。</li><li>解决问题：就是要进行故障转移。</li></ul><h3 id="三个定时任务"><a href="#三个定时任务" class="headerlink" title="三个定时任务"></a>三个定时任务</h3><ul><li><p>每10s每个<strong>Sentinel</strong>对<strong>Master</strong>和<strong>Slave</strong>执行一次<code>Info Replication</code>。</p><p><strong>Redis Sentinel</strong>可以对<strong>Redis</strong>节点做失败判断和故障转移，来<code>Info Replication</code>发现<strong>Slave</strong>节点，来确定主从关系。</p></li><li><p>每2s每个<strong>Sentinel</strong>通过<strong>Master</strong>节点的<strong>channel</strong>交换信息（pub/sub）。</p><p>类似于发布订阅，<strong>Sentinel</strong>会对主从关系进行判断，通过<code>__sentinel__:hello</code>频道交互。了解主从关系可以帮助更好的自动化操作<strong>Redis</strong>。然后<strong>Sentinel</strong>会告知系统消息给其它<strong>Sentinel</strong>节点，最终达到共识，同时<strong>Sentinel</strong>节点能够互相感知到对方。</p></li><li><p>每1s每个<strong>Sentinel</strong>对其它<strong>Sentinel</strong>和<strong>Redis</strong>执行<code>ping</code>。</p><p>对每个节点和其它<strong>Sentinel</strong>进行心跳检测，它是失败判断的依据。</p></li></ul><h3 id="主观下线和客观下线"><a href="#主观下线和客观下线" class="headerlink" title="主观下线和客观下线"></a>主观下线和客观下线</h3><p>回顾上一篇文章中<strong>Sentinel</strong>的配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor mymaster 192.168.3.2 6379 2</span><br><span class="line">sentinel down-after-millseconds mymaster 30000</span><br></pre></td></tr></table></figure><p>主观下线：每个<strong>Sentinel</strong>节点对<strong>Redis</strong>失败的“偏见”。之所以是偏见，只是因为某一台机器30s内没有得到回复。</p><p>客观下线：这个时候需要所以<strong>Sentinel</strong>节点都发现它30s内无回复，才会达到共识。</p><h3 id="领导者选举方式"><a href="#领导者选举方式" class="headerlink" title="领导者选举方式"></a>领导者选举方式</h3><ul><li>每个做主观下线的Sentinel节点，会像其它的<strong>Sentinel</strong>节点发送命令，要求将它设置成为领导者。</li><li>收到命令的<strong>Sentinel</strong>节点，如果没有同意通过其它节点发送的命令，那么就会同意请求，否则就会拒绝。</li><li>如果<strong>Sentinel</strong>节点发现自己的票数超过半数，同时也超过了<code>sentinel monitor mymaster 192.168.3.2 6379 2</code>超过2个的时候，就会成为领导者。</li><li>进行故障转移操作。</li></ul><h3 id="如何选择“合适”的Slave节点"><a href="#如何选择“合适”的Slave节点" class="headerlink" title="如何选择“合适”的Slave节点"></a>如何选择“合适”的Slave节点</h3><p>​        <strong>Redis</strong>内部其实是有一个优先级配置的，在配置文件中<code>replica-priority</code>，这个参数是<strong>slave</strong>节点的优先级配置，如果存在则返回，如果不存在则继续。当上面这个优先级不满足的时候，<strong>Redis</strong>还会选择复制偏移量最大的<strong>Slave</strong>节点，如果存在则返回，如果不存在则继续。之所以选择偏移量最大，这是因为偏移量越小，和<strong>Master</strong>的数据越不接近，现在<strong>Master</strong>挂掉了，说明这个偏移量小的机器数据可能存在问题，这就是为什么选择偏移量最大的<strong>Slave</strong>的原因。如果发现偏移量都一样，这个时候 <strong>Redis</strong> 会默认选择 <strong>runid</strong> 最小的节点。</p><p>生产环境部署技巧：</p><ul><li><p><strong>Sentinel</strong>节点不应该部署在一台物理机器上。</p><p>这里特意强调物理机是因为一台物理机做成了若干虚拟机或者现今比较流行的容器，它们虽然有不同的<strong>IP</strong>地址，但实际上它们都是同一台物理机，同一台物理机意味着如果这台机器有什么硬件故障，所有的虚拟机都会受到影响，为了实现<strong>Sentinel</strong>节点集合真正的高可用，请勿将<strong>Sentinel</strong>节点部署在同一台物理机器上。</p></li><li><p>部署至少三个且奇数个的<strong>Sentinel</strong>节点。通过增加<strong>Sentinel</strong>节点的个数提高对于故障判定的准确性，因为领导者选举需要至少一半加1个节点。</p></li></ul><h2 id="Sentinel常见问题"><a href="#Sentinel常见问题" class="headerlink" title="Sentinel常见问题"></a>Sentinel常见问题</h2><p>哨兵集群在发现<strong>master node</strong>挂掉后会进行故障转移，也就是启动其中一个<strong>slave node</strong>为<strong>master node</strong>。在这过程中，可能会导致数据丢失的情况。</p><ul><li><p>异步复制导致数据丢失</p><p>因为<strong>master-&gt;slave</strong>的复制是异步，所以有可能部分还没来得及复制到<strong>slave</strong>就宕机了，此时这些部分数据就丢失了。</p></li><li><p>集群脑裂导致数据丢失</p><p>脑裂，也就是说。某个<strong>master</strong>所在机器突然脱离了正常的网络，跟其它<strong>slave</strong>机器不能连接，但是实际上<strong>master</strong>还运行着。</p></li></ul><p>造成的问题：</p><p>​        此时哨兵可能就会认为<strong>master</strong>宕机了，然后开始选举，将其它<strong>slave</strong>切换成<strong>master</strong>。这时候集群里就会有2个<strong>master</strong>，也就是所谓的脑裂。此时虽然某个<strong>slave</strong>被切换成<strong>master</strong>，但是可能<strong>client</strong>还没来得及切换成新的<strong>master</strong>，还继续写向旧的<strong>master</strong>的数据可能就丢失了。因此旧<strong>master</strong>再次被恢复的时候，会被作为一个<strong>slave</strong>挂到新的<strong>master</strong>上去，自己的数据会被清空，重新从新的<strong>master</strong>复制数据。</p><p>怎么解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min-slaves-to-write 1</span><br><span class="line">min-slaves-max-lag 10</span><br></pre></td></tr></table></figure><p>要求至少有一个<strong>slave</strong>，数据复制和同步的延迟不能超过10s。</p><p>如果说一旦所有的<strong>slave</strong>，数据复制和同步的延迟都超过了10s，这个时候，<strong>master</strong>就不会再接收任何请求了。</p><p>上面两个配置可以减少异步复制和脑裂导致的数据丢失。</p><p>异步复制导致的数据丢失：</p><p>​        在异步复制的过程当中，通过<code>min-slaves-max-lag</code>这个配置，就可以确保的说，一旦<strong>slave</strong>复制数据和<strong>ack</strong>延迟时间太长，就认为可能<strong>master</strong>宕机后损失的数据太多了，那么就拒绝写请求，这样就可以把<strong>master</strong>宕机时由于部分数据未同步到<strong>slave</strong>导致的数据丢失降低到可控范围内。</p><p>集群脑裂导致的数据丢失：</p><p>​        集群脑裂因为<strong>client</strong>还没来得及切换成新的<strong>master</strong>，还继续写向旧的master的数据可能就丢失了通过<code>min-slaves-to-write</code>确保必须是有多少个从节点连接，并且延迟时间小于<code>min-slaves-max-lag</code>多少秒。</p><p>客户端需要怎么做：</p><p>​        对于<strong>client</strong>来讲，就需要做些处理，比如先将数据缓存到内存当中，然后过一段时间处理，或者连接失败，接收到错误切换新的<strong>master</strong>处理。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在上篇文章中docker-compose搭建redis-sentinel(成功的搭建了1主2从3哨兵。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Sentinel命令&quot;&gt;&lt;a href=&quot;#Sentinel命令&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="Redis" scheme="https://stitch.cn/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>docker-compose搭建redis-sentinel</title>
    <link href="https://stitch.cn/2020/06/20/docker-compose%E6%90%AD%E5%BB%BAredis-sentinel.html"/>
    <id>https://stitch.cn/2020/06/20/docker-compose%E6%90%AD%E5%BB%BAredis-sentinel.html</id>
    <published>2020-06-20T01:10:48.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主从复制的问题"><a href="#主从复制的问题" class="headerlink" title="主从复制的问题"></a>主从复制的问题</h2><p>​    对于上篇文章redis持久化rdb及aof中，<strong>redis</strong>服务器重启时的数据恢复，在新版本中是不符合我画的那个流程图的。</p><p>​    <strong>redis</strong>启动的时候会去判断是否开启<strong>aof</strong>，如果开启了，不存在<strong>aof</strong>文件的话，会去判断是否存在<strong>rdb</strong>，但在新的版本中，如果开启<strong>aof</strong>，不存在<strong>aof</strong>文件的时候，<strong>redis</strong>会主动创建<strong>aof</strong>文件并且加载<strong>aof</strong>，这就会导致数据丢失。解决方案如下：</p><ul><li>关闭<strong>aof</strong></li><li>启动<strong>redis</strong>去加载<strong>rdb</strong>文件</li><li>动态开启<strong>aof</strong>最终达到数据一致性</li></ul><p>​    当主机<strong>master</strong>宕机以后，需要人工解决切换，比如使用<code>slaveof no one</code>。实际上主从复制并没有实现高可用。</p><p>高可用侧重备份机器，利用集群中系统的冗余，当系统中某台机器发生损坏的时候，其它后备的机器可以迅速的接替它来启动服务。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzE5LzVmYWU1MTNhY2RiYWEucG5n?x-oss-process=image/format,png" alt="redis主从复制问题"></p><p>如何解决：</p><p>如果我们有一个监控程序能够监控各个机器的状态并及时调整，手动操作变为自动操作，<strong>Sentinel</strong>的出现就是为了解决这个问题。</p><h2 id="哨兵机制的原理"><a href="#哨兵机制的原理" class="headerlink" title="哨兵机制的原理"></a>哨兵机制的原理</h2><p>​    <strong>Reids Sentinel</strong>一个分布式架构，其中包含若干个<strong>Sentinel</strong>节点和<strong>Redis</strong>数据节点，每个<strong>Sentinel</strong>节点会对数据节点和其余<strong>Sentinel</strong>节点进行监控，当它发现节点不可达的时候，会对节点做下线标识。</p><p>​    如果被标识的是主节点，它还会和其它<strong>Sentinel</strong>节点进行协商，当大多数<strong>Sentinel</strong>节点都认为主节点不可达时，它们会选举出一个<strong>Sentinel</strong>节点来完成自动故障转移的工作，同时会将这个变化实时通知给<strong>Redis</strong>应用方。整个过程完全是自动的，不需要人工来介入，所以这套方案很有效地解决了<strong>Redis</strong>高可用的问题。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzE5L2NmMGY0MDY4ZDQyNzcucG5n?x-oss-process=image/format,png" alt="redis哨兵"></p><p>基本的故障转移流程：</p><ul><li>主节点出现故障，此时两个从节点与主节点失去连接，主从复制失败。</li><li>每个<strong>Sentinel</strong>节点通过定期监控发现主节点出现了故障</li><li>多个<strong>Sentinel</strong>节点对主节点的故障达成一致会选举出其中一个节点作为领导者负责故障转移。</li><li><strong>Sentinel</strong>领导者节点执行了故障转移，整个过程基本是跟我们手动调整一致的，只不过是自动化完成的。</li><li>故障转移后整个<strong>Redis Sentinel</strong>的结构，重新选举了新的主节点。</li></ul><p>Redis Sentinel具有的功能：</p><ul><li><strong>监控</strong>：<strong>Sentinel</strong>节点会定期检查Redis数据节点、其余Sentinel节点是否可达。</li><li><strong>通知</strong>：<strong>Sentinel</strong>节点会将故障转移的结果通知给应用方。</li><li><strong>主节点故障转移</strong>：实现从节点晋升为主节点并维护后续正确的主从关系。</li><li><strong>配置提供者</strong>：在<strong>Redis Sentinel</strong>结构中，客户端在初始化的时候连接的是<strong>Sentinel</strong>节点集合，从中获取主节点信息。</li></ul><p>同时<strong>Redis Sentinel</strong>包含了若干个<strong>Sentinel</strong>节点，这样做也带了两个好处：</p><ul><li>对于节点的故障判断是由多个<strong>Sentinel</strong>节点共同完成，这样可以有效地防止误判。</li><li><strong>Sentinel</strong>节点集合是由若干个<strong>Sentinel</strong>节点组成的，这样即使个别<strong>Sentinel</strong>节点不可用，整个<strong>Sentinel</strong>节点集合依然是健壮的。</li></ul><p>但是<strong>Sentinel</strong>节点本身就是独立的<strong>Reids</strong>节点，只不过它们有一些特殊，不存储数据，只支持部分命令。</p><h2 id="docker-compose-实现-redis-sentinel"><a href="#docker-compose-实现-redis-sentinel" class="headerlink" title="docker-compose 实现 redis-sentinel"></a>docker-compose 实现 redis-sentinel</h2><table><thead><tr><th align="center">容器名称</th><th align="center">容器IP</th><th align="center">映射端口号</th><th align="center">服务运行模式</th></tr></thead><tbody><tr><td align="center">Redis-master</td><td align="center">192.168.3.2</td><td align="center">6380-&gt;6379</td><td align="center">Master</td></tr><tr><td align="center">Redis-slave1</td><td align="center">192.168.3.3</td><td align="center">6381-&gt;6379</td><td align="center">Slave</td></tr><tr><td align="center">Redis-slave2</td><td align="center">192.168.3.4</td><td align="center">6382-&gt;6379</td><td align="center">Slave</td></tr><tr><td align="center">Redis-sentinel1</td><td align="center">192.168.3.11</td><td align="center">26380-&gt;26379</td><td align="center">Sentinel</td></tr><tr><td align="center">Redis-sentinel2</td><td align="center">192.168.3.12</td><td align="center">26381-&gt;26379</td><td align="center">Sentinel</td></tr><tr><td align="center">Redis-sentinel3</td><td align="center">192.168.3.13</td><td align="center">26382-&gt;26379</td><td align="center">Sentinel</td></tr></tbody></table><p>在这里我用的镜像是redis官方的6.0.5。去网上把配置文件下载下来(<code>redis.conf</code>、<code>sentinel.conf</code>)</p><p>然后开始进行：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzIwLzQ0OTU5ZjMzOTY0OWUucG5n?x-oss-process=image/format,png" alt="redis文件目录"></p><p>创建目录，并且把配置文件拷贝进去。</p><p><strong>sentinel</strong>目录下的所有配置文件进行简单的修改：</p><p>搜索<code>sentinel monitor</code> 改为 <code>sentinel monitor mymaster 192.168.3.2 6379 2</code></p><p><strong>server</strong>目录下进行修改：</p><p><code>bind 127.0.0.1</code>改为<code>bind 0.0.0.0</code></p><p><code>replicaof &lt;masterip&gt; &lt;masterport&gt;</code>改为<code>replicaof 192.168.3.2 6379</code>(除master目录)</p><p>创建<code>docker-compose.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.6&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis-master:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;redis-master&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6380:6379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/Users/gaobinzhan/Documents/Redis/server/master:/redis</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/redis/conf/redis.conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">redis-test:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.2</span></span><br><span class="line">  <span class="attr">redis-slave1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;redis-slave1&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6381:6379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/Users/gaobinzhan/Documents/Redis/server/slave1:/redis</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/redis/conf/redis.conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">redis-test:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.3</span></span><br><span class="line">  <span class="attr">redis-slave2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;redis-slave2&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6382:6379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/Users/gaobinzhan/Documents/Redis/server/slave2:/redis</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/redis/conf/redis.conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">redis-test:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.4</span></span><br><span class="line">  <span class="attr">redis-sentinel1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;redis-sentinel1&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;26380:26379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/Users/gaobinzhan/Documents/Redis/sentinel/sentinel1:/redis</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-sentinel</span> <span class="string">/redis/conf/sentinel.conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">redis-test:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.11</span></span><br><span class="line">  <span class="attr">redis-sentinel2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;redis-sentinel2&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;26381:26379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/Users/gaobinzhan/Documents/Redis/sentinel/sentinel2:/redis</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-sentinel</span> <span class="string">/redis/conf/sentinel.conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">redis-test:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.12</span></span><br><span class="line">  <span class="attr">redis-sentinel3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;redis-sentinel3&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;26382:26379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/Users/gaobinzhan/Documents/Redis/sentinel/sentinel3:/redis</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-sentinel</span> <span class="string">/redis/conf/sentinel.conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">redis-test:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.13</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">redis-test:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="string">&quot;192.168.3.0/24&quot;</span></span><br></pre></td></tr></table></figure><p>进行<code>docker-compose up</code>，执行完毕后：</p><p>redis-cli工具运行<code>redis-cli -p 26380</code>输入<code>info</code>：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzIwLzZmMWIyYzM2ZDNlMzkucG5n?x-oss-process=image/format,png" alt="image-20200620005154269"></p><p>出现以上信息即搭建成功。。</p><p><strong>Sentinel</strong>的核心配置：</p><p><code>sentinel monitor mymaster 192.168.3.2 6379 2</code></p><p>监控的主节点的名字、IP 和端口，最后一个2的意思是有几台 <strong>Sentinel</strong>发现有问题，就会发生故障转移，例如 配置为2，代表至少有2个 <strong>Sentinel</strong> 节点认为主节点不可达，那么这个不可达的判定才是客观的。对于设置的越小，那么达到下线的条件越宽松，反之越严格。一般建议将其设置为 <strong>Sentinel</strong> 节点的一半加1。最后的参数不可大于<strong>Sentinel</strong>节点数。</p><p><code>sentinel down-after-millseconds mymaster 30000</code></p><p>这个是超时的时间（单位为毫米）。打个比方，当你去<strong>ping</strong>一个机器的时候，多长时间后仍<strong>ping</strong>不通，那么就认为它是有问题。</p><p><code>sentinel parallel-syncs my master 1</code></p><p>当<strong>Sentinel</strong>节点集合对主节点故障判断达成一致时，<strong>Sentinel</strong>领导者节点会被做故障转移操作，选出新的主节点，原来的从节点会向新的主节点发起复制操作，<code>paraller-syncs</code>就是用来限制在一次故障转移之后，每次向新的主节点发起复制操作的从节点个数，指出<strong>Sentinel</strong>属于并发还是串行。1代表每次只能复制一个，可以减轻<strong>Master</strong>的压力。</p><p><code>sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</code></p><p>如果 <strong>Sentinel</strong> 监控的主节点配置了密码，<code>sentinel auth-pass</code> 配置通过添加主节点的密码，防止 <strong>Sentinel</strong> 节点对主节点无法监控。</p><p><code>sentinel failover-timeout mymaster 180000</code></p><p>表示故障转移的时间。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;主从复制的问题&quot;&gt;&lt;a href=&quot;#主从复制的问题&quot; class=&quot;headerlink&quot; title=&quot;主从复制的问题&quot;&gt;&lt;/a&gt;主从复制的问题&lt;/h2&gt;&lt;p&gt;​    对于上篇文章redis持久化rdb及aof中，&lt;strong&gt;redis&lt;/strong&gt;</summary>
      
    
    
    
    <category term="Redis" scheme="https://stitch.cn/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>php反射实现Ioc-Di及注解</title>
    <link href="https://stitch.cn/2020/06/08/php%E5%8F%8D%E5%B0%84%E5%AE%9E%E7%8E%B0Ioc-Di%E5%8F%8A%E6%B3%A8%E8%A7%A3.html"/>
    <id>https://stitch.cn/2020/06/08/php%E5%8F%8D%E5%B0%84%E5%AE%9E%E7%8E%B0Ioc-Di%E5%8F%8A%E6%B3%A8%E8%A7%A3.html</id>
    <published>2020-06-08T23:47:49.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<p>PHP5之后提供了完整的反射API，添加了对类、接口、函数、方法和扩展进行反向工程的能力。此外，反射API提供了方法来取出函数、类和方法的文档注释。</p><p><strong>Ioc/Di</strong>大家应该都不陌生，但是对小白来说呢听起来就挺高大上的，下面就用代码来实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaobinzhan &lt;gaobinzhan<span class="doctag">@gmail</span>.com&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getClassName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;this is Foo&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getClassName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;this is Bar&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Foo <span class="variable">$foo</span>, Bar <span class="variable">$bar</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump(<span class="variable">$foo</span>-&gt;getClassName());</span><br><span class="line">        var_dump(<span class="variable">$bar</span>-&gt;getClassName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Foo <span class="variable">$foo</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump(<span class="variable">$foo</span>-&gt;getClassName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反射Test</span></span><br><span class="line"><span class="variable">$reflect</span> = <span class="keyword">new</span> ReflectionClass(Test::class);</span><br><span class="line"><span class="comment">// 获取是否有构造函数</span></span><br><span class="line"><span class="variable">$constructor</span> = <span class="variable">$reflect</span>-&gt;getConstructor();</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$constructor</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果存在构造 获取参数</span></span><br><span class="line">    <span class="variable">$constructorParams</span> = <span class="variable">$constructor</span>-&gt;getParameters();</span><br><span class="line">    <span class="comment">// 初始化注入的参数</span></span><br><span class="line">    <span class="variable">$args</span> = [];</span><br><span class="line">    <span class="comment">// 循环去判断参数</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$constructorParams</span> <span class="keyword">as</span> <span class="variable">$param</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果为class 就进行实例化</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$param</span>-&gt;getClass()) &#123;</span><br><span class="line">            <span class="variable">$args</span>[] = <span class="variable">$param</span>-&gt;getClass()-&gt;newInstance();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$args</span>[] = <span class="variable">$param</span>-&gt;getName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实例化注入参数</span></span><br><span class="line">    <span class="variable">$class</span> = <span class="variable">$reflect</span>-&gt;newInstanceArgs(<span class="variable">$args</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$class</span> = <span class="variable">$reflect</span>-&gt;newInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设我们要调用index方法 在此之前自己判断下方法是否存在 我省略了</span></span><br><span class="line"><span class="variable">$reflectMethod</span> = <span class="keyword">new</span> ReflectionMethod(<span class="variable">$class</span>, <span class="string">&#x27;index&#x27;</span>);</span><br><span class="line"><span class="comment">// 判断方法修饰符是否为public</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$reflectMethod</span>-&gt;isPublic()) &#123;</span><br><span class="line">    <span class="comment">// 以下代码同等上面</span></span><br><span class="line">    <span class="variable">$args</span> = [];</span><br><span class="line">    <span class="variable">$methodParams</span> = <span class="variable">$reflectMethod</span>-&gt;getParameters();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$methodParams</span> <span class="keyword">as</span> <span class="variable">$param</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$param</span>-&gt;getClass()) &#123;</span><br><span class="line">            <span class="variable">$args</span>[] = <span class="variable">$param</span>-&gt;getClass()-&gt;newInstance();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$args</span>[] = <span class="variable">$param</span>-&gt;getName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$reflectMethod</span>-&gt;invokeArgs(<span class="variable">$class</span>, <span class="variable">$args</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上就简单的实现了依赖注入，下面我们接着封装一下。</p></blockquote><p><code>Ioc.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaobinzhan &lt;gaobinzhan<span class="doctag">@gmail</span>.com&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ioc</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"><span class="variable">$className</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$args</span> = <span class="built_in">self</span>::getMethodParams(<span class="variable">$className</span>);</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> ReflectionClass(<span class="variable">$className</span>))-&gt;newInstanceArgs(<span class="variable">$args</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params"><span class="variable">$className</span>, <span class="variable">$methodName</span>, <span class="variable">$params</span> = []</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取类的实例</span></span><br><span class="line">        <span class="variable">$instance</span> = <span class="built_in">self</span>::getInstance(<span class="variable">$className</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取该方法所需要依赖注入的参数</span></span><br><span class="line">        <span class="variable">$args</span> = <span class="built_in">self</span>::getMethodParams(<span class="variable">$className</span>, <span class="variable">$methodName</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$instance</span>-&gt;&#123;<span class="variable">$methodName</span>&#125;(...array_merge(<span class="variable">$args</span>, <span class="variable">$params</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getMethodParams</span>(<span class="params"><span class="variable">$className</span>, <span class="variable">$methodsName</span> = <span class="string">&#x27;__construct&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射获得该类</span></span><br><span class="line">        <span class="variable">$class</span> = <span class="keyword">new</span> ReflectionClass(<span class="variable">$className</span>);</span><br><span class="line">        <span class="variable">$args</span> = []; <span class="comment">// 记录注入的参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断该类是否有构造函数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$class</span>-&gt;hasMethod(<span class="variable">$methodsName</span>)) &#123;</span><br><span class="line">            <span class="comment">// 构造函数存在 进行获取</span></span><br><span class="line">            <span class="variable">$construct</span> = <span class="variable">$class</span>-&gt;getMethod(<span class="variable">$methodsName</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取构造函数的参数</span></span><br><span class="line">            <span class="variable">$params</span> = <span class="variable">$construct</span>-&gt;getParameters();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 构造函数无参数 直接返回</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$params</span>) <span class="keyword">return</span> <span class="variable">$args</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断参数类型</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$params</span> <span class="keyword">as</span> <span class="variable">$param</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 假设参数为类</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$paramClass</span> = <span class="variable">$param</span>-&gt;getClass()) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 获得参数类型名称</span></span><br><span class="line">                    <span class="variable">$paramClassName</span> = <span class="variable">$paramClass</span>-&gt;getName();</span><br><span class="line">                    <span class="comment">// 如果注入的这个参数也是个类 就要继续判断是否存在构造函数</span></span><br><span class="line">                    <span class="variable">$methodArgs</span> = <span class="built_in">self</span>::getMethodParams(<span class="variable">$paramClassName</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 存入数组中</span></span><br><span class="line">                    <span class="variable">$args</span>[] = (<span class="keyword">new</span> ReflectionClass(<span class="variable">$paramClass</span>-&gt;getName()))-&gt;newInstanceArgs(<span class="variable">$methodArgs</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$args</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码实现了构造函数的依赖注入及方法的依赖注入，下面进行测试。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getClassName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;this is Bar&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Foo <span class="variable">$foo</span>, Bar <span class="variable">$bar</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump(<span class="variable">$foo</span>-&gt;getClassName());</span><br><span class="line">        var_dump(<span class="variable">$bar</span>-&gt;getClassName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Foo <span class="variable">$foo</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump(<span class="variable">$foo</span>-&gt;getClassName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Ioc::getInstance(Test::class);</span><br><span class="line">Ioc::make(Test::class,<span class="string">&#x27;index&#x27;</span>);</span><br></pre></td></tr></table></figure><p>以上呢，就简单的通过php的反射机制实现了依赖注入。</p><p>继基于<code>swoole</code>的微服务框架出现，注解呢就开始慢慢出现在我们的视角里。据说php8也加入了注解支持：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> \<span class="title">Support</span>\<span class="title">Attributes</span>\<span class="title">ListensTo</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductSubscriber</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    &lt;&lt;ListensTo(ProductCreated::class)&gt;&gt;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onProductCreated</span>(<span class="params">ProductCreated <span class="variable">$event</span></span>) </span>&#123; <span class="comment">/* … */</span> &#125;</span><br><span class="line"></span><br><span class="line">    &lt;&lt;ListensTo(ProductDeleted::class)&gt;&gt;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onProductDeleted</span>(<span class="params">ProductDeleted <span class="variable">$event</span></span>) </span>&#123; <span class="comment">/* … */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就类似这样的，哈哈哈。</p><p>而我们现在的注解则是通过反射拿到注释去做到的解析。</p><p>接下来我们去用别人写好的组件去实现<a href="https://github.com/doctrine/annotations">annotations</a></p><p>编写我们的<strong>composer.json</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;require&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;doctrine/annotations&quot;</span>: <span class="string">&quot;^1.8&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;autoload&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;psr-4&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;app\\&quot;</span>: <span class="string">&quot;app/&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;library\\&quot;</span>: <span class="string">&quot;library/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来要执行啥？？？这个你要是再不会，真的我劝你回家种地吧！！哈哈哈 闹着玩呢！</p><p><code>composer install</code></p><p>然后我们接下来去创建目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- app // app目录</span><br><span class="line">- Http</span><br><span class="line">- HomeController.php</span><br><span class="line">- library // 核心注解库</span><br><span class="line">- annotation</span><br><span class="line">- Mapping</span><br><span class="line">- Controller.php</span><br><span class="line">- RequestMapping.php</span><br><span class="line">- Parser</span><br><span class="line">- vendor</span><br><span class="line">- composer.json</span><br><span class="line">- index.php // 测试文件</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzA4LzU0MTFjNTlkYjZmZWIucG5n?x-oss-process=image/format,png" alt="php-annotation目录"></p><p>害 图片有点大。。。。。咋整。。。算了，就这样吧！！！</p><p>温馨提示：在phpstrom里面，安装插件<strong>PHP Annotation</strong>写代码会更友好啊！！</p><p>创建<code>library\Mapping\Controller.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaobinzhan &lt;gaobinzhan<span class="doctag">@gmail</span>.com&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">library</span>\<span class="title">annotation</span>\<span class="title">Mapping</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Doctrine</span>\<span class="title">Common</span>\<span class="title">Annotations</span>\<span class="title">Annotation</span>\<span class="title">Attribute</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Doctrine</span>\<span class="title">Common</span>\<span class="title">Annotations</span>\<span class="title">Annotation</span>\<span class="title">Attributes</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Doctrine</span>\<span class="title">Common</span>\<span class="title">Annotations</span>\<span class="title">Annotation</span>\<span class="title">Required</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Doctrine</span>\<span class="title">Common</span>\<span class="title">Annotations</span>\<span class="title">Annotation</span>\<span class="title">Target</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> library\annotation\Mapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Attributes</span>(&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Attribute</span>(&quot;prefix&quot;, type=&quot;string&quot;),</span></span><br><span class="line"><span class="comment"> * &#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Annotation</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Target</span>(&quot;CLASS&quot;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Required</span>()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$prefix</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$value</span>[<span class="string">&#x27;value&#x27;</span>])) <span class="keyword">$this</span>-&gt;prefix = <span class="variable">$value</span>[<span class="string">&#x27;value&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$value</span>[<span class="string">&#x27;prefix&#x27;</span>])) <span class="keyword">$this</span>-&gt;prefix = <span class="variable">$value</span>[<span class="string">&#x27;prefix&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrefix</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>@Annotation</strong>表示这是个注解类，让IDE提示更加友好！</p><p><strong>@Target</strong>表示这个注解类只能被类使用！</p><p><strong>@Required</strong>表示这个属性是必须填写的！</p><p><strong>@Attributes</strong>表示这个注解类有多少个属性！</p></blockquote><p>创建<code>library\Mapping\RequestMapping.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaobinzhan &lt;gaobinzhan<span class="doctag">@gmail</span>.com&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">library</span>\<span class="title">annotation</span>\<span class="title">Mapping</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Doctrine</span>\<span class="title">Common</span>\<span class="title">Annotations</span>\<span class="title">Annotation</span>\<span class="title">Required</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Doctrine</span>\<span class="title">Common</span>\<span class="title">Annotations</span>\<span class="title">Annotation</span>\<span class="title">Target</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class RequestMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> library\annotation\Mapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Annotation</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Attributes</span>(&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Attribute</span>(&quot;route&quot;, type=&quot;string&quot;),</span></span><br><span class="line"><span class="comment"> * &#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Target</span>(&quot;METHOD&quot;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMapping</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Required</span>()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$route</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$value</span>[<span class="string">&#x27;value&#x27;</span>])) <span class="keyword">$this</span>-&gt;route = <span class="variable">$value</span>[<span class="string">&#x27;value&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$value</span>[<span class="string">&#x27;route&#x27;</span>])) <span class="keyword">$this</span>-&gt;route = <span class="variable">$value</span>[<span class="string">&#x27;route&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRoute</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;route;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的代码就不用再重复解释了吧！我偏不解释了！哈哈哈</p></blockquote><p>创建<code>app\Http\HomeController.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaobinzhan &lt;gaobinzhan<span class="doctag">@gmail</span>.com&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">Http</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">library</span>\<span class="title">annotation</span>\<span class="title">Mapping</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">library</span>\<span class="title">annotation</span>\<span class="title">Mapping</span>\<span class="title">RequestMapping</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class HomeController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> app\Http</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Controller</span>(prefix=&quot;/home&quot;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestMapping</span>(route=&quot;/test&quot;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="number">111</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里代码没啥解释的。。。</p></blockquote><p>哈哈，下面来测试我们的结果！</p><p><code>index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaobinzhan &lt;gaobinzhan<span class="doctag">@gmail</span>.com&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">require</span> <span class="string">&#x27;./vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个反射类</span></span><br><span class="line"><span class="variable">$refClass</span> = <span class="keyword">new</span> \ReflectionClass(<span class="string">&#x27;\app\Http\HomeController&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册load</span></span><br><span class="line">\Doctrine\Common\Annotations\AnnotationRegistry::registerLoader([<span class="variable">$loader</span>, <span class="string">&#x27;loadClass&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// new 我们的注解读取器</span></span><br><span class="line"><span class="variable">$reader</span> = <span class="keyword">new</span> \Doctrine\Common\Annotations\AnnotationReader();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取该类上的所有注解</span></span><br><span class="line"><span class="variable">$classAnnotations</span> = <span class="variable">$reader</span>-&gt;getClassAnnotations(<span class="variable">$refClass</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是个循环 说明$classAnnotations是个数组</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$classAnnotations</span> <span class="keyword">as</span> <span class="variable">$annotation</span>)&#123;</span><br><span class="line">    <span class="comment">// 因为我们定义了Controller注解类 要判断好啊</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$annotation</span> <span class="keyword">instanceof</span> \library\annotation\Mapping\Controller)&#123;</span><br><span class="line">        <span class="comment">// 获取我们的 prefix 这地方能看懂吧。。。</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$routePrefix</span> = <span class="variable">$annotation</span>-&gt;getPrefix().PHP_EOL;</span><br><span class="line">        <span class="comment">// 获取类中所有方法</span></span><br><span class="line">        <span class="variable">$refMethods</span> = <span class="variable">$refClass</span>-&gt;getMethods();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行循环</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$refMethods</span> <span class="keyword">as</span> <span class="variable">$method</span>)&#123;</span><br><span class="line">        <span class="comment">// 获取方法上的所有注解</span></span><br><span class="line">        <span class="variable">$methodAnnotations</span> = <span class="variable">$reader</span>-&gt;getMethodAnnotations(<span class="variable">$method</span>);</span><br><span class="line">        <span class="comment">// 循环</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$methodAnnotations</span> <span class="keyword">as</span> <span class="variable">$methodAnnotation</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$methodAnnotation</span> <span class="keyword">instanceof</span> \library\annotation\Mapping\RequestMapping)&#123;</span><br><span class="line">                <span class="comment">// 输出我们的route</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$methodAnnotation</span>-&gt;getRoute().PHP_EOL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home</span><br><span class="line">/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>之前我们不是建立了个<strong>Parser</strong>的目录嘛，可以在里面创建对应的解析类，然后去解析，把它们封装一下子！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PHP5之后提供了完整的反射API，添加了对类、接口、函数、方法和扩展进行反向工程的能力。此外，反射API提供了方法来取出函数、类和方法的文档注释。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ioc/Di&lt;/strong&gt;大家应该都不陌生，但是对小白来说呢听起来就挺高大上的，下面就用代</summary>
      
    
    
    
    <category term="Php" scheme="https://stitch.cn/categories/Php/"/>
    
    
  </entry>
  
  <entry>
    <title>redis持久化rdb及aof</title>
    <link href="https://stitch.cn/2020/06/07/redis%E6%8C%81%E4%B9%85%E5%8C%96rdb%E5%8F%8Aaof.html"/>
    <id>https://stitch.cn/2020/06/07/redis%E6%8C%81%E4%B9%85%E5%8C%96rdb%E5%8F%8Aaof.html</id>
    <published>2020-06-07T19:27:12.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>​        持久化的功能：<strong>Redis</strong>是内存数据库，数据都是存储在内存中，为了避免进程退出导致数据的永久丢失，需要定期将<strong>Redis</strong>中的数据以某种形式（数据或命令）从内存保存到硬盘中。当下次<strong>Redis</strong>重启时，利用持久化文件实现数据恢复。除此之外，为了进行灾难备份，可以将持久化文件拷贝到一个远程位置。<strong>Redis</strong>持久化分为<strong>RDB</strong>和<strong>AOF</strong>，前者将当前数据保存到硬盘，后者则是将每次执行的写命令保存的硬盘。</p><h2 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h2><p>​        <strong>RDB</strong>是一种快照存储持久方式，具体就是将<strong>Redis</strong>某一时刻的内存数据保存到硬盘的文件当中，默认保存的文件名为<strong>dump.rdb</strong>，而在Redis服务器启动时，会重新加载<strong>dump.rdb</strong>文件的数据到内存当中恢复数据。触发<strong>RDB</strong>持久化过程分为手动触发和自动触发。</p><h3 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h3><p>手动触发分别对应<code>save</code>和<code>bgsave</code>命令：</p><p><code>save</code>命令：阻塞当前<strong>Redis</strong>服务器，直到<strong>RDB</strong>过程完成为止，对于内存比较大的实例会造成长时间阻塞，线上环境不建议使用。</p><p><code>bgsave</code>命令：<strong>Redis</strong>进程执行<strong>fork</strong>操作创建子进程，<strong>RDB</strong>持久化过程由子进程负责，完成后自动结束。阻塞只发生在<strong>fork</strong>阶段，一般时间很短。</p><p>显示<code>bgsave</code>命令是针对<code>save</code>阻塞问题做的优化。因此<strong>Redis</strong>内部所有的涉及<strong>RDB</strong>的操作都采用<code>bgsave</code>的方式。</p><p>除了执行命令手动触发之外，<strong>Redis</strong>内部还存在自动触发<strong>RDB</strong>的持久化机制，例如以下场景：</p><ul><li>使用<code>save</code>相关配置，如<code>save m n</code>。表示<strong>m</strong>秒内数据集存在<strong>n</strong>次修改时，自动触发<code>bgsave</code>。</li><li>如果从节点执行全量复制操作，主节点自动执行<code>bgsave</code>生成<strong>RDB</strong>文件并发送给从节点。</li><li>执行<code>debug reload</code>命令重载<strong>Redis</strong>时，也会自动触发<code>save</code>操作。</li><li>默认情况下执行<code>shutdown</code>命令时，如果没有开启<strong>AOF</strong>持久化功能则自动执行<code>bgsave</code>。</li></ul><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p><code>bgsave</code>是主流的触发<strong>RDB</strong>持久化方式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzA2LzgzZGQyNjFiNTcxNzgucG5n?x-oss-process=image/format,png" alt="redis-bgsave命令"></p><ul><li>执行<code>bgsave</code>命令，<strong>Redis</strong>父进程判断当前是否存在正在执行的子进程，如<strong>RDB/AOF</strong>子进程，如果存在<code>bgsave</code>命令直接返回。</li><li>父进程执行<strong>fork</strong>操作创建子进程，<strong>fork</strong>操作过程中父进程会阻塞，通过<code>info stats</code>命令查看<code>latest_fork_usec</code>选项，可以获得最近一个<strong>fork</strong>操作的耗时，单位为微妙。</li><li>父进程<strong>fork</strong>完成后，<code>bgsave</code>命令返回<strong>Background saving started</strong>信息并不再阻塞父进程，可以继续响应其它命令。</li><li>子进程创建<strong>RDB</strong>文件，根据父进程内存生成临时快照文件，完成后原有文件进行原子替换。执行<code>lastsave</code>命令可以获取最后一次生成<strong>RDB</strong>的时间，对应<code>info</code>统计的<code>rdb_last_save_time</code>选项。</li><li>进程发送信号给父进程表示完成，父进程更新统计信息，具体见<code>info Persistence</code>下的<code>rdb_*</code>相关选项。</li></ul><h3 id="服务器配置自动触发"><a href="#服务器配置自动触发" class="headerlink" title="服务器配置自动触发"></a>服务器配置自动触发</h3><p>​        除了通过客户端发送命令外，还有一种方式，就是在<strong>Redis</strong>配置文件中的<code>save</code>指定到达触发<strong>RDB</strong>持久化的条件，比如【多少秒内至少达到多少写操作】就开启<strong>RDB</strong>数据同步。</p><p>例如我们可以在配置文件<strong>redis.conf</strong>指定如下的选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 900s内至少达到1条写命令</span></span><br><span class="line">save 900 1</span><br><span class="line"><span class="comment"># 300s内至少达到10条写命令</span></span><br><span class="line">save 300 10</span><br><span class="line"><span class="comment"># 60s内至少达到1000条写命令</span></span><br><span class="line">save 60 1000</span><br></pre></td></tr></table></figure><p>这种通过服务器配置文件触发<strong>RDB</strong>的方式，与<code>bgsave</code>命令类似，达到触发条件时，会<strong>fork</strong>一个子进程进行数据同步，不过最好不要通过这种方式来触发<strong>RDB</strong>持久化，因为设置触发的时间太短，则容易频繁写入<strong>rdb</strong>文件，影响服务器性能，时间设置太长会造成数据丢失。</p><h3 id="RDB文件的处理"><a href="#RDB文件的处理" class="headerlink" title="RDB文件的处理"></a>RDB文件的处理</h3><p>保存：</p><ul><li><strong>RDB</strong>文件保存在<strong>dir</strong>配置指定的目录下，文件名通过<strong>dbfilename</strong>配置指定。可通过执行<code>config set dir &#123;newDir&#125;</code>和<code>config set dbfilename &#123;newFileName&#125;</code>运行期动态执行，当下次运行时RDB文件会保存到新目录。</li></ul><p>压缩：</p><ul><li><strong>Redis</strong>默认采用<strong>LZF</strong>算法对生存的<strong>RDB</strong>文件做压缩处理，压缩后的文件远远小于内存大小，默认开启，可以通过参数<code>config set rdbcompression &#123;yes|no&#125;</code>动态修改。</li><li>虽然压缩<strong>RDB</strong>会消耗<strong>CPU</strong>，但可大幅度降低文件的体积，方便保存到硬盘或通过网络发送给从节点，因此线上建议开启。</li></ul><h3 id="RDB方式的优缺点"><a href="#RDB方式的优缺点" class="headerlink" title="RDB方式的优缺点"></a>RDB方式的优缺点</h3><p>优点：</p><ul><li><strong>RDB</strong>是一个非常紧凑的文件，它保存了<strong>Redis</strong>在某个时间点上的数据集。这种文件非常适合用于备份；比如说，你可以在最近的24小时内，每小时备份一次<strong>RDB</strong>文件，并且在每个月的每一天，也备份一个<strong>RDB</strong>文件。这样的话，即使遇上问题，也可以随时将数据集还原到不同的版本。</li><li><strong>RDB</strong>可以最大化<strong>Redis</strong>的性能；父进程在保存<strong>RDB</strong>文件时唯一要做的就是<strong>fork</strong>出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无需执行任何磁盘<strong>I/O</strong>操作。</li><li><strong>RDB</strong>在恢复大数据集时的速度要比<strong>AOF</strong>的恢复速度快。</li></ul><p>缺点：</p><ul><li><strong>RDB</strong>方式数据没办法做到实时持久化/秒级持久化。如果服务器宕机的话，采用<strong>RDB</strong>的方式会造成某个时段内数据的丢失，比如我们设置10分钟同步一次或者5分钟达到1000次写入就同步一次，那么如果还没达到触发条件服务器就死机了，那么这个时间段的数据会丢失。</li><li>使用<code>bgsave</code>命令在<strong>fork</strong>子进程时，如果数据量太大，fork的过程也会发生阻塞，另外，<strong>fork</strong>子进程会消耗内存。针对<strong>RDB</strong>不适合做实时持久化的问题，<strong>Redis</strong>提供了<strong>AOF</strong>持久化方式来解决。</li></ul><h2 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h2><p>​        <strong>AOF</strong>（append only file）持久化；与<strong>RDB</strong>存储某个时刻的快照不同，<strong>AOF</strong>持久化方式会记录客户端对服务器的每一次写操作命令到日志当中，并将这些操作以<strong>Redis</strong>协议追加保存到以后缀为<strong>aof</strong>文件末尾。</p><h3 id="使用AOF"><a href="#使用AOF" class="headerlink" title="使用AOF"></a>使用AOF</h3><p>​        开启AOF功能需要设置配置；<code>appendonly yes</code>，默认不开启。<strong>AOF</strong>文件名通过<code>appendfilename</code>配置设置，默认文件名是<strong>appendonly.aof</strong>。保存路径同RDB持久化方式一致，通过dir配置指定。</p><h3 id="持久化配置"><a href="#持久化配置" class="headerlink" title="持久化配置"></a>持久化配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes <span class="comment">#启用aof持久化方式</span></span><br><span class="line">appendfsync always <span class="comment">#每次收到命令就立即强制写入磁盘，最慢的大概只有几百的TPS，但是保证完全的持久化，不推荐使用</span></span><br><span class="line">appendfsync everysec <span class="comment">#每秒钟强制写入磁盘一次，在性能和持久化方面做了很好的折中，推荐</span></span><br><span class="line">appendfsync no <span class="comment">#完全依赖os，性能最好，持久化没保证，Redis不会主动调用fsync去将AOF日志内容同步到磁盘，所以这一切完全依赖于操作系统的调试了。对于大多数Linux操作系统，是每30s进行一次fsync，将缓冲区中的数据写的磁盘上。</span></span><br></pre></td></tr></table></figure><h3 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzA3LzQyYmQ4MzE2MDc4ZTgucG5n?x-oss-process=image/format,png" alt="redis-aof"></p><ul><li>所以的写入命令会追加到<strong>aof_buf</strong>（缓冲区）中。</li><li><strong>AOF</strong>缓冲区根据对应的策略向硬盘做同步操作。</li><li>随着<strong>AOF</strong>文件越来越大，需要定期对<strong>AOF</strong>文件进行重写，达到压缩的目的。</li><li>当<strong>Redis</strong>服务器重启时，可以加载<strong>AOF</strong>文件进行数据恢复。</li></ul><blockquote><p>在同步期间可能会发生阻塞问题</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzA3LzI5ZmIyYTEzNzJhYWEucG5n?x-oss-process=image/format,png" alt="redis-aof追加阻塞"></p><ul><li>若果<strong>AOF</strong>文件<strong>fsync</strong>同步时间大于<strong>2s</strong>，<strong>Redis</strong>主进程就会阻塞。</li><li>若果<strong>AOF</strong>文件<strong>fsync</strong>同步时间小于<strong>2s</strong>，<strong>Redis</strong>主进程就会返回。</li></ul><p>其实这样做是为了保证文件安全性的一种策略。</p><p><strong>AOF</strong>追加阻塞会产生的问题：</p><ul><li><strong>fsync</strong>大于<strong>2s</strong>时候，会阻塞<strong>redis</strong>主进程，我们都知道<strong>redis</strong>主进程是用来执行<strong>redis</strong>命令的，是不能阻塞的。</li><li>虽然每秒<strong>everysec</strong>刷盘策略，但是实际上不是丢失<strong>1s</strong>数据，实际有可能丢失<strong>2s</strong>数据。</li></ul><h3 id="重写机制"><a href="#重写机制" class="headerlink" title="重写机制"></a>重写机制</h3><ul><li><p><strong>AOF</strong>将客户端的每一个写操作都追加到<strong>aof</strong>文件末尾，随着命令不断写入<strong>AOF</strong>，文件会越来越大，为了解决这个问题，<strong>Redis</strong>引入<strong>AOF</strong>重写机制压缩文件体积。</p></li><li><p><strong>AOF</strong>文件重写是吧Redis进程内的数据转化为写命令同步到新AOF<strong>文件的过程</strong>。</p><p>比如：多条命令可以合并为一个，<code>lpush list a、lpush list b</code>可以转化为<code>lpush list a b</code>。</p></li><li><p><strong>AOF</strong>重写降低了文件占用空间，除此之外，另一个目的是：更小的<strong>AOF</strong>文件可以更快地被加载。</p></li></ul><p>触发机制：</p><p><strong>AOF</strong>重写过程可以手动触发和自动触发：</p><ul><li>手动触发：直接调用<code>bgrewriteaof</code>命令。</li><li>自动触发：根据<code>auto-aof-rewrite-min-size</code>和<code>auto-aof-rewrite-percentage</code>参数确定自动触发。<ul><li><code>auto-aof-rewrite-min-size</code>表示运行<strong>AOF</strong>重写时文件最小体积，默认为<strong>64MB</strong>。</li><li><code>auto-aof-rewrite-percentage</code>代表当前<strong>AOF</strong>文件空间（aof_current_size）和上一次重写后AOF文件空间（aof_base_size）的比值。</li></ul></li><li>示例：<ul><li><code>auto-aof-rewrite-percentage：100</code></li><li><code>auto-aof-rewrite-min-size：64mb</code></li></ul></li><li>默认配置时当<strong>AOF</strong>文件大小是上次<strong>rewrite</strong>后大小的一倍且文件大于<strong>64mb</strong>时触发。</li></ul><p>当触发AOF重写时，内部流程：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzA3Lzc1NDhmZGY1YTljZmQucG5n?x-oss-process=image/format,png"></p><p>执行<strong>AOF</strong>重写请求。如果当前进程正在执行<strong>AOF</strong>重写，请求不执行并返回如下响应：<strong>ERR Background append only file rewriting already in progress</strong></p><ul><li>父进程执行<strong>fork</strong>创建子进程，开销等同于<strong>bgsave</strong>过程。<ul><li>主进程<strong>fork</strong>操作完成后，继续响应其它命令。所以修改命令依然写入<strong>AOF</strong>缓冲区并根据<code>appendfsync</code>策略同步到硬盘，保证原有<strong>AOF</strong>机制正确性。</li><li>由于<strong>fork</strong>操作运用写时复制技术，子进程只能共享<strong>fork</strong>操作时的内存数据。由于父进程依然响应命令，Redis使用<strong>AOF</strong>重写缓冲区保存这部分新数据，防止新<strong>AOF</strong>文件生成期间丢失这部分数据。</li></ul></li><li>子进程根据内存快照，按照命令合并规则写入新的<strong>AOF</strong>文件，每次批量写入硬盘数据量由配置<code>aof-rewrite-incremental-fsync</code>控制，默认为<strong>32MB</strong>，防止单词刷盘数据过多造成硬盘阻塞。<ul><li>新<strong>AOF</strong>文件写入完成后，子进程发送信号给父进程，父进程更新统计信息，具体见<code>info persistence</code>的**aof_***相关统计。</li><li>父进程把<strong>AOF</strong>重写缓冲区的数据写入到新的AOF文件。</li><li>使用新<strong>AOF</strong>文件替换老文件，完成<strong>AOF</strong>重写。</li></ul></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>​        在写入<strong>AOF</strong>日志文件时，如果<strong>Redis</strong>服务器宕机，则<strong>aof</strong>日志文件会出现格式错误，在重启<strong>Redis</strong>服务器时，<strong>Redis</strong>服务器会拒绝载入这个<strong>aof</strong>文件，可以通过命令修复<strong>aof</strong>并恢复数据。</p><p><code>redid-check-aof -fix appendonly.aof</code></p><h3 id="AOF的优缺点"><a href="#AOF的优缺点" class="headerlink" title="AOF的优缺点"></a>AOF的优缺点</h3><p>优点：</p><ul><li><strong>AOF</strong>可以设置完全不同步、每秒同步、每次操作同步，默认时每秒同步。因为<strong>AOF</strong>时操作指令的追加，所以可以频繁的大量的同步。</li><li><strong>AOF</strong>文件是一个值追加日志的文件，即使服务宕机为写入完整的命令，也可以通过<strong>redis-check-aof</strong>工具修复这些问题。</li><li>如果<strong>AOF</strong>文件过大，<strong>Redis</strong>会在后台自动地重写<strong>AOF</strong>文件。重写后会使<strong>AOF</strong>文件压缩到最小所需的指令集。</li><li><strong>AOF</strong>文件是有序保存数据看的所有写入操作，易读，易分析。即使如果不小心误操作数据看，也很容易找出业务错误指令，恢复到某个数据节点。例如不小<code>FLUSHALL</code>，可以非常容易恢复到执行命令之前。</li></ul><p>缺点：</p><ul><li>相同数据量下，<strong>AOF</strong>的文件通常体积会比RDB大。因为<strong>AOF</strong>是存指令的，而RDB是所有指令的结果快照。但<strong>AOF</strong>在日志重写后会压缩一些空间。</li><li>在大量写入和载入的时候，<strong>AOF</strong>的效率会比<strong>RDB</strong>低，因为大量写入，<strong>AOF</strong>会执行更多的保存命令，载入的时候也需要大量的重执行命令来得到最后的结果。<strong>RDB</strong>对此更有优势。</li></ul><h3 id="AOF常用配置"><a href="#AOF常用配置" class="headerlink" title="AOF常用配置"></a>AOF常用配置</h3><p><code>appendonly no</code>：是否开启<strong>AOF</strong> </p><p><code>appendfilename &quot;appendonly.aof&quot;</code>：<strong>AOF</strong>文件名 </p><p><code>dir ./</code>：<strong>RDB</strong>文件和<strong>AOF</strong>文件所在目录 </p><p><code>appendfsync everysec</code>：fsync持久化策略 </p><p><code>no-appendfsync-on-rewrite no</code>：<strong>AOF</strong>重写期间是否禁止<strong>fsync</strong>；如果开启该选项，可以减轻文件重写时<strong>CPU</strong>和硬盘的负载（尤其是硬盘），但是可能会丢失<strong>AOF</strong>重写期间的数据；需要在负载和安全性之间进行平衡</p><p><code>auto-aof-rewrite-percentage 100</code>：文件重写触发条件之一 </p><p><code>auto-aof-rewrite-min-size 64mb</code>：文件重写触发提交之一 </p><p><code>aof-load-truncated yes</code>：如果<strong>AOF</strong>文件结尾损坏，<strong>Redis</strong>启动时是否仍载入<strong>AOF</strong>文件</p><h2 id="重启加载的选择"><a href="#重启加载的选择" class="headerlink" title="重启加载的选择"></a>重启加载的选择</h2><p><strong>AOF</strong>和<strong>RDB</strong>文件都可以用于服务器重启时的数据恢复。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzA3Lzg4MzZlMjgwZjVhMTIucG5n?x-oss-process=image/format,png" alt="redis重写加载"></p><h2 id="持久化的选择"><a href="#持久化的选择" class="headerlink" title="持久化的选择"></a>持久化的选择</h2><p>​        在实际生产环境中，根据数据量、应用对数据的安全要求、预算限制等不同情况，会有各种各样的持久化策略；如完全不使用任何持久化、使用<strong>RDB</strong>或<strong>AOF</strong>的一种，或同时开启<strong>RDB</strong>和AOF<strong>持久化等</strong>。</p><p>​        此外，持久化的选择必须与Redis的主从策略一起考虑，因为主从复制与持久化同样具有数据备份的功能，而且主机<strong>master</strong>和从机<strong>slave</strong>可以独立的选择持久化方案。 </p><p>面分场景来讨论持久化策略的选择，下面的讨论也只是作为参考，实际方案可能更复杂更具多样性。</p><ul><li>如果<strong>Redis</strong>中的数据完全丢弃也没有关系（如<strong>Redis</strong>完全用作<strong>DB</strong>层数据的<strong>cache</strong>），那么无论是单机，还是主从架构，都可以不进行任何持久化。</li><li>在单机环境下（对于个人开发者，这种情况可能比较常见），如果可以接受十几分钟或更多的数据丢失，选择<strong>RDB</strong>对<strong>Redis</strong>的性能更加有利；如果只能接受秒级别的数据丢失，应该选择<strong>AOF</strong>。</li><li>但在多数情况下，我们都会配置主从环境，<strong>slave</strong>的存在既可以实现数据的热备，也可以进行读写分离分担<strong>Redis</strong>读请求，以及在<strong>master</strong>宕掉后继续提供服务。在这种情况下的做法是： <ul><li><strong>master</strong>：完全关闭持久化（包括<strong>RDB</strong>和<strong>AOF</strong>），这样可以让master的性能达到最好；</li><li>slave：关闭<strong>RDB</strong>，开启<strong>AOF</strong>（如果对数据安全要求不高，开启<strong>RDB</strong>关闭<strong>AOF</strong>也可以），并定时对持久化文件进行备份（如备份到其他文件夹，并标记好备份的时间）；然后关闭<strong>AOF</strong>的自动重写，然后添加定时任务，在每天<strong>Redis</strong>闲时（如凌晨12点）调用<code>bgrewriteaof</code>。 </li><li>这里需要解释一下，为什么开启了主从复制，可以实现数据的热备份，还需要设置持久化呢？因为在一些特殊情况下，主从复制仍然不足以保证数据的安全，例如：<ul><li><strong>master</strong>和<strong>slave</strong>进程同时停止：考虑这样一种场景，如果<strong>master</strong>和<strong>slave</strong>在同一个机房，则一次停电事故就可能导致<strong>master</strong>和<strong>slave</strong>机器同时关机，<strong>Redis</strong>进程停止；如果没有持久化，则面临的是数据的完全丢失。</li><li><strong>master</strong>误重启：考虑这样一种场景，<strong>master</strong>服务因为故障宕掉了，如果系统中有自动拉起机制（即检测到服务停止后重启该服务）将<strong>master</strong>自动重启，由于没有持久化文件，那么<strong>master</strong>重启后数据是空的，<strong>slave</strong>同步数据也变成了空的；如果<strong>master</strong>和<strong>slave</strong>都没有持久化，同样会面临数据的完全丢失。需要注意的是，即便是使用了哨兵进行自动的主从切换，也有可能在哨兵轮询到<strong>master</strong>之前，便被自动拉起机制重启了。因此，应尽量避免“自动拉起机制”和“不做持久化”同时出现。</li></ul></li></ul></li><li>异地灾备：上述讨论的几种持久化策略，针对的都是一般的系统故障，如进程异常退出、宕机、断电等，这些故障不会损坏硬盘。但是对于一些可能导致硬盘损坏的灾难情况，如火灾地震，就需要进行异地灾备。 <ul><li>例如对于单机的情形，可以定时将<strong>RDB</strong>文件或重写后的<strong>AOF</strong>文件，通过<strong>scp</strong>拷贝到远程机器，如阿里云；对于主从的情形，可以定时在<strong>master</strong>上执行<code>bgsave</code>，然后将<strong>RDB</strong>文件拷贝到远程机器，或者在<strong>slave</strong>上执行<code>bgrewriteaof</code>重写<strong>AOF</strong>文件后，将<strong>AOF</strong>文件拷贝到远程机器上。 </li><li>一般来说，由于<strong>RDB</strong>文件文件小、恢复快，因此灾难恢复常用<strong>RDB</strong>文件；异地备份的频率根据数据安全性的需要及其它条件来确定，但最好不要低于一 天一次。</li></ul></li></ul><h2 id="持久化配置方案"><a href="#持久化配置方案" class="headerlink" title="持久化配置方案"></a>持久化配置方案</h2><ul><li><p>企业级的持久化的配置策略 </p><ul><li><code>save 60 10000</code>：如果你希望尽可能确保说，<strong>RDB</strong>最多丢1分钟的数据，那么尽量就是每隔1分钟都生成一个快照，低峰期，数据量很少，也没必要 10000-&gt;生成RDB，1000-&gt;RDB，这个根据你自己的应用和业务的数据量，自己去决定 </li><li><strong>AOF</strong>一定要打开。</li><li><code>auto-aof-rewrite-percentage 100</code>: 就是当前<strong>AOF</strong>大小膨胀到超过上次**100%**，上次的两倍 </li><li><code>auto-aof-rewrite-min-size 64mb</code>: 根据你的数据量来定，<strong>16mb</strong>，<strong>32mb</strong> </li></ul></li><li><p>数据备份方案 <strong>RDB</strong>非常适合做冷备，每次生成之后，就不会再有修改了</p><ul><li>写<strong>crontab</strong>定时调度脚本去做数据备份</li><li>每小时都<strong>copy</strong>一份<strong>rdb</strong>的备份，到一个目录中去，仅仅保留最近<strong>48</strong>小时的备份</li><li>每天都保留一份当日的<strong>rdb</strong>的备份，到一个目录中去，仅仅保留最近<strong>1</strong>个月的备份 </li><li>每次<strong>copy</strong>备份的时候，都把太旧的备份给删了 </li><li>每天晚上将当前服务器上所有的数据备份，发送一份到远程的云服务上去【crontab】</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;​        持久化的功能：&lt;strong&gt;Redis&lt;/strong&gt;是内存数据库，数据都是存储在内存中，为了避免进程退出导致数据的永</summary>
      
    
    
    
    <category term="Redis" scheme="https://stitch.cn/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>redis之主从问题处理</title>
    <link href="https://stitch.cn/2020/06/05/redis%E4%B9%8B%E4%B8%BB%E4%BB%8E%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86.html"/>
    <id>https://stitch.cn/2020/06/05/redis%E4%B9%8B%E4%B8%BB%E4%BB%8E%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86.html</id>
    <published>2020-06-05T15:05:29.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主从复制的常用相关配置"><a href="#主从复制的常用相关配置" class="headerlink" title="主从复制的常用相关配置"></a>主从复制的常用相关配置</h2><ul><li><p>Slaveof</p><p><code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></p><p><strong>slave</strong>实例需要配置该项，指向<strong>master</strong>的(ip,port)</p></li><li><p>masterauth</p><p><code>masterauth &lt;master-password&gt;</code></p><p>如果<strong>master</strong>实例启用了密码保护，则该配置项需要填<strong>master</strong>的启动密码；</p><p>如果未启用，需要将该配置项注视掉。</p></li><li><p>slave-serve-stale-data</p><p>指定<strong>slave</strong>与<strong>master</strong>连接中断时的动作。默认为<strong>yes</strong>，表明<strong>slave</strong>会继续应答来自<strong>client</strong>的请求，但这些数据可能已经过期（因为连接中断导致无法从<strong>master</strong>同步）。若配置为<strong>no</strong>，则<strong>slave</strong>除正常应答“<strong>INFO</strong>”和“<strong>SLAVEOF</strong>”命令外，其余来自客户端的请求命令均会得到“<strong>SYNC with master in progress</strong>“的应答，直到该<strong>slave</strong>与<strong>master</strong>连接重建成功或该<strong>slave</strong>被提升为<strong>master</strong>。</p></li><li><p>slave-read-only</p><p>指定<strong>slave</strong>是否只读，默认为<strong>yes</strong>。若配置为<strong>no</strong>，表示<strong>slave</strong>是可写的，但写的内容在主从同步完成后会被删除掉。</p></li><li><p>repl-disable-tcp-nodelay</p><p>指定向<strong>slave</strong>同步数据时，是否禁用<strong>socket</strong>的<strong>NO_DELAY</strong>选项。若配置为<strong>yes</strong>，则禁用<strong>NO_DELAY</strong>，则<strong>TCP</strong>协议栈会合并小包统一发送，这样可以减少主从节点间的包数量并节省宽带，但会增加数据同步到<strong>slave</strong>的时间。若配置为<strong>no</strong>，表明启用<strong>NO_DELAY</strong>，则<strong>TCP</strong>协议栈不会延迟小包的发送时间，这样数据同步的延时会减少，但需要更大的宽带。</p></li><li><p>slave-priority</p><p>指定<strong>slave</strong>的优先级。在不只1个<strong>slave</strong>存在的部署环境下，当<strong>master</strong>宕机时，<strong>Redis Sentinel</strong> 会将<strong>priority</strong>值最小的<strong>slave</strong>提升为<strong>master</strong>。需要注意的是，若该配置项为0，则对应的<strong>slave</strong>永远不会被<strong>Redis Sentinel</strong> 自动提升为<strong>master</strong>。</p></li></ul><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><h3 id="复制数据延迟"><a href="#复制数据延迟" class="headerlink" title="复制数据延迟"></a>复制数据延迟</h3><p><strong>Redis</strong>复制数据的延迟由于异步复制特性是无法避免的，延迟取决于网络宽带和命令阻塞情况，比如刚在主节点写入数据后立刻在从节点上读取可能获取不到。需要业务场景允许短时间内的数据延迟。对于无法容忍大量延迟场景，可以编写外部监控程序监听主从节点的复制偏移量，当延迟较大时触发报警或通知客户端避免读取延迟过高的从节点。</p><p>具体实现逻辑：</p><ul><li>监控程序定期检查主从节点的偏移量，主节点偏移量在<code>info replication</code>的<code>master_repl_offset</code>指标记录，从节点偏移量可以查询主节点的<code>slave0</code>字段的<code>offset</code>指标，它们的差值就是主从节点延迟的字节量。</li><li>对于无法容忍大量延迟场景，可以编写外部监控程序监听主从节点的复制偏移量，当延迟较大时触发报警或者通知客户端避免读取延迟过高的从节点，同时从节点的<code>slave-serve-stable-data</code>参数也与此有关，它控制这种情况下从节点的表现，当从库同主机失去连接或者复制正在进行，从机库有两种运行方式。</li></ul><h3 id="读取过期数据"><a href="#读取过期数据" class="headerlink" title="读取过期数据"></a>读取过期数据</h3><p>当主节点存储大量设置超时的数据时，redis内部需要维护过期数据删除策略，删除策略主要有两种：</p><ul><li><p>惰性删除</p><p>主节点每次处理读取命令时，都会检查健是否超时，如果超时则执行·<code>del</code>命令删除键对象，之后<code>del</code>命令也会异步发给从节点。因为保持复制的一致性，从节点自身永远不会主动删除超时数据。</p></li><li><p>定时删除</p><p><strong>Redis</strong>主节点在内部定时任务会循环采样一定数据量的键，当发现采用的键过期时会执行<code>del</code>命令，之后再同步给从节点。</p></li></ul><h3 id="从节点故障问题"><a href="#从节点故障问题" class="headerlink" title="从节点故障问题"></a>从节点故障问题</h3><p>对于从节点的故障问题，需要在客户端维护一个可用从节点可用列表，当从节点故障时，立刻切换到其他从节点或主节点，<strong>redis Cluster</strong>可以解决这个问题。</p><h2 id="配置不一致"><a href="#配置不一致" class="headerlink" title="配置不一致"></a>配置不一致</h2><p>主节点和从节点不同，经常导致主节点和从节点的配置不同，并带来问题。</p><p>主从配置不一致是一个容易忽视的问题。对于有些配置主从之间是可以不一致，比如：主节点关闭AOF，从节点开启AOF。但对于内存相关的配置必须要一致，比如<code>maxmemory</code>,<code>hash-max-ziplist-entries</code>等参数。</p><p>数据丢失：主机和从机有时候发生配置不一致的情况，例如<code>maxmemory</code>不一致。假如主机配置<code>maxmemory</code>为8G，从机设置为4G，这个时候是可以用的，而且不会报错。但如果要做高可用，让从节点变成主节点的时候，就会发现数据已经丢失，而且无法挽回。</p><h2 id="规避全量复制"><a href="#规避全量复制" class="headerlink" title="规避全量复制"></a>规避全量复制</h2><p>全量复制指的是当<strong>slave</strong>断开并重启后，<strong>runid</strong>产生变化而导致需要在<strong>master</strong>主机里拷贝全部数据。这种拷贝全部数据的过程非常耗资源。</p><p>全量复制是不可避免的，例如第一次的全量复制就不可避免，这时我们需要选择小主节点，且<code>maxmemory</code>值不要过大，这样就会比较快。同时选择在低峰值的时候做全量复制。</p><p>造成全量复制的原因：</p><ul><li>主从机的运行<strong>runid</strong>不匹配。解释一下，主节点如果重启，<strong>runid</strong>将会发生变化。如果从节点监控到<strong>runid</strong>不是同一个，它就会认为你的节点不安全。当发生故障转移的时候，如果主节点发生故障，那么从节点就会变成主节点（哨兵和集群）。</li><li>复制缓冲区空间不足，比如默认值为1M，可以部分复制，但如果缓冲区不够大的话，首先需要网络中断，部分复制将无法满足。其次需要增大复制缓冲区配置<code>repl-backlog-size</code>，对网络的缓冲增强。</li></ul><p>怎么解决：</p><ul><li>在一些场景下，可能希望对主节点进行重启，例如主节点内存碎片率过高，或者希望调整一些只能在启动时调整的参数。如果使用普通的手段重启主节点，会使得<strong>runid</strong>发生变化，可能导致不必要的全量复制。</li><li>为了解决这个问题，<strong>Redis</strong>提供了<strong>debug reload</strong>的重启方式：重启后，主节点的<strong>runid</strong>和<strong>offset</strong>都不受影响，避免了全量复制。</li></ul><h2 id="规避复制风暴"><a href="#规避复制风暴" class="headerlink" title="规避复制风暴"></a>规避复制风暴</h2><p>复制风暴是指大量从节点对同一主节点或者对同一台机器的多个主节点短时间内发起全量复制的过程。复制风暴对发起复制的主节点或者机器造成大量开销，导致 CPU、内存、带宽消耗。因此我们应该分析出复制风暴发生的场景，提前采用合理的方式规避。规避方式有如下几个。</p><h3 id="单节点复制风暴"><a href="#单节点复制风暴" class="headerlink" title="单节点复制风暴"></a>单节点复制风暴</h3><p>当一个主机下面挂了很多个 <strong>slave</strong>从机的时候，主机 <strong>master</strong> 挂了，这时 <strong>master</strong> 主机重启后，因为 <strong>runid</strong> 发生了变化，所有的 <strong>slave</strong> 从机都要做一次全量复制。这将引起单节点和单机器的复制风暴，开销会非常大。</p><p>解决：</p><ul><li>可以采用树状结构降低多个从节点对主节点的消耗。</li><li>从节点采用树状树非常有用，网络开销交给位于中间层的从节点，而不必消耗顶层的主节点。但是这种树状结构也带来了运维的复杂性，增加了手动和自动 处理故障转移的难度。</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzA1LzI2ZGMzOWNiOWRmZTUucG5n?x-oss-process=image/format,png"></p><h3 id="单机器复制风暴"><a href="#单机器复制风暴" class="headerlink" title="单机器复制风暴"></a>单机器复制风暴</h3><p>由于 <strong>Redis</strong> 的单线程架构，通常单台机器会部署多个 <strong>Redis</strong> 实例。当一台机器（<strong>machine</strong>）上同时部署多个主节点（<strong>master</strong>）时，如果每个 <strong>master</strong> 主机只有一台 <strong>slave</strong> 从机，那么当机器宕机以后，会产生大量全量复制。这种情况是非常危险的情况，带宽马上会被占用，会导致不可用。</p><p>解决：</p><ul><li>应该把主节点尽量分散在多台机器上，避免在单台机器上部署过多的主节点。 </li><li>当主节点所在机器故障后提供故障转移机制，避免机器恢复后进行密集的全量复制。</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzA1LzQ5NzJkZmFkN2EyNTEucG5n?x-oss-process=image/format,png"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>###########从库############## </p><p>#设置该数据库为其他数据库的从数据库 </p><p><code>slaveof &lt;masterip&gt; &lt;masterport&gt; </code></p><p>#主从复制中，设置连接<strong>master</strong>服务器的密码（前提<strong>master</strong>启用了认证） </p><p><code>masterauth &lt;master-password&gt; </code></p><p># 当从库同主库失去连接或者复制正在进行，从库有两种运行方式： </p><p># 1) 如果<code>slave-serve-stale-data</code>设置为<strong>yes</strong>(默认设置)，从库会继续相应客户端的请求 </p><p># 2) 如果<code>slave-serve-stale-data</code>设置为<strong>no</strong>，除了<strong>INFO</strong>和<strong>SLAVOF</strong>命令之外的任何请求都会返回一个错误”<strong>SYNC with master in progress</strong>“ </p><p><code>slave-serve-stale-data yes </code></p><p>#当主库发生宕机时候，哨兵会选择优先级最高的一个称为主库，从库优先级配置默认100，数值越小优先级越高 </p><p><code>slave-priority 100</code></p><p>#从节点是否只读；默认<strong>yes</strong>只读，为了保持数据一致性，应保持默认。</p><p><code>slave-read-only yes</code></p><p>########主库配置############## </p><p>#在<strong>slave</strong>和<strong>master</strong>同步后（发送<strong>psync</strong>/<strong>sync</strong>），后续的同步是否设置成<strong>TCP_NODELAY</strong>假如设置成<strong>yes</strong>，则<strong>redis</strong>会合并小的<strong>TCP</strong>包从而节省带宽，但会增加同步延迟（40ms），造成<strong>master</strong>与<strong>slave</strong>数据不一致假如设置成<strong>no</strong>，则<strong>redis master</strong>会立即发送同步数据，没有延迟。</p><p>#前者关注性能，后者关注一致性 </p><p><code>repl-disable-tcp-nodelay no </code></p><p>#从库会按照一个时间间隔向主库发送<strong>PING</strong>命令来判断主服务器是否在线，默认是10秒 </p><p><code>repl-ping-slave-period 10</code> </p><p>#复制积压缓冲区大小设置 </p><p><code>repl-backlog-size 1mb</code> </p><p>#<strong>master</strong>没有<strong>slave</strong>一段时间会释放复制缓冲区的内存，<code>repl-backlog-ttl</code>用来设置该时间长度。单位为秒。 </p><p><code>repl-backlog-ttl 3600</code></p><p>#<strong>redis</strong>提供了可以让<strong>master</strong>停止写入的方式，如果配置了<code>min-slaves-to-write</code>，健康的<strong>slave</strong>的个数小于<strong>N</strong>，<strong>mater</strong>就禁止写入。<strong>master</strong>最少得有多少个健康的<strong>slave</strong>存活才能执行写命令。这个配置虽然不能保证<strong>N</strong>个<strong>slave</strong>都一定能接收到<strong>master</strong>的写操作，但是能避免没有足够健康的slave的时候，<strong>master</strong>不能写入来避免数据丢失。设置为0是关闭该功能。 </p><p><code>min-slaves-to-write 3</code></p><p><code>min-slaves-max-lag 10</code> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;主从复制的常用相关配置&quot;&gt;&lt;a href=&quot;#主从复制的常用相关配置&quot; class=&quot;headerlink&quot; title=&quot;主从复制的常用相关配置&quot;&gt;&lt;/a&gt;主从复制的常用相关配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Slaveof&lt;/p&gt;
&lt;p&gt;&lt;code&gt;slav</summary>
      
    
    
    
    <category term="Redis" scheme="https://stitch.cn/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>redis主从之全量复制及增量复制</title>
    <link href="https://stitch.cn/2020/06/04/redis%E4%B8%BB%E4%BB%8E%E4%B9%8B%E5%85%A8%E9%87%8F%E5%A4%8D%E5%88%B6%E5%8F%8A%E5%A2%9E%E9%87%8F%E5%A4%8D%E5%88%B6.html"/>
    <id>https://stitch.cn/2020/06/04/redis%E4%B8%BB%E4%BB%8E%E4%B9%8B%E5%85%A8%E9%87%8F%E5%A4%8D%E5%88%B6%E5%8F%8A%E5%A2%9E%E9%87%8F%E5%A4%8D%E5%88%B6.html</id>
    <published>2020-06-04T00:15:22.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主从注意事项"><a href="#主从注意事项" class="headerlink" title="主从注意事项"></a>主从注意事项</h2><p>对于主从复制的好处，在上篇文章我也写了，下面说一下注意事项。</p><p><strong>注意事项</strong>：</p><ul><li><p>安全</p><p>对于数据比较重要的节点，主节点会通过设置<code>requirepass</code>参数进行密码验证，这时候所有的客户端访问必须使用<code>auth</code>命令进行验证。从节点与主节点的复制链接是通过一个特殊标识的客户端来完成。因此需要配置从节点的<code>masterauth</code>参数与主节点密码保持一致，这样从节点才可以正确地链接到主节点并发起复制流程。</p></li><li><p>从节点只读</p><p>默认情况下<code>slave-read-only=yes</code>配置为只读，由于复制只能从主节点到从节点，对于从节点的任何修改主节点都无法感知，修改从节点会造成主从数据不一致。因此没必要就不要动这个配置。</p></li><li><p>网络延迟问题</p><p>主从节点一般部署在不同机器上，复制时的网络延迟就成为需要考虑的问题，redis为我们提供了<code>repl-disable-tcp-nodelay</code>参数用于控制是否关闭 tcp nodelay，默认是关闭的，说明如下：</p><blockquote><p>当<strong>关闭</strong>时，主节点产生的命令数据无论大小都会及时地发送给从节点，这样主从之间延迟将会变小，但增加了网络宽带的消耗。适用于主从之间的网络环境较好的场景。</p><p>当<strong>开启</strong>时，主节点会合并较小的TCP数据包从而节省宽带。默认发送时间间隔取决于Linux的内核，一般默认为40ms。这种配置节省了宽带但增大主从之间的延迟。适用于主从网络环境复杂或宽带紧张的场景。</p></blockquote></li></ul><p>部署主从节点时需要考虑网络延迟、宽带使用率、防灾级别等因素，如要求低延迟时，建议同机房部署并关闭<code>repl-disable-tcp-nodelay</code>，如考虑容灾性，可以跨机房部署并开启<code>repl-disable-tcp-nodelay</code>。</p><h2 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h2><h3 id="一主一从"><a href="#一主一从" class="headerlink" title="一主一从"></a>一主一从</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">graph TD</span><br><span class="line"></span><br><span class="line">A[Redis-master] --&gt; B[Redis-slave]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="一主多从"><a href="#一主多从" class="headerlink" title="一主多从"></a>一主多从</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line"></span><br><span class="line">A[Redis-master] --&gt; B[Redis-slave]</span><br><span class="line">A[Redis-master] --&gt; C[Redis-slave]</span><br><span class="line">A[Redis-master] --&gt; D[Redis-slave]</span><br></pre></td></tr></table></figure><h3 id="树状主从"><a href="#树状主从" class="headerlink" title="树状主从"></a>树状主从</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line"></span><br><span class="line">A[Redis-master] --&gt; B[Redis-slave]</span><br><span class="line">A[Redis-master] --&gt; C[Redis-slave]</span><br><span class="line">B[Redis-slave] --&gt; D[Redis-slave]</span><br><span class="line">B[Redis-slave] --&gt; E[Redis-slave]</span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line"></span><br><span class="line">A[slaveof] --&gt;|127.0.0.1:6379| B[slave]</span><br><span class="line">B[slave] --&gt; D[保存主节点信息]</span><br><span class="line">D[保存主节点信息] --&gt; E[主从建立socket连接]</span><br><span class="line">E[主从建立socket连接] --&gt; F[发送ping命令]</span><br><span class="line">F[发送ping命令] --&gt; G[权限验证]</span><br><span class="line">G[权限验证] --&gt; H[同步数据集]</span><br><span class="line">H[同步数据集] --&gt; I[命令持续复制]</span><br><span class="line">I[命令持续复制] --&gt; J[master]</span><br></pre></td></tr></table></figure><p>从上图可以看出来大致分为6个过程：</p><ul><li>执行slaveof后从节点保存主节点的地址信息便返回，这时候复制流程还没开始。</li><li>从节点内部通过每秒运行的定时任务维护复制相关逻辑，当定时任务发现存在新的主节点后，会尝试与该节点建立网络连接，从节点会建立一个socket套接字。</li><li>发送ping命令，检测主从之间网络套接字是否可用，检测主节点是否可用接受处理命令。如果发送 ping 命令后，从节点没有收到主节点的 pong 回复或者超时，比如网络超时或者主节点正在阻塞无法响应命令，从节点会断开复制连接，下次定时任务会发起重连。</li><li>如果主节点配置了<code>requirepass</code>参数，则需要密码认证，从节点必须配置<code>masterauth</code>参数保证与主节点相同的密码才能通过验证。</li><li>主从复制连接正常通信后，对于首次建立复制的场景，主节点会把持有的数据全部发送给从节点，这部分操作是耗时最长的步骤。 </li><li>当主节点把当前的数据同步给从节点后，便完成了复制的建立流程。接下来主节点会持续地把写命令发送给从节点，保证主从数据一致性。 </li></ul><blockquote><p>主从同步的过程中，从节点会把原来的数据清空。</p></blockquote><h2 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h2><p>同步方式：</p><ul><li><p>全量复制</p><p>用于初次复制或其它无法进行部分复制的情况，将主节点中的所有数据都发送给从节点。当数据量过大的时候，会造成很大的网络开销。</p></li><li><p>部分复制</p><p>用于处理在主从复制中因网络闪退等原因造成数据丢失场景，当从节点再次连上主节点，如果条件允许，主节点会补发丢失数据给从节点，因为补发的数据远远小于全量数据，可以有效避免全量复制的过高开销。但需要注意，如果网络中断时间过长，造成主节点没有能够完整地保存中断期间执行的写命令，则无法进行部分复制，仍使用全量复制 。</p></li></ul><p>复制偏移量：</p><ul><li><p>参与复制的主从节点都会维护自身复制偏移量，主节点在处理完写入命令操作后，会把命令的字节长度做累加记录，统计信息在<code>info replication</code>中的<code>master_repl_offset</code>指标中。</p></li><li><p>从节点每秒钟上报自身的复制偏移量给主节点，因此主节点也会保存从节点的复制偏移量<code>slave0:ip=192.168.1.3,port=6379,state=online,offset=116424,lag=0</code></p></li><li><p>从节点在接收到主节点发送的命令后，也会累加记录自身的偏移量。统计信息在<code>info replication</code>中的<code>slave_repl_offset</code>中。</p></li></ul><p>复制积压缓冲区：</p><ul><li>复制积压缓冲区是保存在主节点上的一个固定长度的队列，默认大小为1MB，当主节点有连接的从节点时被创建，这时主节点响应写命令时，不但会把命令发给从节点，还会写入复制积压缓冲区。</li><li>在命令传播阶段，主节点除了将写命令发送给从节点，还会发送一份给复制积压缓冲区，作为写命令的备份；除了存储写命令，复制积压缓冲区中还存储了其中 的每个字节对应的复制偏移量(offset) 。由于复制积压缓冲区定长且先进先出，所以它保存的是主节点最近执行的写命令；时间较早的写命令会被挤出缓冲区。</li></ul><p>主节点运行ID：</p><ul><li>每个redis节点启动后都会动态分配一个40位的十六进制字符串为运行ID。运行ID的主要作用是来唯一识别redis节点，比如从节点保存主节点的运行ID识别自已正在复制是哪个主节点。如果只使用ip+port的方式识别主节点，那么主节点重启变更了整体数据集（如替换RDB/AOF文件），从节点再基于偏移量复制数据将是不安全的，因此当运行ID变化后从节点将做全量复制。可以在<code>info server</code>命令查看当前节点的运行ID。</li><li>需要注意的是redis关闭再启动，运行的id会随之变化。</li></ul><p>Psync命令：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzAzL2Q4ZjA2Mjc5YzdlYzQucG5n?x-oss-process=image/format,png"></p><ul><li>从节点使用<code>psync</code>命令完成部分复制和全量复制功能<code>psync runid offset</code></li><li>流程说明：<ul><li> 从节点(slave)发送psync命令给主节点，参数runid是当前从节点保存的主节点运行id，如果没有则默认值为 ？, 参数offset是当前从节点保存的复制偏移量，如果是第一次参与复制则默认值为-1。</li><li>主节点根据<code>pysnc</code>参数和自身数据情况决定响应结果：<ul><li>如果回复+FULLRESYNC {runid} {offset}，那么从节点将触发全量复制流程。</li><li>如果回复+CONTINUE，从节点将触发部分复制流程。</li><li>如果回复-ERR，说明主节点版本低于Redis2.8。</li></ul></li></ul></li></ul><p>全量复制流程：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzAzLzczNTFiMzg5NTRhYjkucG5n?x-oss-process=image/format,png"></p><ul><li>发送psync命令进行数据同步，由于是第一次进行复制，从节点没有复制偏移量和主节点的运行id，所以发送psync ? -1 </li><li> 主节点根据psync ? -1解析出当前为全量复制，回复+FULLRESYNC响应(主机会向从机发送 runid 和 offset，因为 slave 并没有对应的 offset，所以是全量复制)</li><li>从节点接收主节点的响应数据保存运行ID和偏移量offset(从机 slave 会保存 主机master 的基本信息 save masterInfo)</li><li>主节点收到全量复制的命令后，执行bgsave（异步执行），在后台生成RDB文件（快照），并使用一个缓冲区（称为复制缓冲区）记录从现在开始执行的所有写命令</li><li>主节点发送RDB文件给从节点，从节点把接收到的RDB文件保存在本地并直接作为从节点的数据文件，接收完RDB后从节点打印相关日志，可以在日志中查看主节点发送的数据量(主机send RDB 发送 RDB 文件给从机)<ul><li>注意！对于数据量较大的主节点，比如生成的RDB文件超过6GB以上时要格外小心。传输文件这一步操作非常耗时，速度取决于主从节点之间网络带宽。</li><li>通过细致分析Full resync和MASTER &lt;-&gt; SLAVE这两行日志的时间差，可以算出RDB文件从创建到传输完毕消耗的总时间。如果总时间超过repl-timeout所配置的值 (默认60秒)，从节点将放弃接受RDB文件并清理已经下载的临时文件，导致全量复制失败;针对数据量较大的节点，建议调大repl-timeout参数防止出现全量同步数据超时; </li><li>例如对于千兆网卡的机器，网卡带宽理论峰值大约每秒传输100MB,在不考虑其他进程消耗带宽的情况下，6GB的RDB文件至少需要60秒传输时间，默认配置下，极易出现主从数同步超时。</li></ul></li><li>对于从节点开始接收RDB快照到接收完成期间，主节点仍然响应读写命令，因此主节点会把这期间写命令数据保存在复制客户端缓冲区内，当从节点加载完RDB文件后，主节点再把缓冲区内的数据发送给从节点，保证主从之间数据致性。(发送缓冲区数据) </li><li>从节点接收完主节点传送来的全部数据后会清空自身旧数据(刷新旧的数据，从节点在载入主节点的数据之前要先将老数据清除) </li><li>从节点清空数据后开始加载RDB文件，对于较大的RDB文件，这一步操作依然比较消耗时间，可以通过计算日志之间的实际差来判断加载RDB的总消耗时间(加载 RDB 文件将数据库状态更新至主节点执行bgsave时的数据库状态和缓冲区数据的加载。)</li><li>从节点成功加载完RDB后，如果当前节点开启了AOF持久化的功能，它会立刻做bgrewriteeaof的操作，为了保证全量复制后AOF持久化文件立刻可用。 通过分析全量复制的所有流程，全量复制是一个非常耗时费力的操作。他的实际开销主要包括： <ul><li>主节点bgsave时间</li><li>RDB文件网络传输时间</li><li>从节点清空数据时间</li><li>从节点加载RDB的时间</li><li>可能的AOF重写时间</li></ul></li></ul><p>部分复制流程：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzA0LzY1YjBlNzYzZjRmZDIucG5n?x-oss-process=image/format,png"></p><ul><li><p>部分复制是 Redis 2.8 以后出现的，之所以要加入部分复制，是因为全量复制会产生很多问题，比如像上面的时间开销大、无法隔离等问题， Redis 希望能够在主节点出现抖动（相当于断开连接）的时候，可以有一些机制将复制的损失降低到最低</p></li><li><p>当主从节点之间网络出现中断时，如果超过repl-timeout时间，主节点会认为从节点出问题了并断开复制链接（如果网络抖动（连接断开 connection lost））。</p></li><li><p>主从连接中断期间主节点依然响应命令，但因复制链接中断命令无法发送给从节点不过主节点内部存在的复制积压缓存去，依然可以保存一段时间的写命令数据，默认最大缓存1MB(主机master 还是会写 replbackbuffer（复制缓冲区）) </p></li><li><p>当主从节点网络恢复后，从节点会再次连上主节点。(从机slave会继续尝试连接主机)</p></li><li><p>当主从连接恢复后，由于从节点之前保存了自身已复制的偏移量和主节点的运行id。因此会把他们当作psync参数发送给主节点，要求进行部分复制操作。(从机 slave 会把自己当前 runid 和偏移量传输给主机 master，并且执行 pysnc 命令同步) </p></li><li><p>主节点接到psync命令后首先核对参数的runid，如果 master 发现你的偏移量是在缓冲区的范围内，根据参数offset在缓冲区查找复制内内，如果在偏移量之后的数据存在缓存区中，则对从节点发送continue表示可以进行部分复制 </p></li><li><p>主节点根据偏移量把复制积压缓冲区里的数据发送给从节点，保证主从复制进入正常状态。(同步了 offset 的部分数据，所以部分复制的基础就是偏移量 offset) </p></li></ul><p>心跳：</p><blockquote><p>主节点在建立成功后会维护这长连接彼此发送心跳检测</p></blockquote><ul><li>主从节点彼此都有心跳检测机制，各自模拟成对方的客户端进行通信，通过client list命令查看复制相关客户端信息，主节点的连接状态为flags=M,从节点连接状态 flags=S。</li><li>主节点默认每隔10秒对从节点发送ping命令，判断从节点的存活性和连接状态。可通过参数repl-ping-slave-period控制发送频率。</li><li>从节点在主线程中每隔1秒发送replconf ack {offset} 命令，给主节点上报自身当前的复制偏移量。</li></ul><p>缓冲区大小调节：</p><ul><li>由于缓冲区长度固定且有限，因此可以备份的写命令也有限，当主从节点offset的差距过大超过缓冲区长度时，将无法执行部分复制，只能执行全量复制。</li><li>反过来说，为了提高网络中断时部分复制执行的概率，可以根据需要增大复制积压缓冲区的大小(通过配置repl-backlog-size)来设置； </li><li>例如 如果网络中断的平均时间是 60s，而主节点平均每秒产生的写命令(特定协议格式)所占的字节数为100KB，则复制积压缓冲区的平均需求为6MB，保险起见， 可以设置为12MB，来保证绝大多数断线情况都可以使用部分复制。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;主从注意事项&quot;&gt;&lt;a href=&quot;#主从注意事项&quot; class=&quot;headerlink&quot; title=&quot;主从注意事项&quot;&gt;&lt;/a&gt;主从注意事项&lt;/h2&gt;&lt;p&gt;对于主从复制的好处，在上篇文章我也写了，下面说一下注意事项。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事项&lt;/st</summary>
      
    
    
    
    <category term="uncategorized" scheme="https://stitch.cn/categories/uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>Go常见架构模式的实现</title>
    <link href="https://stitch.cn/2020/05/31/go%E5%B8%B8%E8%A7%81%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0.html"/>
    <id>https://stitch.cn/2020/05/31/go%E5%B8%B8%E8%A7%81%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0.html</id>
    <published>2020-05-31T16:55:36.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现pipe-filter-framework"><a href="#实现pipe-filter-framework" class="headerlink" title="实现pipe-filter framework"></a>实现pipe-filter framework</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzMxL2I3MWU3ZjRjNDliMTQucG5n?x-oss-process=image/format,png"></p><p>Pipe-Filter 模式：</p><ul><li>⾮常适合与数据处理及数据分析系统</li><li>Filter封装数据处理的功能</li><li>Pipe⽤于连接Filter传递数据或者在异步处理过程中缓冲数据流</li><li>进程内同步调⽤时，pipe演变为数据在⽅法调⽤间传递</li><li>松耦合：Filter只跟数据（格式）耦合</li></ul><p>Filter和组合模式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzMxL2JjYmI5MWRiNTJhZGQucG5n?x-oss-process=image/format,png"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzMxLzY4N2IxNWEzNGU5MmQucG5n?x-oss-process=image/format,png"></p><p>示例：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzMxL2FjZjMyODk5NWI1NDcucG5n?x-oss-process=image/format,png"></p><p>简单示例代码：</p><p><code>filter.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package pipefilter is to define the interfaces and the structures for pipe-filter style implementation</span></span><br><span class="line"><span class="keyword">package</span> pipefilter</span><br><span class="line"></span><br><span class="line"><span class="comment">// Request is the input of the filter</span></span><br><span class="line"><span class="keyword">type</span> Request <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Response is the output of the filter</span></span><br><span class="line"><span class="keyword">type</span> Response <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Filter interface is the definition of the data processing components</span></span><br><span class="line"><span class="comment">// Pipe-Filter structure</span></span><br><span class="line"><span class="keyword">type</span> Filter <span class="keyword">interface</span> &#123;</span><br><span class="line">Process(data Request) (Response, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>split_filter.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pipefilter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> SplitFilterWrongFormatError = errors.New(<span class="string">&quot;input data should be string&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SplitFilter <span class="keyword">struct</span> &#123;</span><br><span class="line">delimiter <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSplitFilter</span><span class="params">(delimiter <span class="keyword">string</span>)</span> *<span class="title">SplitFilter</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;SplitFilter&#123;delimiter&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sf *SplitFilter)</span> <span class="title">Process</span><span class="params">(data Request)</span> <span class="params">(Response, error)</span></span> &#123;</span><br><span class="line">str, ok := data.(<span class="keyword">string</span>) <span class="comment">//检查数据格式/类型，是否可以处理</span></span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, SplitFilterWrongFormatError</span><br><span class="line">&#125;</span><br><span class="line">parts := strings.Split(str, sf.delimiter)</span><br><span class="line"><span class="keyword">return</span> parts, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>split_filter_test.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pipefilter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStringSplit</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">sf := NewSplitFilter(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">resp, err := sf.Process(<span class="string">&quot;1,2,3&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">parts, ok := resp.([]<span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">&quot;Repsonse type is %T, but the expected type is string&quot;</span>, parts)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !reflect.DeepEqual(parts, []<span class="keyword">string</span>&#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>&#125;) &#123;</span><br><span class="line">t.Errorf(<span class="string">&quot;Expected value is &#123;\&quot;1\&quot;,\&quot;2\&quot;,\&quot;3\&quot;&#125;, but actual is %v&quot;</span>, parts)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestWrongInput</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">sf := NewSplitFilter(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">_, err := sf.Process(<span class="number">123</span>)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(<span class="string">&quot;An error is expected.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现micro-kernel-framework"><a href="#实现micro-kernel-framework" class="headerlink" title="实现micro-kernel framework"></a>实现micro-kernel framework</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzMxLzMzYmU0MjlhMzRjYWEucG5n?x-oss-process=image/format,png"></p><ul><li><p>特点</p><ul><li>易于扩展</li><li>错误隔离</li><li>保持架构⼀致性</li></ul></li><li><p>要点</p></li><li><p>内核包含公共流程或通⽤逻辑</p><ul><li>将可变或可扩展部分规划为扩展点</li></ul></li><li><p>抽象扩展点⾏为，定义接⼝</p><ul><li>利⽤插件进⾏扩展</li></ul></li></ul><p>示例：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzMxLzhjZjE1NTllNjNlMDIucG5n?x-oss-process=image/format,png"></p><p>简单示例代码：</p><p><code>agent.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> microkernel</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">Waiting = <span class="literal">iota</span></span><br><span class="line">Running</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> WrongStateError = errors.New(<span class="string">&quot;can not take the operation in the current state&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CollectorsError <span class="keyword">struct</span> &#123;</span><br><span class="line">CollectorErrors []error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ce CollectorsError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> strs []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">for</span> _, err := <span class="keyword">range</span> ce.CollectorErrors &#123;</span><br><span class="line">strs = <span class="built_in">append</span>(strs, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> strings.Join(strs, <span class="string">&quot;;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Event <span class="keyword">struct</span> &#123;</span><br><span class="line">Source  <span class="keyword">string</span></span><br><span class="line">Content <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> EventReceiver <span class="keyword">interface</span> &#123;</span><br><span class="line">OnEvent(evt Event)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Collector <span class="keyword">interface</span> &#123;</span><br><span class="line">Init(evtReceiver EventReceiver) error</span><br><span class="line">Start(agtCtx context.Context) error</span><br><span class="line">Stop() error</span><br><span class="line">Destory() error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Agent <span class="keyword">struct</span> &#123;</span><br><span class="line">collectors <span class="keyword">map</span>[<span class="keyword">string</span>]Collector</span><br><span class="line">evtBuf     <span class="keyword">chan</span> Event</span><br><span class="line">cancel     context.CancelFunc</span><br><span class="line">ctx        context.Context</span><br><span class="line">state      <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(agt *Agent)</span> <span class="title">EventProcessGroutine</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> evtSeg [<span class="number">10</span>]Event</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> evtSeg[i] = &lt;-agt.evtBuf:</span><br><span class="line"><span class="keyword">case</span> &lt;-agt.ctx.Done():</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(evtSeg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewAgent</span><span class="params">(sizeEvtBuf <span class="keyword">int</span>)</span> *<span class="title">Agent</span></span> &#123;</span><br><span class="line">agt := Agent&#123;</span><br><span class="line">collectors: <span class="keyword">map</span>[<span class="keyword">string</span>]Collector&#123;&#125;,</span><br><span class="line">evtBuf:     <span class="built_in">make</span>(<span class="keyword">chan</span> Event, sizeEvtBuf),</span><br><span class="line">state:      Waiting,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;agt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(agt *Agent)</span> <span class="title">RegisterCollector</span><span class="params">(name <span class="keyword">string</span>, collector Collector)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> agt.state != Waiting &#123;</span><br><span class="line"><span class="keyword">return</span> WrongStateError</span><br><span class="line">&#125;</span><br><span class="line">agt.collectors[name] = collector</span><br><span class="line"><span class="keyword">return</span> collector.Init(agt)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(agt *Agent)</span> <span class="title">startCollectors</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">var</span> errs CollectorsError</span><br><span class="line"><span class="keyword">var</span> mutex sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, collector := <span class="keyword">range</span> agt.collectors &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>, collector Collector, ctx context.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">mutex.Unlock()</span><br><span class="line">&#125;()</span><br><span class="line">err = collector.Start(ctx)</span><br><span class="line">mutex.Lock()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">errs.CollectorErrors = <span class="built_in">append</span>(errs.CollectorErrors,</span><br><span class="line">errors.New(name+<span class="string">&quot;:&quot;</span>+err.Error()))</span><br><span class="line">&#125;</span><br><span class="line">&#125;(name, collector, agt.ctx)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(errs.CollectorErrors) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> errs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(agt *Agent)</span> <span class="title">stopCollectors</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">var</span> errs CollectorsError</span><br><span class="line"><span class="keyword">for</span> name, collector := <span class="keyword">range</span> agt.collectors &#123;</span><br><span class="line"><span class="keyword">if</span> err = collector.Stop(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">errs.CollectorErrors = <span class="built_in">append</span>(errs.CollectorErrors,</span><br><span class="line">errors.New(name+<span class="string">&quot;:&quot;</span>+err.Error()))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(errs.CollectorErrors) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> errs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(agt *Agent)</span> <span class="title">destoryCollectors</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">var</span> errs CollectorsError</span><br><span class="line"><span class="keyword">for</span> name, collector := <span class="keyword">range</span> agt.collectors &#123;</span><br><span class="line"><span class="keyword">if</span> err = collector.Destory(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">errs.CollectorErrors = <span class="built_in">append</span>(errs.CollectorErrors,</span><br><span class="line">errors.New(name+<span class="string">&quot;:&quot;</span>+err.Error()))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(errs.CollectorErrors) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> errs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(agt *Agent)</span> <span class="title">Start</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> agt.state != Waiting &#123;</span><br><span class="line"><span class="keyword">return</span> WrongStateError</span><br><span class="line">&#125;</span><br><span class="line">agt.state = Running</span><br><span class="line">agt.ctx, agt.cancel = context.WithCancel(context.Background())</span><br><span class="line"><span class="keyword">go</span> agt.EventProcessGroutine()</span><br><span class="line"><span class="keyword">return</span> agt.startCollectors()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(agt *Agent)</span> <span class="title">Stop</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> agt.state != Running &#123;</span><br><span class="line"><span class="keyword">return</span> WrongStateError</span><br><span class="line">&#125;</span><br><span class="line">agt.state = Waiting</span><br><span class="line">agt.cancel()</span><br><span class="line"><span class="keyword">return</span> agt.stopCollectors()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(agt *Agent)</span> <span class="title">Destory</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> agt.state != Waiting &#123;</span><br><span class="line"><span class="keyword">return</span> WrongStateError</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> agt.destoryCollectors()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(agt *Agent)</span> <span class="title">OnEvent</span><span class="params">(evt Event)</span></span> &#123;</span><br><span class="line">agt.evtBuf &lt;- evt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>agent_test.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> microkernel</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DemoCollector <span class="keyword">struct</span> &#123;</span><br><span class="line">evtReceiver EventReceiver</span><br><span class="line">agtCtx      context.Context</span><br><span class="line">stopChan    <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">name        <span class="keyword">string</span></span><br><span class="line">content     <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCollect</span><span class="params">(name <span class="keyword">string</span>, content <span class="keyword">string</span>)</span> *<span class="title">DemoCollector</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;DemoCollector&#123;</span><br><span class="line">stopChan: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">name:     name,</span><br><span class="line">content:  content,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *DemoCollector)</span> <span class="title">Init</span><span class="params">(evtReceiver EventReceiver)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;initialize collector&quot;</span>, c.name)</span><br><span class="line">c.evtReceiver = evtReceiver</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *DemoCollector)</span> <span class="title">Start</span><span class="params">(agtCtx context.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;start collector&quot;</span>, c.name)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-agtCtx.Done():</span><br><span class="line">c.stopChan &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">50</span>)</span><br><span class="line">c.evtReceiver.OnEvent(Event&#123;c.name, c.content&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *DemoCollector)</span> <span class="title">Stop</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;stop collector&quot;</span>, c.name)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-c.stopChan:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Second * <span class="number">1</span>):</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;failed to stop for timeout&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *DemoCollector)</span> <span class="title">Destory</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(c.name, <span class="string">&quot;released resources.&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAgent</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">agt := NewAgent(<span class="number">100</span>)</span><br><span class="line">c1 := NewCollect(<span class="string">&quot;c1&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">c2 := NewCollect(<span class="string">&quot;c2&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">agt.RegisterCollector(<span class="string">&quot;c1&quot;</span>, c1)</span><br><span class="line">agt.RegisterCollector(<span class="string">&quot;c2&quot;</span>, c2)</span><br><span class="line"><span class="keyword">if</span> err := agt.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;start error %v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(agt.Start())</span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">agt.Stop()</span><br><span class="line">agt.Destory()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实现pipe-filter-framework&quot;&gt;&lt;a href=&quot;#实现pipe-filter-framework&quot; class=&quot;headerlink&quot; title=&quot;实现pipe-filter framework&quot;&gt;&lt;/a&gt;实现pipe-filter fra</summary>
      
    
    
    
    <category term="Go" scheme="https://stitch.cn/categories/Go/"/>
    
    
  </entry>
  
  <entry>
    <title>Go反射编程</title>
    <link href="https://stitch.cn/2020/05/31/go%E5%8F%8D%E5%B0%84%E7%BC%96%E7%A8%8B.html"/>
    <id>https://stitch.cn/2020/05/31/go%E5%8F%8D%E5%B0%84%E7%BC%96%E7%A8%8B.html</id>
    <published>2020-05-31T00:37:19.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<p>reflect.TypeOf vs. reflect.ValueOf：</p><ul><li>reflflect.TypeOf 返回类型 (reflflect.Type)</li><li>reflflect.ValueOf 返回值 (reflflect.Value)</li><li>可以从 reflflect.Value 获得类型</li><li>通过 kind 的来判断类型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckType</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">t := reflect.TypeOf(v)</span><br><span class="line"><span class="keyword">switch</span> t.Kind() &#123;</span><br><span class="line"><span class="keyword">case</span> reflect.Float32, reflect.Float64:</span><br><span class="line">fmt.Println(<span class="string">&quot;Float&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> reflect.Int, reflect.Int32, reflect.Int64:</span><br><span class="line">fmt.Println(<span class="string">&quot;Integer&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;Unknown&quot;</span>, t)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestBasicType</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="number">12</span></span><br><span class="line">CheckType(f)</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestBasicType</span></span><br><span class="line"><span class="comment">Float</span></span><br><span class="line"><span class="comment">--- PASS: TestBasicType (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用反射编写灵活的代码：</p><ul><li><p>按名字访问结构的成员</p><p><code>reflect.ValueOf(*e).FieldByName(&quot;Name&quot;)</code></p></li><li><p>按名字访问结构的方法</p><p><code>reflect.ValueOf(*e).MethodByName(&quot;UpdateAge&quot;).Call([]reflect.Value&#123;reflect.ValueOf(1)&#125;)</code></p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">EmployeeId <span class="keyword">string</span></span><br><span class="line">Name       <span class="keyword">string</span> <span class="string">`format:&quot;normal&quot;`</span></span><br><span class="line">Age        <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Employee)</span> <span class="title">UpdateAge</span><span class="params">(newVal <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">e.Age = newVal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestInvokeByName</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">e := &amp;Employee&#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;Mike&quot;</span>, <span class="number">30</span>&#125;</span><br><span class="line"><span class="comment">// 按名字获取成员</span></span><br><span class="line">t.Logf(<span class="string">&quot;Name：value(%[1]v)，Type(%[1]T)&quot;</span>, reflect.ValueOf(*e).FieldByName(<span class="string">&quot;Name&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> nameField, ok := reflect.TypeOf(*e).FieldByName(<span class="string">&quot;Name&quot;</span>); !ok &#123;</span><br><span class="line">t.Error(<span class="string">&quot;Failed to get &#x27;Name&#x27; field.&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">t.Log(<span class="string">&quot;Tag:format&quot;</span>, nameField.Tag.Get(<span class="string">&quot;format&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line">reflect.ValueOf(e).MethodByName(<span class="string">&quot;UpdateAge&quot;</span>).Call([]reflect.Value&#123;reflect.ValueOf(<span class="number">1</span>)&#125;)</span><br><span class="line">t.Log(<span class="string">&quot;Updated Age:&quot;</span>, e)</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestInvokeByName</span></span><br><span class="line"><span class="comment">    TestInvokeByName: reflect_test.go:28: Name：value(Mike)，Type(reflect.Value)</span></span><br><span class="line"><span class="comment">    TestInvokeByName: reflect_test.go:32: Tag:format normal</span></span><br><span class="line"><span class="comment">    TestInvokeByName: reflect_test.go:35: Updated Age: &amp;&#123;1 Mike 1&#125;</span></span><br><span class="line"><span class="comment">--- PASS: TestInvokeByName (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Struct Tag：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BasicInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">  Age <span class="keyword">int</span> <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问Struct：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> nameField, ok := reflect.TypeOf(*e).FieldByName(<span class="string">&quot;Name&quot;</span>); !ok &#123;</span><br><span class="line">t.Error(<span class="string">&quot;Failed to get &#x27;Name&#x27; field.&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">t.Log(<span class="string">&quot;Tag:format&quot;</span>, nameField.Tag.Get(<span class="string">&quot;format&quot;</span>)) &#125;</span><br></pre></td></tr></table></figure><p>Reflect.Type 和 Reflflect.Value 都有 FieldByName ⽅法，注意他们的区别。</p><p>DeepEqual：</p><p>比较切片和map</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Customer <span class="keyword">struct</span> &#123;</span><br><span class="line">CookieID <span class="keyword">string</span></span><br><span class="line">Name     <span class="keyword">string</span></span><br><span class="line">Age      <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDeepEqual</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">a := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;<span class="number">1</span>: <span class="string">&quot;one&quot;</span>, <span class="number">2</span>: <span class="string">&quot;two&quot;</span>, <span class="number">3</span>: <span class="string">&quot;three&quot;</span>&#125;</span><br><span class="line">b := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;<span class="number">1</span>: <span class="string">&quot;one&quot;</span>, <span class="number">2</span>: <span class="string">&quot;two&quot;</span>, <span class="number">4</span>: <span class="string">&quot;three&quot;</span>&#125;</span><br><span class="line">fmt.Println(reflect.DeepEqual(a, b))</span><br><span class="line"></span><br><span class="line">s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s3 := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;</span><br><span class="line">t.Log(<span class="string">&quot;s1 == s2?&quot;</span>, reflect.DeepEqual(s1, s2))</span><br><span class="line">t.Log(<span class="string">&quot;s1 == s3?&quot;</span>, reflect.DeepEqual(s1, s3))</span><br><span class="line"></span><br><span class="line">c1 := Customer&#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;Mike&quot;</span>, <span class="number">40</span>&#125;</span><br><span class="line">c2 := Customer&#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;Mike&quot;</span>, <span class="number">40</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(reflect.DeepEqual(c1, c2))</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestDeepEqual</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">    TestDeepEqual: fiexible_reflect_test.go:23: s1 == s2? true</span></span><br><span class="line"><span class="comment">    TestDeepEqual: fiexible_reflect_test.go:24: s1 == s3? false</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">--- PASS: TestDeepEqual (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于“反射”你应该知道的：</p><ul><li><p>提⾼了程序的灵活性</p></li><li><p>降低了程序的可读性</p></li><li><p>降低了程序的性能</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">EmployeeID <span class="keyword">string</span></span><br><span class="line">Name       <span class="keyword">string</span> <span class="string">`format:&quot;normal&quot;`</span></span><br><span class="line">Age        <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Employee)</span> <span class="title">UpdateAge</span><span class="params">(newVal <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">e.Age = newVal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Customer <span class="keyword">struct</span> &#123;</span><br><span class="line">CookieID <span class="keyword">string</span></span><br><span class="line">Name     <span class="keyword">string</span></span><br><span class="line">Age      <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fillBySettings</span><span class="params">(st <span class="keyword">interface</span>&#123;&#125;, settings <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// func (v Value) Elem() Value</span></span><br><span class="line"><span class="comment">// Elem returns the value that the interface v contains or that the pointer v points to.</span></span><br><span class="line"><span class="comment">// It panics if v&#x27;s Kind is not Interface or Ptr.</span></span><br><span class="line"><span class="comment">// It returns the zero Value if v is nil.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> reflect.TypeOf(st).Kind() != reflect.Ptr &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;the first param should be a pointer to the struct type.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Elem() 获取指针指向的值</span></span><br><span class="line"><span class="keyword">if</span> reflect.TypeOf(st).Elem().Kind() != reflect.Struct &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;the first param should be a pointer to the struct type.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> settings == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;settings is nil.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">field reflect.StructField</span><br><span class="line">ok    <span class="keyword">bool</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> settings &#123;</span><br><span class="line"><span class="keyword">if</span> field, ok = (reflect.ValueOf(st)).Elem().Type().FieldByName(k); !ok &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> field.Type == reflect.TypeOf(v) &#123;</span><br><span class="line">vstr := reflect.ValueOf(st)</span><br><span class="line">vstr = vstr.Elem()</span><br><span class="line">vstr.FieldByName(k).Set(reflect.ValueOf(v))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFillNameAndAge</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">settings := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;Name&quot;</span>: <span class="string">&quot;Mike&quot;</span>, <span class="string">&quot;Age&quot;</span>: <span class="number">30</span>&#125;</span><br><span class="line">e := Employee&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := fillBySettings(&amp;e, settings); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">t.Log(e)</span><br><span class="line">c := <span class="built_in">new</span>(Customer)</span><br><span class="line"><span class="keyword">if</span> err := fillBySettings(c, settings); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">t.Log(*c)</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestFillNameAndAge</span></span><br><span class="line"><span class="comment">    TestFillNameAndAge: fiexible_reflect_test.go:69: &#123; Mike 30&#125;</span></span><br><span class="line"><span class="comment">    TestFillNameAndAge: fiexible_reflect_test.go:74: &#123; Mike 30&#125;</span></span><br><span class="line"><span class="comment">--- PASS: TestFillNameAndAge (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>”不安全“行为的危险性：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestUnsafe</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">i := <span class="number">10</span></span><br><span class="line">f := *(*<span class="keyword">float64</span>)(unsafe.Pointer(&amp;i))</span><br><span class="line">t.Log(unsafe.Pointer(&amp;i))</span><br><span class="line">t.Log(f)</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestUnsafe</span></span><br><span class="line"><span class="comment">    TestUnsafe: unsafe_test.go:11: 0xc000016268</span></span><br><span class="line"><span class="comment">    TestUnsafe: unsafe_test.go:12: 5e-323</span></span><br><span class="line"><span class="comment">--- PASS: TestUnsafe (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The cases is suitable for unsafe</span></span><br><span class="line"><span class="keyword">type</span> MyInt <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合理的类型转换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestConvert</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">b := *(*[]MyInt)(unsafe.Pointer(&amp;a))</span><br><span class="line">t.Log(b)</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestConvert</span></span><br><span class="line"><span class="comment">    TestConvert: unsafe_test.go:26: [1 2 3 4]</span></span><br><span class="line"><span class="comment">--- PASS: TestConvert (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原子类型操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAtomic</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> shareBuffer unsafe.Pointer</span><br><span class="line">writeDataFn := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">data := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">data = <span class="built_in">append</span>(data, i)</span><br><span class="line">&#125;</span><br><span class="line">atomic.StorePointer(&amp;shareBuffer, unsafe.Pointer(&amp;data))</span><br><span class="line">&#125;</span><br><span class="line">readDataFn := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">data := atomic.LoadPointer(&amp;shareBuffer)</span><br><span class="line">fmt.Println(data, *(*[]<span class="keyword">int</span>)(data))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">writeDataFn()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">writeDataFn()</span><br><span class="line">time.Sleep(time.Microsecond * <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">readDataFn()</span><br><span class="line">time.Sleep(time.Microsecond * <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;reflect.TypeOf vs. reflect.ValueOf：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reflflect.TypeOf 返回类型 (reflflect.Type)&lt;/li&gt;
&lt;li&gt;reflflect.ValueOf 返回值 (reflflect.Value)&lt;</summary>
      
    
    
    
    <category term="uncategorized" scheme="https://stitch.cn/categories/uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>Go单元测试及Benchmark</title>
    <link href="https://stitch.cn/2020/05/24/go%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%8F%8Abenchmark.html"/>
    <id>https://stitch.cn/2020/05/24/go%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%8F%8Abenchmark.html</id>
    <published>2020-05-24T20:47:37.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>之前在刚开始写了如何编写测试程序</p><p>内置单元测试框架：</p><ul><li><p>Fail, Error: 该测试失败，该测试继续，其他测试继续执⾏</p></li><li><p>FailNow, Fatal: 该测试失败，该测试中⽌，其他测试继续执⾏</p></li><li><p>代码覆盖率</p><p><code>go test -v -cover</code></p></li><li><p>断言</p><p><a href="https://github.com/stretchr/testify">https://github.com/stretchr/testify</a></p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestErrorInCode</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Start&quot;</span>)</span><br><span class="line">t.Error(<span class="string">&quot;Error&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;End&quot;</span>)</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestErrorInCode</span></span><br><span class="line"><span class="comment">Start</span></span><br><span class="line"><span class="comment">    TestErrorInCode: functions_test.go:25: Error</span></span><br><span class="line"><span class="comment">End</span></span><br><span class="line"><span class="comment">--- FAIL: TestErrorInCode (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFatalInCode</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Start&quot;</span>)</span><br><span class="line">t.Fatal(<span class="string">&quot;Error&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;End&quot;</span>)</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestFatalInCode</span></span><br><span class="line"><span class="comment">Start</span></span><br><span class="line"><span class="comment">    TestFatalInCode: functions_test.go:38: Error</span></span><br><span class="line"><span class="comment">--- FAIL: TestFatalInCode (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用断言：</p><p><code>go get -u github.com/stretchr/testify</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">square</span><span class="params">(op <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> op * op</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSquareWithAssert</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">inputs := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">expected := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(inputs); i++ &#123;</span><br><span class="line">ret := square(inputs[i])</span><br><span class="line">assert.Equal(t, expected[i], ret)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h2><p>文件名以下划线<code>_benchmark</code>结尾，方法名以<code>Benchmark</code>开头，参数为<code>b *testing.B</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用+=连接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestConcatStringByAdd</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">assert := assert.New(t)</span><br><span class="line">elems := []<span class="keyword">string</span>&#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>&#125;</span><br><span class="line">ret := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> _, elem := <span class="keyword">range</span> elems &#123;</span><br><span class="line">ret += elem</span><br><span class="line">&#125;</span><br><span class="line">assert.Equal(<span class="string">&quot;12345&quot;</span>, ret)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用buffer连接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestConcatStringBytesBuffer</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">assert := assert.New(t)</span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">elems := []<span class="keyword">string</span>&#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, elem := <span class="keyword">range</span> elems &#123;</span><br><span class="line">buf.WriteString(elem)</span><br><span class="line">&#125;</span><br><span class="line">assert.Equal(<span class="string">&quot;12345&quot;</span>, buf.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkConcatStringByAdd</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">elems := []<span class="keyword">string</span>&#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>&#125;</span><br><span class="line">b.ResetTimer()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">ret := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> _, elem := <span class="keyword">range</span> elems &#123;</span><br><span class="line">ret += elem</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">b.StopTimer()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkConcatStringBytesBuffer</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">elems := []<span class="keyword">string</span>&#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>&#125;</span><br><span class="line">b.ResetTimer()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line"><span class="keyword">for</span> _, elem := <span class="keyword">range</span> elems &#123;</span><br><span class="line">buf.WriteString(elem)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在命令行输入 <code>go test -bench=. -benchmem</code></p><p>Windows 下使⽤ go test 命令⾏时，-bench=.应写为-bench=”.”</p><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -bench=. -benchmem</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: eighteen/benchmark</span><br><span class="line">BenchmarkConcatStringByAdd-8             8982729               130 ns/op              16 B/op          4 allocs/op</span><br><span class="line">BenchmarkConcatStringBytesBuffer-8      17703706                64.9 ns/op            64 B/op          1 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok      eighteen/benchmark      2.532s</span><br></pre></td></tr></table></figure><p>使用 <code>buffer</code> 连接字符串的性能比 <code>+=</code> 要好很多。</p><h2 id="BDD"><a href="#BDD" class="headerlink" title="BDD"></a>BDD</h2><p>BDD in Go：</p><p>项⽬⽹站 ：</p><p><a href="https://github.com/smartystreets/goconvey">https://github.com/smartystreets/goconvey</a></p><p>安装：</p><p><code>go get -u github.com/smartystreets/goconvey/convey</code></p><p>启动 WEB UI ：</p><p><code>$GOPATH/bin/goconvey</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSpec</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">convey.Convey(<span class="string">&quot;Given 2 even numbers&quot;</span>, t, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">2</span></span><br><span class="line">b := <span class="number">4</span></span><br><span class="line">convey.Convey(<span class="string">&quot;When add the two numbers&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := a + b</span><br><span class="line">convey.Convey(<span class="string">&quot;Then the result is still even&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">convey.So(c%<span class="number">2</span>, convey.ShouldEqual, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v  bdd_spec_test.go </span><br><span class="line">=== RUN   TestSpec</span><br><span class="line"></span><br><span class="line">  Given 2 even numbers </span><br><span class="line">    When add the two numbers </span><br><span class="line">      Then the result is still even ✔</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1 total assertion</span><br><span class="line"></span><br><span class="line">--- PASS: TestSpec (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      command-line-arguments  0.006s</span><br></pre></td></tr></table></figure><p>可以看到最后一步为 ✔</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;单元测试&quot;&gt;&lt;a href=&quot;#单元测试&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;&gt;&lt;/a&gt;单元测试&lt;/h2&gt;&lt;p&gt;之前在刚开始写了如何编写测试程序&lt;/p&gt;
&lt;p&gt;内置单元测试框架：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Fail, Error:</summary>
      
    
    
    
    <category term="Go" scheme="https://stitch.cn/categories/Go/"/>
    
    
  </entry>
  
  <entry>
    <title>Go典型并发任务</title>
    <link href="https://stitch.cn/2020/05/23/go%E5%85%B8%E5%9E%8B%E5%B9%B6%E5%8F%91%E4%BB%BB%E5%8A%A1.html"/>
    <id>https://stitch.cn/2020/05/23/go%E5%85%B8%E5%9E%8B%E5%B9%B6%E5%8F%91%E4%BB%BB%E5%8A%A1.html</id>
    <published>2020-05-23T19:44:28.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="仅运行一次"><a href="#仅运行一次" class="headerlink" title="仅运行一次"></a>仅运行一次</h2><p>最容易联想到的单例模式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Singleton <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singleInstance *Singleton</span><br><span class="line"><span class="keyword">var</span> once sync.Once</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSingletonObj</span><span class="params">()</span> *<span class="title">Singleton</span></span> &#123;</span><br><span class="line">once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Create Obj&quot;</span>)</span><br><span class="line">singleInstance = <span class="built_in">new</span>(Singleton)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> singleInstance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetSingletonObj</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">obj := GetSingletonObj()</span><br><span class="line">fmt.Printf(<span class="string">&quot;%x\n&quot;</span>, unsafe.Pointer(obj))</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestGetSingletonObj</span></span><br><span class="line"><span class="comment">Create Obj</span></span><br><span class="line"><span class="comment">1269f78</span></span><br><span class="line"><span class="comment">1269f78</span></span><br><span class="line"><span class="comment">1269f78</span></span><br><span class="line"><span class="comment">1269f78</span></span><br><span class="line"><span class="comment">1269f78</span></span><br><span class="line"><span class="comment">1269f78</span></span><br><span class="line"><span class="comment">1269f78</span></span><br><span class="line"><span class="comment">1269f78</span></span><br><span class="line"><span class="comment">1269f78</span></span><br><span class="line"><span class="comment">1269f78</span></span><br><span class="line"><span class="comment">--- PASS: TestGetSingletonObj (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="仅需任意任务完成"><a href="#仅需任意任务完成" class="headerlink" title="仅需任意任务完成"></a>仅需任意任务完成</h2><p>任务堆里面，只需任务一个完成就返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runTask</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Millisecond)</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;the result is from %d&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FirstResponse</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">numOfRunner := <span class="number">10</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>) <span class="comment">// 非缓冲channel</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numOfRunner; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">ret := runTask(i)</span><br><span class="line">ch &lt;- ret</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &lt;-ch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFirstResponse</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Log(FirstResponse())</span><br><span class="line"><span class="comment">/** 第一次运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestFirstResponse</span></span><br><span class="line"><span class="comment">    TestFirstResponse: first_response_test.go:27: the result is from 0</span></span><br><span class="line"><span class="comment">--- PASS: TestFirstResponse (0.01s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/** 第二次运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestFirstResponse</span></span><br><span class="line"><span class="comment">    TestFirstResponse: first_response_test.go:27: the result is from 3</span></span><br><span class="line"><span class="comment">--- PASS: TestFirstResponse (0.01s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为协程的调度机制，所以返回结果不一样。</p><p>但这样是存在很大的问题，修改<code>TestFirstResponse</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFirstResponse</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Log(<span class="string">&quot;Before:&quot;</span>, runtime.NumGoroutine()) <span class="comment">// 获取协程数量</span></span><br><span class="line">t.Log(FirstResponse())</span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">t.Log(<span class="string">&quot;After:&quot;</span>, runtime.NumGoroutine()) <span class="comment">// 获取协程数量</span></span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestFirstResponse</span></span><br><span class="line"><span class="comment">    TestFirstResponse: first_response_test.go:28: Before: 2</span></span><br><span class="line"><span class="comment">    TestFirstResponse: first_response_test.go:29: the result is from 6</span></span><br><span class="line"><span class="comment">    TestFirstResponse: first_response_test.go:30: After: 11</span></span><br><span class="line"><span class="comment">--- PASS: TestFirstResponse (0.01s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为使用的是非缓冲<strong>channel</strong>，<code>FirstResponse</code>方法只取走了一次，往<strong>channel</strong>放入数据的时候，没有被取走，会造成阻塞。</p><p>修改非缓冲<strong>channel</strong> 为缓冲<strong>channel</strong>就行，否则会造成资源耗尽。</p><h2 id="所有任务完成"><a href="#所有任务完成" class="headerlink" title="所有任务完成"></a>所有任务完成</h2><p>之前都是用<code>sync.waitGroup</code>实现，这次利用csp机制实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runTask</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Millisecond)</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;the result is from %d&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AllResponse</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">numOfRunner := <span class="number">10</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>) <span class="comment">// 非缓冲channel</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numOfRunner; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">ret := runTask(i)</span><br><span class="line">ch &lt;- ret</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">finalRet := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numOfRunner; i++ &#123;</span><br><span class="line">finalRet += &lt;-ch + <span class="string">&quot;\n&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> finalRet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFirstResponse</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Log(AllResponse())</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestFirstResponse</span></span><br><span class="line"><span class="comment">    TestFirstResponse: all_done_test.go:33: the result is from 9</span></span><br><span class="line"><span class="comment">        the result is from 0</span></span><br><span class="line"><span class="comment">        the result is from 2</span></span><br><span class="line"><span class="comment">        the result is from 7</span></span><br><span class="line"><span class="comment">        the result is from 4</span></span><br><span class="line"><span class="comment">        the result is from 6</span></span><br><span class="line"><span class="comment">        the result is from 1</span></span><br><span class="line"><span class="comment">        the result is from 5</span></span><br><span class="line"><span class="comment">        the result is from 8</span></span><br><span class="line"><span class="comment">        the result is from 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--- PASS: TestFirstResponse (0.01s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h2><p>使用 buffered channel 实现对象池</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzIzL2Y2ZGE0NTcyZTQxOWEucG5n?x-oss-process=image/format,png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ReusableObj <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ObjPool <span class="keyword">struct</span> &#123;</span><br><span class="line">bufChan <span class="keyword">chan</span> *ReusableObj <span class="comment">// 用于缓冲可重用对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewObjPool</span><span class="params">(numOfObj <span class="keyword">int</span>)</span> *<span class="title">ObjPool</span></span> &#123;</span><br><span class="line">objPool := ObjPool&#123;&#125;</span><br><span class="line">objPool.bufChan = <span class="built_in">make</span>(<span class="keyword">chan</span> *ReusableObj, numOfObj)</span><br><span class="line"><span class="comment">// 提前建立好连接</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numOfObj; i++ &#123;</span><br><span class="line">objPool.bufChan &lt;- &amp;ReusableObj&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;objPool</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取连接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *ObjPool)</span> <span class="title">GetObj</span><span class="params">(timeout time.Duration)</span> <span class="params">(*ReusableObj, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> ret := &lt;-p.bufChan:</span><br><span class="line"><span class="keyword">return</span> ret, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(timeout): <span class="comment">// 超时控制</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;time out&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放入连接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *ObjPool)</span> <span class="title">ReleaseObj</span><span class="params">(obj *ReusableObj)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> p.bufChan &lt;- obj:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;overflow&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestObjPool</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">pool := NewObjPool(<span class="number">10</span>) <span class="comment">// 创建对象池</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">11</span>; i++ &#123;</span><br><span class="line"><span class="comment">// 从对象池中获取</span></span><br><span class="line"><span class="keyword">if</span> v, err := pool.GetObj(time.Second * <span class="number">1</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line"><span class="comment">// 放入对象池</span></span><br><span class="line"><span class="keyword">if</span> err := pool.ReleaseObj(v); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sync-Pool对象缓存"><a href="#sync-Pool对象缓存" class="headerlink" title="sync.Pool对象缓存"></a>sync.Pool对象缓存</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzIzLzI3OGQ1YzgzOTg5YWEucG5n?x-oss-process=image/format,png"></p><p><strong>sync.Pool</strong> 对象获取：</p><ul><li>尝试从私有对象获取</li><li>私有对象不存在，尝试从当前 <strong>Processor</strong> 的共享池获取</li><li>如果当前 <strong>Processor</strong> 共享池也是空的，那么就尝试去其他 <strong>Processor</strong> 的共享池获取</li><li> 如果所有⼦池都是空的，最后就⽤⽤户指定的 New 函数，产⽣⼀个新的对象返回</li></ul><p><strong>sync.Pool</strong> 对象放回：</p><ul><li>如果私有对象不存在则保存为私有对象</li><li>如果私有对象存在，放⼊当前 <strong>Processor</strong> ⼦池的共享池中</li></ul><p><strong>sync.Pool</strong> 对象生命周期：</p><ul><li><strong>GC</strong> 会清除 <strong>sync.Pool</strong> 缓存的对象</li><li>对象的缓存有效期为下⼀次 <strong>GC</strong> 之前</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSyncPool</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">pool := &amp;sync.Pool&#123;</span><br><span class="line">New: <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Create a new object.&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v := pool.Get().(<span class="keyword">int</span>) <span class="comment">// 从池中获取并断言类型</span></span><br><span class="line">fmt.Println(v)        <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">pool.Put(<span class="number">3</span>)</span><br><span class="line">v1, _ := pool.Get().(<span class="keyword">int</span>)</span><br><span class="line">fmt.Println(v1) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在放进去个 2</span></span><br><span class="line">pool.Put(<span class="number">2</span>)</span><br><span class="line"><span class="comment">//为了验证生命周期 这里GC一下</span></span><br><span class="line">runtime.GC()</span><br><span class="line">v3, _ := pool.Get().(<span class="keyword">int</span>)</span><br><span class="line">fmt.Println(v3) <span class="comment">// 100 而不是 2</span></span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestSyncPool</span></span><br><span class="line"><span class="comment">Create a new object.</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">Create a new object.</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">--- PASS: TestSyncPool (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSyncPoolMultiGoroutine</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">pool := sync.Pool&#123;</span><br><span class="line">New: <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Create a new object.&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pool.Put(<span class="number">100</span>)</span><br><span class="line">pool.Put(<span class="number">100</span>)</span><br><span class="line">pool.Put(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">t.Log(pool.Get())</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestSyncPoolMultiGoroutine</span></span><br><span class="line"><span class="comment">    TestSyncPoolMultiGoroutine: sync_pool_test.go:59: 100</span></span><br><span class="line"><span class="comment">Create a new object.</span></span><br><span class="line"><span class="comment">    TestSyncPoolMultiGoroutine: sync_pool_test.go:59: 10</span></span><br><span class="line"><span class="comment">Create a new object.</span></span><br><span class="line"><span class="comment">    TestSyncPoolMultiGoroutine: sync_pool_test.go:59: 10</span></span><br><span class="line"><span class="comment">    TestSyncPoolMultiGoroutine: sync_pool_test.go:59: 100</span></span><br><span class="line"><span class="comment">Create a new object.</span></span><br><span class="line"><span class="comment">Create a new object.</span></span><br><span class="line"><span class="comment">    TestSyncPoolMultiGoroutine: sync_pool_test.go:59: 10</span></span><br><span class="line"><span class="comment">Create a new object.</span></span><br><span class="line"><span class="comment">Create a new object.</span></span><br><span class="line"><span class="comment">Create a new object.</span></span><br><span class="line"><span class="comment">    TestSyncPoolMultiGoroutine: sync_pool_test.go:59: 100</span></span><br><span class="line"><span class="comment">    TestSyncPoolMultiGoroutine: sync_pool_test.go:59: 10</span></span><br><span class="line"><span class="comment">    TestSyncPoolMultiGoroutine: sync_pool_test.go:59: 10</span></span><br><span class="line"><span class="comment">    TestSyncPoolMultiGoroutine: sync_pool_test.go:59: 10</span></span><br><span class="line"><span class="comment">    TestSyncPoolMultiGoroutine: sync_pool_test.go:59: 10</span></span><br><span class="line"><span class="comment">--- PASS: TestSyncPoolMultiGoroutine (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sync.Pool</strong> 总结：</p><ul><li>适合于通过复用，降低复杂对象的创建和GC代价</li><li>协程安全，会有锁的开销</li><li>生命周期受GC影响，不适合于做连接池等，需自己管理生命周期的资源的池化</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;仅运行一次&quot;&gt;&lt;a href=&quot;#仅运行一次&quot; class=&quot;headerlink&quot; title=&quot;仅运行一次&quot;&gt;&lt;/a&gt;仅运行一次&lt;/h2&gt;&lt;p&gt;最容易联想到的单例模式：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="Go" scheme="https://stitch.cn/categories/Go/"/>
    
    
  </entry>
  
  <entry>
    <title>Go并发编程</title>
    <link href="https://stitch.cn/2020/05/21/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.html"/>
    <id>https://stitch.cn/2020/05/21/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.html</id>
    <published>2020-05-21T23:58:30.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="协程机制"><a href="#协程机制" class="headerlink" title="协程机制"></a>协程机制</h2><p><strong>Thead</strong> vs. <strong>Groutine</strong></p><ul><li>创建时默认的 <strong>stack</strong> 的大小<ul><li>JDK5 以后的 Java Thread stack 默认为1M</li><li>Groutine 的 <strong>Stack</strong> 初始化大小为2k</li></ul></li><li>和 KSE（Kernel Space Entity）的对应关系<ul><li>Java Thread 是 1:1</li><li>Groutine 是 M:N</li></ul></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzIxLzJlMzYxNDNhMDVlYjAucG5n?x-oss-process=image/format,png"></p><p><strong>Go</strong>的<strong>GMP</strong>调度：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzIxL2FjZmI2YzZkZDIxMjcucG5n?x-oss-process=image/format,png"></p><p><strong>M</strong>：系统线程</p><p><strong>P</strong>：Go实现的协程处理器</p><p><strong>G</strong>：协程</p><p>从图中可看出，<strong>Processor</strong> 在不同的系统线程中，每个 <strong>Processor</strong> 都挂着准备运行的协程队列。</p><p><strong>Processor</strong> 依次运行协程队列中的协程。</p><p>这时候问题就来了，假如一个协程运行的时间特别长，把整个 <strong>Processor</strong> 都占住了，那么在队列中的协程是不是就会被延迟的很久？</p><p>在Go启动的时候，会有一个守护线程来去做一个计数，计每个 <strong>Processor</strong> 运行完成的协程的数量，当一段时间内发现，某个 <strong>Processor</strong> 完成协程的数量没有发生变化的时候，就会往这个正在运行的协程任务栈插入一个特别的标记，协程在运行的时候遇到非内联函数，就会读到这个标记，就会把自己中断下来，然后插到这个等候协程队列的队尾，切换到别的协程进行运行。</p><p>当某一个协程被系统中断了，例如说 <strong>io</strong> 需要等待的时候，为了提高整体的并发，<strong>Processor</strong> 会把自己移到另一个可使用的系统线程当中，继续执行它所挂的协程队列，当这个被中断的协程被唤醒完成之后，会把自己加入到其中某个 <strong>Processor</strong> 的队列里，会加入到全局等待队列中。</p><p>当一个协程被中断的时候，它在寄存器里的运行状态也会保存到这个协程对象里，当协程再次获得运行状态的时候，重写写入寄存器，继续运行。</p><p>话不多说，直接上代码，如何在代码里启动一个协程：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGroutine</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="comment">// int 参数</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;(i) <span class="comment">// 传入参数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有可能测试程序结束的非常快 加个等待</span></span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">50</span>)</span><br><span class="line"><span class="comment">/** 运行结果</span></span><br><span class="line"><span class="comment">=== RUN   TestGroutine</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">--- PASS: TestGroutine (0.05s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="共享内存并发机制"><a href="#共享内存并发机制" class="headerlink" title="共享内存并发机制"></a>共享内存并发机制</h2><h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><p>如果你是 <strong>Java</strong> 或者 <strong>C++</strong> 程序员，那么以下代码非常常见，使用锁来进行并发控制（可惜我是个Phper🙈）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lock lock = ...;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">// process (thread-safe)</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样Go也提供了这样的机 package sync：</p><p><strong>Mutex</strong> 互斥锁</p><p><strong>RWLock</strong> 读写锁</p><p>不使用锁的情况：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCounter</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">counter := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">counter++</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">t.Logf(<span class="string">&quot;counter = %d&quot;</span>, counter)</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestCounter</span></span><br><span class="line"><span class="comment">    TestCounter: share_memory_test.go:16: counter = 4627</span></span><br><span class="line"><span class="comment">--- PASS: TestCounter (1.01s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现结果与预期结果不一样，这是因为 <code>conuter</code> 变量在不同的协程里面去做自增，导致了一个并发的竞争条件，传统意义来讲就是一个不是线程安全的程序。要保证线程安全，就要对共享的内存进行锁保护。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCounterThreadSafe</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> mut sync.Mutex</span><br><span class="line">counter := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// defer 释放锁</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">mut.Unlock()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// 加锁</span></span><br><span class="line">mut.Lock()</span><br><span class="line">counter++</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">t.Logf(<span class="string">&quot;counter = %d&quot;</span>, counter)</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestCounterThreadSafe</span></span><br><span class="line"><span class="comment">    TestCounterThreadSafe: share_memory_test.go:40: counter = 5000</span></span><br><span class="line"><span class="comment">--- PASS: TestCounterThreadSafe (1.01s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次就得到了预期结果。</p><h3 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h3><p>等待所有协程完成，才能往下执行操作。</p><p>上面代码中，怕代码执行太快，所以加了 <strong>sleep</strong>。</p><p>但我们无法控制这个 <strong>sleep</strong> 需要睡眠时间。</p><p>下面来用 <code>WaitGroup</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCounterWaitGroup</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> mut sync.Mutex</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">counter := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>) <span class="comment">// 增加一个要等待的协程</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// defer 释放锁</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">mut.Unlock()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// 加锁</span></span><br><span class="line">mut.Lock()</span><br><span class="line">counter++</span><br><span class="line">wg.Done() <span class="comment">// 一个协程完成了</span></span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait() <span class="comment">// 等待所有添加的协程完成 才继续向下运行</span></span><br><span class="line">t.Logf(<span class="string">&quot;counter = %d&quot;</span>, counter)</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestCounterWaitGroup</span></span><br><span class="line"><span class="comment">    TestCounterWaitGroup: share_memory_test.go:66: counter = 5000</span></span><br><span class="line"><span class="comment">--- PASS: TestCounterWaitGroup (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSP并发机制"><a href="#CSP并发机制" class="headerlink" title="CSP并发机制"></a>CSP并发机制</h2><p>有人可能会说不就是 <strong>Actor Model</strong> 嘛</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzIxL2Y1YzEzZDIyZjVjZGYucG5n?x-oss-process=image/format,png" alt="Actor Model"></p><p><strong>CSP</strong> vs. <strong>Actor</strong></p><ul><li>和 <strong>Actor</strong> 的直接通讯不同，<strong>CSP</strong>模式则是通过<strong>Channel</strong>进行通讯的，更松耦合一些。</li><li><strong>Go</strong>中的<strong>channel</strong>是有容量限制并且独立于处理<strong>Groutine</strong>，而如<strong>Erlang</strong>，<strong>Actor</strong>模式中的<strong>mailbox</strong>容量是无限的，接收进程也总是被动地处理消息。</li></ul><p><strong>Channel</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzIxLzdiNzg2NDNkOGRkYjEucG5n?x-oss-process=image/format,png" alt="channel"></p><p><strong>Go</strong>中<strong>Channel</strong>的基本机制：</p><ul><li><p>上图左边（非缓冲<strong>channel</strong>）：</p><p>通讯的两方必须同时在<strong>channel</strong>的两边，才能完成这次交互。任何一方不在，另一方就会被阻塞在那里等待，直到等到另一方才能完成这次交互。</p></li><li><p>上图右边（缓冲<strong>channel</strong>）：</p><p>就是对这个<strong>channel</strong>设置容量，在未满的情况下，放消息的人就能放进去，如果满了，就会发生阻塞等待。</p><p>等待拿消息的人去拿，空出来容量。反之，拿消息一样。</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">service</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">50</span>) <span class="comment">// 模拟阻塞</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Done&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">otherTask</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;working on something else&quot;</span>)</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">100</span>) <span class="comment">// 模拟阻塞</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Task is done.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestService</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">fmt.Println(service())</span><br><span class="line">otherTask()</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestService</span></span><br><span class="line"><span class="comment">Done</span></span><br><span class="line"><span class="comment">working on something else</span></span><br><span class="line"><span class="comment">Task is done.</span></span><br><span class="line"><span class="comment">--- PASS: TestService (0.16s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由运行结果可知，完全是串行的，耗时为 0.16s</p><p>对 <code>service</code>进行改造，在调用的时候启动另外一个协程去执行，而不是阻塞当前写的协程。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">service</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">50</span>) <span class="comment">// 模拟阻塞</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Done&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">otherTask</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;working on something else&quot;</span>)</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">100</span>) <span class="comment">// 模拟阻塞</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Task is done.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AsyncService</span><span class="params">()</span> <span class="title">chan</span> <span class="title">string</span></span> &#123;</span><br><span class="line">retCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>) <span class="comment">// 创建一个非缓冲string类型的channel</span></span><br><span class="line"><span class="comment">//retCh := make(chan string, 1) // 创建一个容量为1 string类型的缓冲channel</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">ret := service()</span><br><span class="line">fmt.Println(<span class="string">&quot;returned result.&quot;</span>)</span><br><span class="line">retCh &lt;- ret <span class="comment">// 放入 channel</span></span><br><span class="line">fmt.Println(<span class="string">&quot;service exited.&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> retCh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAsyncService</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">retCh := AsyncService()</span><br><span class="line">otherTask()</span><br><span class="line">fmt.Println(&lt;-retCh) <span class="comment">// 从channel拿出</span></span><br><span class="line"><span class="comment">/** 运行结果</span></span><br><span class="line"><span class="comment">=== RUN   TestAsyncService</span></span><br><span class="line"><span class="comment">working on something else</span></span><br><span class="line"><span class="comment">returned result.</span></span><br><span class="line"><span class="comment">Task is done.</span></span><br><span class="line"><span class="comment">Done</span></span><br><span class="line"><span class="comment">service exited.</span></span><br><span class="line"><span class="comment">--- PASS: TestAsyncService (0.10s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看打印的顺序，实现了一个异步返回结果，耗时 0.1s</p><h2 id="多路选择和超时"><a href="#多路选择和超时" class="headerlink" title="多路选择和超时"></a>多路选择和超时</h2><p><strong>select</strong>：</p><ul><li><p>多渠道的选择：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> ret := &lt;-retCh:</span><br><span class="line">t.Logf(<span class="string">&quot;result %s&quot;</span>, ret)</span><br><span class="line"><span class="keyword">case</span> ret := &lt;-retCh2:</span><br><span class="line">t.Logf(<span class="string">&quot;result %s&quot;</span>, ret)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">t.Error(<span class="string">&quot;No one returned&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>超时控制：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> ret := &lt;-retCh:</span><br><span class="line">  t.Logf(<span class="string">&quot;result %s&quot;</span>, ret)</span><br><span class="line">  <span class="keyword">case</span> &lt;-time.After(time.Second * <span class="number">1</span>):</span><br><span class="line">  t.Error(<span class="string">&quot;time out&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">service</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">500</span>) <span class="comment">// 模拟阻塞</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Done&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AsyncService</span><span class="params">()</span> <span class="title">chan</span> <span class="title">string</span></span> &#123;</span><br><span class="line">retCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>) <span class="comment">// 创建一个非缓冲channel</span></span><br><span class="line"><span class="comment">//retCh := make(chan string, 10) // 创建一个容量为10的缓冲channel</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">ret := service()</span><br><span class="line">fmt.Println(<span class="string">&quot;returned result.&quot;</span>)</span><br><span class="line">retCh &lt;- ret <span class="comment">// 放入 channel</span></span><br><span class="line">fmt.Println(<span class="string">&quot;service exited.&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> retCh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSelect</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// 上面模拟阻塞 500ms</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> ret := &lt;-AsyncService():</span><br><span class="line">t.Log(ret)</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Millisecond * <span class="number">100</span>):</span><br><span class="line">t.Error(<span class="string">&quot;time out&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestSelect</span></span><br><span class="line"><span class="comment">    TestSelect: select_test.go:31: time out</span></span><br><span class="line"><span class="comment">--- FAIL: TestSelect (0.10s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="channel的关闭和广播"><a href="#channel的关闭和广播" class="headerlink" title="channel的关闭和广播"></a>channel的关闭和广播</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dataProducer</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">ch &lt;- i <span class="comment">// 放入</span></span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dataReceiver</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">data := &lt;-ch <span class="comment">// 取出</span></span><br><span class="line">fmt.Println(data)</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCloseChannel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line">dataProducer(ch, &amp;wg)</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line">dataReceiver(ch, &amp;wg)</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestCloseChannel</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">--- PASS: TestCloseChannel (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到 <code>dataProducer</code> 放数据的时候放了10个，<code>dataReceiver</code> 也是拿了10个。</p><p>这是因为我们知道是10，但正常情况 <code>dataReceiver</code> 才能知道 <code>dataProducer</code> 放完了呢。</p><p>其一我们可以做个约定，比如 <code>dataProducer</code> 放入个 -1 ，当 <code>dataReceiver</code> 收到 -1 就退出去。</p><p>但是又出来一个新问题，如果有多个 <code>dataReceiver</code> 呢，<code>dataProducer</code> 就得知道有多少个 <code>dataReceiver</code>，来放入多个 -1，问题就是不知道。</p><p><strong>channel</strong>的关闭：</p><ul><li>向关闭的 <strong>channel</strong> 发送数据，会导致 <strong>panic</strong></li><li><code>v, ok &lt;-ch; ok</code> 为 <strong>bool</strong> 值，<strong>true</strong> 表示正常接受，<strong>false</strong> 表示通道关闭</li><li>所有的 <strong>channel</strong> 接收者都会在 <strong>channel</strong> 关闭时，⽴立刻从阻塞等待中返回且上 述 <strong>ok</strong> 值为 <strong>false</strong>。这个⼴广播机制常被利利⽤用，进⾏行行向多个订阅者同时发送信号。 如:退出信号。</li></ul><p>改造 <code>dataReceiver</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dataReceiver</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> data, ok := &lt;-ch; ok &#123; <span class="comment">// ok 为 true</span></span><br><span class="line">fmt.Println(data)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 结束循环</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动多个  <code>dataReceiver</code> ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCloseChannel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line">dataProducer(ch, &amp;wg)</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line">dataReceiver(ch, &amp;wg)</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line">dataReceiver(ch, &amp;wg)</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">  === RUN   TestCloseChannel</span></span><br><span class="line"><span class="comment">  0</span></span><br><span class="line"><span class="comment">  1</span></span><br><span class="line"><span class="comment">  2</span></span><br><span class="line"><span class="comment">  3</span></span><br><span class="line"><span class="comment">  5</span></span><br><span class="line"><span class="comment">  6</span></span><br><span class="line"><span class="comment">  7</span></span><br><span class="line"><span class="comment">  8</span></span><br><span class="line"><span class="comment">  4</span></span><br><span class="line"><span class="comment">  9</span></span><br><span class="line"><span class="comment">  --- PASS: TestCloseChannel (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如不判断 <code>ok</code> 呢：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dataReceiver</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">11</span>; i++ &#123; <span class="comment">// 上面 dataProducer 放进去了10个</span></span><br><span class="line">data := &lt;-ch</span><br><span class="line">fmt.Println(data) <span class="comment">// 当通道被关闭 会返回一个这个通道定义类型的零值</span></span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="任务的取消"><a href="#任务的取消" class="headerlink" title="任务的取消"></a>任务的取消</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cancel_1</span><span class="params">(cancelChan <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">cancelChan &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 往 channel 中放入消息</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cancel_2</span><span class="params">(cancelChan <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="built_in">close</span>(cancelChan)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isCancelled</span><span class="params">(cancelChan <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-cancelChan: <span class="comment">// 从 channel 中收到消息 返回true</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCancel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">cancelChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123; <span class="comment">// 启动5个协程任务</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, cancelChan <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123; <span class="comment">// 每个任务一直在执行</span></span><br><span class="line"><span class="keyword">if</span> isCancelled(cancelChan) &#123; <span class="comment">// 每次检查是否任务是否进行停止 进行停止</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(i, <span class="string">&quot;Cancelled&quot;</span>)</span><br><span class="line">&#125;(i, cancelChan)</span><br><span class="line">&#125;</span><br><span class="line">cancel_1(cancelChan)</span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestCancel</span></span><br><span class="line"><span class="comment">4 Cancelled</span></span><br><span class="line"><span class="comment">--- PASS: TestCancel (1.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有一个 任务被取消掉了，因为 <strong>channel</strong> 传递过去只有一个信号，而这里有5个协程，其它协程没有被取消。</p><p>而我们可以传递5个，将它们全部取消，这样的编程坏处，前面的逻辑和有多少个<strong>task</strong>进行耦合，必须事先知道有多少个<strong>task</strong>。</p><p>换成第二个取消方法，因为是广播机制，所以所有协程都会收到。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCancel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">cancelChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123; <span class="comment">// 启动5个协程任务</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, cancelChan <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123; <span class="comment">// 每个任务一直在执行</span></span><br><span class="line"><span class="keyword">if</span> isCancelled(cancelChan) &#123; <span class="comment">// 每次检查是否任务是否进行停止 进行停止</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(i, <span class="string">&quot;Cancelled&quot;</span>)</span><br><span class="line">&#125;(i, cancelChan)</span><br><span class="line">&#125;</span><br><span class="line">cancel_2(cancelChan)</span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestCancel</span></span><br><span class="line"><span class="comment">4 Cancelled</span></span><br><span class="line"><span class="comment">2 Cancelled</span></span><br><span class="line"><span class="comment">1 Cancelled</span></span><br><span class="line"><span class="comment">0 Cancelled</span></span><br><span class="line"><span class="comment">3 Cancelled</span></span><br><span class="line"><span class="comment">--- PASS: TestCancel (1.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Context与任务取消"><a href="#Context与任务取消" class="headerlink" title="Context与任务取消"></a>Context与任务取消</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzIxLzE3ZjJmZDQ3NjM2MTYucG5n?x-oss-process=image/format,png"></p><p>我们直接取消叶子节点的任务是可以的，但是取消一个父节点，子节点任务不会被取消，当然可以自己去做这种机制。在 <strong>Go</strong> 的1.9版本之后把 <code>Context</code> 并入到内置包里面了。帮我们做这些事。</p><p><strong>Context</strong>：</p><ul><li>根 Context: 通过 context.Background () 创建</li><li>⼦ Context: context.WithCancel(parentContext) 创建<ul><li>ctx, cancel := context.WithCancel(context.Background())</li></ul></li><li>当前 Context 被取消时，基于他的⼦子 context 都会被取消</li><li>接收取消通知 &lt;-ctx.Done()</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isCancelled</span><span class="params">(ctx context.Context)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCancel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123; <span class="comment">// 启动5个协程任务</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, ctx context.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123; <span class="comment">// 每个任务一直在执行</span></span><br><span class="line"><span class="keyword">if</span> isCancelled(ctx) &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(i, <span class="string">&quot;Cancelled&quot;</span>)</span><br><span class="line">&#125;(i, ctx)</span><br><span class="line">&#125;</span><br><span class="line">cancel()</span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestCancel</span></span><br><span class="line"><span class="comment">4 Cancelled</span></span><br><span class="line"><span class="comment">2 Cancelled</span></span><br><span class="line"><span class="comment">3 Cancelled</span></span><br><span class="line"><span class="comment">0 Cancelled</span></span><br><span class="line"><span class="comment">1 Cancelled</span></span><br><span class="line"><span class="comment">--- PASS: TestCancel (1.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;协程机制&quot;&gt;&lt;a href=&quot;#协程机制&quot; class=&quot;headerlink&quot; title=&quot;协程机制&quot;&gt;&lt;/a&gt;协程机制&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Thead&lt;/strong&gt; vs. &lt;strong&gt;Groutine&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
</summary>
      
    
    
    
    <category term="Go" scheme="https://stitch.cn/categories/Go/"/>
    
    
  </entry>
  
  <entry>
    <title>Go包和依赖管理</title>
    <link href="https://stitch.cn/2020/05/20/go%E5%8C%85%E5%92%8C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86.html"/>
    <id>https://stitch.cn/2020/05/20/go%E5%8C%85%E5%92%8C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86.html</id>
    <published>2020-05-20T10:24:48.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="构建可复用的模块（包）"><a href="#构建可复用的模块（包）" class="headerlink" title="构建可复用的模块（包）"></a>构建可复用的模块（包）</h2><p>package：</p><ul><li><p>基本复用模块单元</p><p>以首字母大写来表明可被包外代码访问</p></li><li><p>代码的 package 可以和所在的目录不一致</p></li><li><p>同一目录里的 Go 代码的 package 要保持一致</p></li></ul><p>需要把包目录加入到GOPATH</p><p>目录结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~/Documents/Go</span><br><span class="line">- learning</span><br><span class="line">- src</span><br><span class="line">- fifteen</span><br><span class="line">- client</span><br><span class="line">- package_test.go</span><br><span class="line">- series</span><br><span class="line">- my_series.go</span><br></pre></td></tr></table></figure><p>查看 go env</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go env</span><br><span class="line">GOPATH=<span class="string">&quot;/Users/gaobinzhan/Documents/Go/learning:/Users/gaobinzhan/Documents/Go&quot;</span></span><br></pre></td></tr></table></figure><p>可以看到这个目录已经加入<code>GOPATH</code>里了。</p><p><code>my_series.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> series</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首字母必须大写 才可被包外代码访问</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetFibonacci</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="params">([]<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">fibList := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt; n; i++ &#123;</span><br><span class="line">fibList = <span class="built_in">append</span>(fibList, fibList[i<span class="number">-2</span>]+fibList[i<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fibList, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>package_test.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> client</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fifteen/series&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPackage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Log(series.GetFibonacci(<span class="number">5</span>))</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestPackage</span></span><br><span class="line"><span class="comment">    TestPackage: package_test.go:9: [1 2 3 5 8] &lt;nil&gt;</span></span><br><span class="line"><span class="comment">--- PASS: TestPackage (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>init方法：</p><ul><li>在 <code>main</code> 被执行前，所有依赖的 <code>package</code> 的 <code>init</code> 方法都会被执行</li><li>不同包的 <code>init</code> 函数按照包导入的依赖关系决定执行顺序</li><li>每个包可以有多个 <code>init</code> 函数</li><li>包的每个源文件</li></ul><p>下面修改文件</p><p><code>my_series.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> series</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;init 1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;init 2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetFibonacci</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="params">([]<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">fibList := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt; n; i++ &#123;</span><br><span class="line">fibList = <span class="built_in">append</span>(fibList, fibList[i<span class="number">-2</span>]+fibList[i<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fibList, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>package_test.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> client</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fifteen/series&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPackage</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Log(series.GetFibonacci(<span class="number">5</span>))</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">init 1</span></span><br><span class="line"><span class="comment">init 2</span></span><br><span class="line"><span class="comment">=== RUN   TestPackage</span></span><br><span class="line"><span class="comment">    TestPackage: package_test.go:10: [1 2 3 5 8] &lt;nil&gt;</span></span><br><span class="line"><span class="comment">--- PASS: TestPackage (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取远程package：</p><ul><li><p>通过 go get 来获取远程依赖</p><p>go get -u 强制从网络更新远程依赖</p></li><li><p>注意代码在 Github 上的组织形式，以适应 go get</p><p>直接以代码路径开始，不要有 src</p></li></ul><p>示例：go get -u <a href="https://github.com/easierway/concurrent_map">https://github.com/easierway/concurrent_map</a></p><p>代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> remote_package</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">cm <span class="string">&quot;github.com/easierway/concurrent_map&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestConcurrentMap</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">m := cm.CreateConcurrentMap(<span class="number">99</span>)</span><br><span class="line">m.Set(cm.StrKey(<span class="string">&quot;key&quot;</span>), <span class="number">10</span>)</span><br><span class="line">t.Log(m.Get(cm.StrKey(<span class="string">&quot;key&quot;</span>)))</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestConcurrentMap</span></span><br><span class="line"><span class="comment">    TestConcurrentMap: remote_package_test.go:11: 10 true</span></span><br><span class="line"><span class="comment">--- PASS: TestConcurrentMap (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>Go未解决的依赖问题：</p><ul><li>同一环境下，不同项目使用同一包的不同版本</li><li>无法管理对包的特定版本的依赖</li></ul><p>vendor路径：</p><p>随着 Go 1.5 release 版本的发布，vendor ⽬录被添加到除了 GOPATH 和</p><p>GOROOT 之外的依赖⽬录查找的解决⽅案。在 Go 1.6 之前，你需要⼿动</p><p>的设置环境变量</p><p>查找依赖包路径的解决⽅案如下：</p><ul><li><p>当前包下的 vendor ⽬录</p></li><li><p>向上级⽬录查找，直到找到 src 下的 vendor ⽬录</p></li><li><p>在 GOPATH 下⾯查找依赖包</p></li><li><p>在 GOROOT ⽬录下查</p></li></ul><p>常用的依赖管理工具：</p><ul><li><p>godep <a href="https://github.com/tools/godep">https://github.com/tools/godep</a></p></li><li><p>glide <a href="https://github.com/Masterminds/glide">https://github.com/Masterminds/glide</a></p></li><li><p>dep <a href="https://github.com/golang/dep">https://github.com/golang/dep</a> </p></li></ul><p>简单用一下</p><p>安装 gilde</p><p><code>brew install glide</code></p><p>删除我们刚刚 go get 下来的包 然后执行 glide init</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzIwLzJjOTJjODYxNjNkNTIucG5n?x-oss-process=image/format,png"></p><p>然后会在目录下面生成一个 <code>glide.yaml</code>文件</p><p>执行 <code>glide install</code> 会生成 <code>vendor</code> 目录 里面就是我们的依赖包</p><p>执行原来的测试文件，依然可以执行成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;构建可复用的模块（包）&quot;&gt;&lt;a href=&quot;#构建可复用的模块（包）&quot; class=&quot;headerlink&quot; title=&quot;构建可复用的模块（包）&quot;&gt;&lt;/a&gt;构建可复用的模块（包）&lt;/h2&gt;&lt;p&gt;package：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本复用模块单元&lt;</summary>
      
    
    
    
    <category term="Go" scheme="https://stitch.cn/categories/Go/"/>
    
    
  </entry>
  
  <entry>
    <title>Go编写好的错误处理</title>
    <link href="https://stitch.cn/2020/05/18/go%E7%BC%96%E5%86%99%E5%A5%BD%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.html"/>
    <id>https://stitch.cn/2020/05/18/go%E7%BC%96%E5%86%99%E5%A5%BD%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.html</id>
    <published>2020-05-18T23:21:19.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编写好的错误处理"><a href="#编写好的错误处理" class="headerlink" title="编写好的错误处理"></a>编写好的错误处理</h2><p>Go的错误机制：</p><ul><li><p>没有异常机制</p></li><li><p><code>error</code> 类型实现了 <code>error</code> 接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">  Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以通过 <code>errors.News</code> 来快速创建错误实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">errors.News(<span class="string">&quot;n must be in the range [0,10]&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><p>拿Fibonacci举例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetFibonacci</span><span class="params">(n <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">fibList := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt; n; i++ &#123;</span><br><span class="line">fibList = <span class="built_in">append</span>(fibList, fibList[i<span class="number">-2</span>]+fibList[i<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fibList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetFibonacci</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Log(GetFibonacci(<span class="number">10</span>))</span><br><span class="line">t.Log(GetFibonacci(<span class="number">-10</span>))</span><br><span class="line"><span class="comment">/** 运行结果</span></span><br><span class="line"><span class="comment">=== RUN   TestGetFibonacci</span></span><br><span class="line"><span class="comment">    TestGetFibonacci: err_test.go:15: [1 2 3 5 8 13 21 34 55 89]</span></span><br><span class="line"><span class="comment">    TestGetFibonacci: err_test.go:21: [1 2]</span></span><br><span class="line"><span class="comment">--- PASS: TestGetFibonacci (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到没有对入参进行校验</p></blockquote><p>现在做下校验：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetFibonacci</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="params">([]<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">2</span> || n &gt; <span class="number">100</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;n should be in [2,100]&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fibList := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt; n; i++ &#123;</span><br><span class="line">fibList = <span class="built_in">append</span>(fibList, fibList[i<span class="number">-2</span>]+fibList[i<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fibList, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetFibonacci</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果有错误进行错误输出</span></span><br><span class="line"><span class="keyword">if</span> v, err := GetFibonacci(<span class="number">-10</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">t.Log(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 运行结果</span></span><br><span class="line"><span class="comment">=== RUN   TestGetFibonacci</span></span><br><span class="line"><span class="comment">    TestGetFibonacci: err_test.go:22: n should be in [2,100]</span></span><br><span class="line"><span class="comment">--- FAIL: TestGetFibonacci (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设现在有个需求，返回的值是太小了还是太大了，返回不同的错误，最简单的方法直接改造<code>GetFibonacci</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetFibonacci</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="params">([]<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;n should be not less than 2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">100</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;n should be not larger than 100&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fibList := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt; n; i++ &#123;</span><br><span class="line">fibList = <span class="built_in">append</span>(fibList, fibList[i<span class="number">-2</span>]+fibList[i<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fibList, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果区分错误类型，依靠字符串去匹配简直太麻烦还容易出错，最常见的解决方法，定义两个预置的错误：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> LessThanTwoError = errors.New(<span class="string">&quot;n should be not less than 2&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> LargerThenHundredError = errors.New(<span class="string">&quot;n should be not larger than 100&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetFibonacci</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="params">([]<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, LessThanTwoError</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">100</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, LargerThenHundredError</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fibList := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt; n; i++ &#123;</span><br><span class="line">fibList = <span class="built_in">append</span>(fibList, fibList[i<span class="number">-2</span>]+fibList[i<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fibList, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetFibonacci</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果有错误进行错误输出</span></span><br><span class="line"><span class="keyword">if</span> v, err := GetFibonacci(<span class="number">-10</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 假如调用者需要判断错误的就比较简单了</span></span><br><span class="line"><span class="keyword">if</span> err == LessThanTwoError &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;It is less.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">t.Log(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 运行结果</span></span><br><span class="line"><span class="comment">=== RUN   TestGetFibonacci</span></span><br><span class="line"><span class="comment">It is less.</span></span><br><span class="line"><span class="comment">    TestGetFibonacci: err_test.go:36: n should be not less than 2</span></span><br><span class="line"><span class="comment">--- FAIL: TestGetFibonacci (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li><p>定义不同的错误变量，以便于判断错误类型</p></li><li><p>及早失败，避免嵌套，提高代码可读性</p></li></ul><h2 id="panic和recover"><a href="#panic和recover" class="headerlink" title="panic和recover"></a>panic和recover</h2><h3 id="panic"><a href="#panic" class="headerlink" title="panic"></a>panic</h3><p>panic：</p><ul><li><code>panic</code> 用于不可以恢复的错误</li><li><code>panic</code> 退出前会执行 <code>defer</code> 指定的内容</li></ul><p>panic vs. os.Exit：</p><ul><li><code>os.Exit</code> 退出时不会调用 <code>defer</code> 指定的函数</li><li><code>os.Exit</code> 退出时不输出当前调用栈的信息</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestExit</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Start&quot;</span>)</span><br><span class="line">os.Exit(<span class="number">-1</span>)</span><br><span class="line"><span class="comment">/** 运行结果</span></span><br><span class="line"><span class="comment">=== RUN   TestExit</span></span><br><span class="line"><span class="comment">Start</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Process finished with exit code 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPanic</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Finally!&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(<span class="string">&quot;Start&quot;</span>)</span><br><span class="line"><span class="built_in">panic</span>(errors.New(<span class="string">&quot;Something wrong!&quot;</span>))</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestPanic</span></span><br><span class="line"><span class="comment">Start</span></span><br><span class="line"><span class="comment">Finally!</span></span><br><span class="line"><span class="comment">--- FAIL: TestPanic (0.00s)</span></span><br><span class="line"><span class="comment">panic: Something wrong! [recovered]</span></span><br><span class="line"><span class="comment">panic: Something wrong!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">goroutine 6 [running]:</span></span><br><span class="line"><span class="comment">testing.tRunner.func1.1(0x1119860, 0xc000046510)</span></span><br><span class="line"><span class="comment">/usr/local/Cellar/go/1.14.2_1/libexec/src/testing/testing.go:940 +0x2f5</span></span><br><span class="line"><span class="comment">testing.tRunner.func1(0xc00011a120)</span></span><br><span class="line"><span class="comment">/usr/local/Cellar/go/1.14.2_1/libexec/src/testing/testing.go:943 +0x3f9</span></span><br><span class="line"><span class="comment">panic(0x1119860, 0xc000046510)</span></span><br><span class="line"><span class="comment">/usr/local/Cellar/go/1.14.2_1/libexec/src/runtime/panic.go:969 +0x166</span></span><br><span class="line"><span class="comment">command-line-arguments.TestPanic(0xc00011a120)</span></span><br><span class="line"><span class="comment">/Users/gaobinzhan/Documents/Go/learning/src/test/err_test.go:65 +0xd7</span></span><br><span class="line"><span class="comment">testing.tRunner(0xc00011a120, 0x114afa0)</span></span><br><span class="line"><span class="comment">/usr/local/Cellar/go/1.14.2_1/libexec/src/testing/testing.go:991 +0xdc</span></span><br><span class="line"><span class="comment">created by testing.(*T).Run</span></span><br><span class="line"><span class="comment">/usr/local/Cellar/go/1.14.2_1/libexec/src/testing/testing.go:1042 +0x357</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Process finished with exit code 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h3><p>大家在写c++或者php代码的时候，总有一种习惯不希望这个程序被中断或者退出，用来捕获。</p><p>php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (\<span class="built_in">Throwable</span> <span class="variable">$throwable</span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c++ 代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;<span class="built_in"><span class="keyword">catch</span></span>(...)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// 恢复错误</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRecover</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 没有写错误恢复 只是打印出来了</span></span><br><span class="line">fmt.Println(<span class="string">&quot;recovered from&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(<span class="string">&quot;Start&quot;</span>)</span><br><span class="line"><span class="built_in">panic</span>(errors.New(<span class="string">&quot;Something wrong!&quot;</span>))</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestRecover</span></span><br><span class="line"><span class="comment">Start</span></span><br><span class="line"><span class="comment">recovered from Something wrong!</span></span><br><span class="line"><span class="comment">--- PASS: TestRecover (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最常见的”错误恢复”：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Error(<span class="string">&quot;recovered panic&quot;</span>,err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>当心！<code>recover</code> 成为恶魔：</p><ul><li>形成僵尸服务进程，导致 health check 失效。</li><li>“Let it Crash!” 往往是我们恢复不确定性错误的最好方法。</li></ul><p>就如上常见的“错误恢复”只是记录了一下，这样的恢复方式是非常危险的。</p><p>一定要当心我们自己 <code>recover</code> 在做的事，因为我们 <code>recover</code> 的时候并不去检测错误到底发生了什么错误，而是简单的记录了一下或者忽略。</p><p>这时候可能是系统里面的某些核心资源已经消耗完了，我们这样把它强制恢复掉，其实系统依然不能够正常地工作的，还是导致我们的一些健康检查程序 health check 没有办法检查出当前系统的问题。</p><p>因为很多的这种 health check 只是检查当前的系统进程在还是不在，因为我们的进程是在的，所以就会导致一种僵尸服务进程，它好像活着，但它也不能提供服务。</p><p>这种情况下个人认为倒不如采用一种可恢复的设计模式其中的一种叫 <code>Let it Crash</code> ，干脆 <code>Crash</code>掉，一旦<code>Crash</code>掉 守护进程 ，就会帮我们的服务进程重新提起来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;编写好的错误处理&quot;&gt;&lt;a href=&quot;#编写好的错误处理&quot; class=&quot;headerlink&quot; title=&quot;编写好的错误处理&quot;&gt;&lt;/a&gt;编写好的错误处理&lt;/h2&gt;&lt;p&gt;Go的错误机制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;没有异常机制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="Go" scheme="https://stitch.cn/categories/Go/"/>
    
    
  </entry>
  
  <entry>
    <title>Go面向对象编程</title>
    <link href="https://stitch.cn/2020/05/17/go%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.html"/>
    <id>https://stitch.cn/2020/05/17/go%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.html</id>
    <published>2020-05-17T18:36:20.000Z</published>
    <updated>2021-10-11T05:56:08.207Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Is Go an object-oriented language?</strong></p><blockquote><p><strong>Yes and no</strong>. Although Go has types and methods and allows an object</p><p>oriented style of programming, there is <strong>no type hierarchy</strong>. <strong>The concept</strong> </p><p><strong>of “interface” in Go provides a different approach that we believe is</strong> </p><p><strong>easy to use and in some ways more general.</strong></p><p>Also, the lack of a type hierarchy makes “objects” in Go feel much more </p><p>lightweight than in languages such as C++ or Java.</p></blockquote><h2 id="行为的定义和实现"><a href="#行为的定义和实现" class="headerlink" title="行为的定义和实现"></a>行为的定义和实现</h2><p>结构体定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="keyword">string</span></span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例创建及初始化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateEmployee</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">e := Employee&#123;<span class="string">&quot;0&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="number">20</span>&#125;         <span class="comment">// 分别把值放进去</span></span><br><span class="line">e1 := Employee&#123;Name: <span class="string">&quot;Mike&quot;</span>, Age: <span class="number">30</span>&#125; <span class="comment">// 指定某个field的值</span></span><br><span class="line">e2 := <span class="built_in">new</span>(Employee)                   <span class="comment">// new关键字 去创建指向实例的指针 这里返回的引用/指针 相当于 e:=Employee&#123;&#125;</span></span><br><span class="line">e2.Id = <span class="string">&quot;2&quot;</span>                           <span class="comment">// 通过 example.filed 去赋值</span></span><br><span class="line">e2.Name = <span class="string">&quot;Rose&quot;</span></span><br><span class="line">e2.Age = <span class="number">22</span></span><br><span class="line">t.Log(e)</span><br><span class="line">t.Log(e1)</span><br><span class="line">t.Log(e1.Id)</span><br><span class="line">t.Log(e2)</span><br><span class="line">t.Logf(<span class="string">&quot;e is %T&quot;</span>, e)</span><br><span class="line">t.Logf(<span class="string">&quot;e2 is %T&quot;</span>, e2)</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestCreateEmployee</span></span><br><span class="line"><span class="comment">    TestCreateEmployee: encap_test.go:18: &#123;0 Bob 20&#125;</span></span><br><span class="line"><span class="comment">    TestCreateEmployee: encap_test.go:19: &#123; Mike 30&#125;</span></span><br><span class="line"><span class="comment">    TestCreateEmployee: encap_test.go:20:</span></span><br><span class="line"><span class="comment">    TestCreateEmployee: encap_test.go:21: &amp;&#123;2 Rose 22&#125;</span></span><br><span class="line"><span class="comment">    TestCreateEmployee: encap_test.go:22: e is test.Employee</span></span><br><span class="line"><span class="comment">    TestCreateEmployee: encap_test.go:23: e2 is *test.Employee</span></span><br><span class="line"><span class="comment">--- PASS: TestCreateEmployee (0.00s)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行为定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种定义方式在实例对应方法被调用时，实例的成员会进行值复制</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e Employee)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;ID:%s-Name:%s-Age:%d&quot;</span>, e.Id, e.Name, e.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStructOperations</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">e := Employee&#123;<span class="string">&quot;0&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="number">20</span>&#125;</span><br><span class="line">t.Log(e.String())</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestStructOperations</span></span><br><span class="line"><span class="comment">    TestStructOperations: encap_test.go:46: ID:0-Name:Bob-Age:20</span></span><br><span class="line"><span class="comment">--- PASS: TestStructOperations (0.00s)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通常情况下为了避免内存拷贝我们使用第二种定义方式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Employee)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;ID:%s/Name:%s/Age:%d&quot;</span>, e.Id, e.Name, e.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStructOperations</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">e := Employee&#123;<span class="string">&quot;0&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="number">20</span>&#125;</span><br><span class="line">t.Log(e.String())</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestStructOperations</span></span><br><span class="line"><span class="comment">    TestStructOperations: encap_test.go:51: ID:0/Name:Bob/Age:20</span></span><br><span class="line"><span class="comment">--- PASS: TestStructOperations (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在Go语言中不管通过指针访问还是通过实例访问，都是一样的</p><p>那么这两种定义没有区别吗？？</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Employee)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Address is %x \n&quot;</span>, unsafe.Pointer(&amp;e.Name))</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;ID:%s/Name:%s/Age:%d&quot;</span>, e.Id, e.Name, e.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStructOperations</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">e := Employee&#123;<span class="string">&quot;0&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="number">20</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Address is %x \n&quot;</span>, unsafe.Pointer(&amp;e.Name))</span><br><span class="line">t.Log(e.String())</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestStructOperations</span></span><br><span class="line"><span class="comment">Address is c000060370</span></span><br><span class="line"><span class="comment">Address is c000060370</span></span><br><span class="line"><span class="comment">    TestStructOperations: encap_test.go:54: ID:0/Name:Bob/Age:20</span></span><br><span class="line"><span class="comment">--- PASS: TestStructOperations (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现两个地址一致</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e Employee)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Address is %x \n&quot;</span>, unsafe.Pointer(&amp;e.Name))</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;ID:%s-Name:%s-Age:%d&quot;</span>, e.Id, e.Name, e.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStructOperations</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">e := Employee&#123;<span class="string">&quot;0&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="number">20</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Address is %x \n&quot;</span>, unsafe.Pointer(&amp;e.Name))</span><br><span class="line">t.Log(e.String())</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestStructOperations</span></span><br><span class="line"><span class="comment">Address is c000092370</span></span><br><span class="line"><span class="comment">Address is c0000923a0</span></span><br><span class="line"><span class="comment">    TestStructOperations: encap_test.go:55: ID:0-Name:Bob-Age:20</span></span><br><span class="line"><span class="comment">--- PASS: TestStructOperations (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候两个地址不一致，说明结构体的数据被复制了，会造成开销</p><h2 id="Go语言的相关接口"><a href="#Go语言的相关接口" class="headerlink" title="Go语言的相关接口"></a>Go语言的相关接口</h2><p>Java的接口与依赖：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzE3LzIzNGY5MDdkMjdlOTQucG5n?x-oss-process=image/format,png"></p><p>Go的 Duck Type 式接口实现：</p><ul><li>接口为非入侵性，实现不依赖与接口定义</li><li>所以接口的定义可以包含在接口使用者包内</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzE3L2IyYzAwNTUyNGM4OWQucG5n?x-oss-process=image/format,png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Programmer <span class="keyword">interface</span> &#123;</span><br><span class="line">WriteHelloWorld() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GoProgrammer <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *GoProgrammer)</span> <span class="title">WriteHelloWorld</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestClient</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p Programmer</span><br><span class="line">p = <span class="built_in">new</span>(GoProgrammer)</span><br><span class="line">t.Log(p.WriteHelloWorld())</span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestClient</span></span><br><span class="line"><span class="comment">    TestClient: interface_test.go:19: Hello World</span></span><br><span class="line"><span class="comment">--- PASS: TestClient (0.00s)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口变量：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzE3Lzg3ZTU5NDM1MTUxNzQucG5n?x-oss-process=image/format,png"></p><p>自定义类型：</p><ul><li>type IntConvertionFn func(n int) int</li><li>type MyPoint int</li></ul><h2 id="扩展和复用"><a href="#扩展和复用" class="headerlink" title="扩展和复用"></a>扩展和复用</h2><p>复合：</p><ul><li>Go不支持继承，可以通过复合的方式来复用</li></ul><p>匿名类型嵌入：</p><p>它不是<strong>继承</strong>，如果我们把“内部 struct”看作父类，把“外部 struct” 看作子类，会发现如下问题：</p><ul><li>不支持子类替换</li><li>子类并不是真正继承了父类的方法<ul><li>父类定义的方法无法访问子类的数据和方法</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Pet <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pet)</span> <span class="title">Speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Print(<span class="string">&quot;...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pet)</span> <span class="title">SpeakTo</span><span class="params">(<span class="keyword">string</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">p.Speak()</span><br><span class="line">fmt.Println(<span class="string">&quot; &quot;</span>, <span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">p *Pet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dog)</span> <span class="title">Speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Print(<span class="string">&quot;Wang!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dog)</span> <span class="title">SpeakTo</span><span class="params">(<span class="keyword">string</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">d.p.SpeakTo(<span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDog</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">dog := <span class="built_in">new</span>(Dog)</span><br><span class="line">dog.SpeakTo(<span class="string">&quot;Gao&quot;</span>) <span class="comment">// 没有打印 Wang! 需要改动 dog中SpeakTo方法</span></span><br><span class="line"><span class="comment">/** 运行结果：</span></span><br><span class="line"><span class="comment">=== RUN   TestDog</span></span><br><span class="line"><span class="comment">...  Gao</span></span><br><span class="line"><span class="comment">--- PASS: TestDog (0.00s)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态与空接口"><a href="#多态与空接口" class="headerlink" title="多态与空接口"></a>多态与空接口</h2><p>多态：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Code <span class="keyword">string</span> <span class="comment">// 自定义类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Programmer <span class="keyword">interface</span> &#123;</span><br><span class="line">WriteHelloWorld() Code</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GoProgrammer <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PhpProgrammer <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *GoProgrammer)</span> <span class="title">WriteHelloWorld</span><span class="params">()</span> <span class="title">Code</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;fmt.Println(\&quot;Hello World\&quot;)&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PhpProgrammer)</span> <span class="title">WriteHelloWorld</span><span class="params">()</span> <span class="title">Code</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;echo \&quot;Hello World\&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFirstProgram</span><span class="params">(p Programmer)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T %v\n&quot;</span>, p, p.WriteHelloWorld())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPolymorphism</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">goProg := <span class="built_in">new</span>(GoProgrammer)</span><br><span class="line">phpProg := <span class="built_in">new</span>(PhpProgrammer)</span><br><span class="line">writeFirstProgram(goProg)</span><br><span class="line">writeFirstProgram(phpProg)</span><br><span class="line"><span class="comment">/** 运行结果</span></span><br><span class="line"><span class="comment">=== RUN   TestPolymorphism</span></span><br><span class="line"><span class="comment">*test.GoProgrammer fmt.Println(&quot;Hello World&quot;)</span></span><br><span class="line"><span class="comment">*test.PhpProgrammer echo &quot;Hello World&quot;</span></span><br><span class="line"><span class="comment">--- PASS: TestPolymorphism (0.00s)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空接口与断言：</p><ul><li><p>空接口可以表示任何类型</p></li><li><p>通过断言来将空接口转换为制定类型</p><p><code>v, ok := p.(int)  // ok=true 时为转换成功</code></p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoSomething</span><span class="params">(p <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果传入的参数能被断言成一个整型</span></span><br><span class="line"><span class="keyword">if</span> i, ok := p.(<span class="keyword">int</span>); ok &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Integer&quot;</span>, i)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果传入的参数能被断言成一个字符型</span></span><br><span class="line"><span class="keyword">if</span> s, ok := p.(<span class="keyword">string</span>); ok &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;String&quot;</span>, s)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Unknow Type&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以通过switch来判断</span></span><br><span class="line"><span class="comment">/*switch v := p.(type) &#123;</span></span><br><span class="line"><span class="comment">case int:</span></span><br><span class="line"><span class="comment">fmt.Println(&quot;Integer&quot;, v)</span></span><br><span class="line"><span class="comment">case string:</span></span><br><span class="line"><span class="comment">fmt.Println(&quot;String&quot;, v)</span></span><br><span class="line"><span class="comment">default:</span></span><br><span class="line"><span class="comment">fmt.Println(&quot;Unknow Type&quot;)</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestEmptyInterfaceAssertion</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">DoSomething(<span class="number">10</span>)</span><br><span class="line">DoSomething(<span class="string">&quot;gaobinzhan&quot;</span>)</span><br><span class="line"><span class="comment">/** 运行结果</span></span><br><span class="line"><span class="comment">=== RUN   TestEmptyInterfaceAssertion</span></span><br><span class="line"><span class="comment">Integer 10</span></span><br><span class="line"><span class="comment">String gaobinzhan</span></span><br><span class="line"><span class="comment">--- PASS: TestEmptyInterfaceAssertion (0.00s)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go接口最佳实践：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA1LzE3L2Y4YmEwYzZhOGU5NTgucG5n?x-oss-process=image/format,png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Is Go an object-oriented language?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Yes and no&lt;/strong&gt;. Although Go has types and methods an</summary>
      
    
    
    
    <category term="Go" scheme="https://stitch.cn/categories/Go/"/>
    
    
  </entry>
  
</feed>
